//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/hello.maciek/Documents/__rider/sql_parser/RecruitTask/ParsingSql/Antlr/Sql.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ParsingSql.Antlr {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class SqlParser : Parser {
	public const int
		SCOL=1, DOT=2, OPEN_PAR=3, CLOSE_PAR=4, COMMA=5, ASSIGN=6, STAR=7, PLUS=8, 
		MINUS=9, TILDE=10, PIPE2=11, DIV=12, MOD=13, LT2=14, GT2=15, AMP=16, PIPE=17, 
		LT=18, LT_EQ=19, GT=20, GT_EQ=21, EQ=22, NOT_EQ1=23, NOT_EQ2=24, K_ABORT=25, 
		K_ACTION=26, K_ADD=27, K_AFTER=28, K_ALL=29, K_ALTER=30, K_ANALYZE=31, 
		K_AND=32, K_AS=33, K_ASC=34, K_ATTACH=35, K_AUTOINCREMENT=36, K_BEFORE=37, 
		K_BEGIN=38, K_BETWEEN=39, K_BY=40, K_CASCADE=41, K_CASE=42, K_CAST=43, 
		K_CHECK=44, K_COLLATE=45, K_COLUMN=46, K_COMMIT=47, K_CONFLICT=48, K_CONSTRAINT=49, 
		K_CREATE=50, K_CROSS=51, K_CURRENT_DATE=52, K_CURRENT_TIME=53, K_CURRENT_TIMESTAMP=54, 
		K_DATABASE=55, K_DEFAULT=56, K_DEFERRABLE=57, K_DEFERRED=58, K_DELETE=59, 
		K_DESC=60, K_DETACH=61, K_DISTINCT=62, K_DROP=63, K_EACH=64, K_ELSE=65, 
		K_END=66, K_ESCAPE=67, K_EXCEPT=68, K_EXCLUSIVE=69, K_EXISTS=70, K_EXPLAIN=71, 
		K_FAIL=72, K_FOR=73, K_FOREIGN=74, K_FROM=75, K_FULL=76, K_GLOB=77, K_GROUP=78, 
		K_HAVING=79, K_IF=80, K_IGNORE=81, K_IMMEDIATE=82, K_IN=83, K_INDEX=84, 
		K_INDEXED=85, K_INITIALLY=86, K_INNER=87, K_INSERT=88, K_INSTEAD=89, K_INTERSECT=90, 
		K_INTO=91, K_IS=92, K_ISNULL=93, K_JOIN=94, K_KEY=95, K_LEFT=96, K_LIKE=97, 
		K_LIMIT=98, K_MATCH=99, K_NATURAL=100, K_NO=101, K_NOT=102, K_NOTNULL=103, 
		K_NULL=104, K_OF=105, K_OFFSET=106, K_ON=107, K_OR=108, K_ORDER=109, K_OUTER=110, 
		K_PLAN=111, K_PRAGMA=112, K_PRIMARY=113, K_QUERY=114, K_RAISE=115, K_RECURSIVE=116, 
		K_REFERENCES=117, K_REGEXP=118, K_REINDEX=119, K_RELEASE=120, K_RENAME=121, 
		K_REPLACE=122, K_RESTRICT=123, K_RIGHT=124, K_ROLLBACK=125, K_ROW=126, 
		K_SAVEPOINT=127, K_SELECT=128, K_SET=129, K_TABLE=130, K_TEMP=131, K_TEMPORARY=132, 
		K_THEN=133, K_TO=134, K_TRANSACTION=135, K_TRIGGER=136, K_UNION=137, K_UNIQUE=138, 
		K_UPDATE=139, K_USING=140, K_VACUUM=141, K_VALUES=142, K_VIEW=143, K_VIRTUAL=144, 
		K_WHEN=145, K_WHERE=146, K_WITH=147, K_WITHOUT=148, IDENTIFIER=149, NUMERIC_LITERAL=150, 
		BIND_PARAMETER=151, STRING_LITERAL=152, BLOB_LITERAL=153, SINGLE_LINE_COMMENT=154, 
		MULTILINE_COMMENT=155, SPACES=156, UNEXPECTED_CHAR=157;
	public const int
		RULE_parse = 0, RULE_sql_stmt_list = 1, RULE_sql_stmt = 2, RULE_alter_table_stmt = 3, 
		RULE_analyze_stmt = 4, RULE_attach_stmt = 5, RULE_begin_stmt = 6, RULE_commit_stmt = 7, 
		RULE_compound_select_stmt = 8, RULE_create_index_stmt = 9, RULE_create_table_stmt = 10, 
		RULE_create_trigger_stmt = 11, RULE_create_view_stmt = 12, RULE_create_virtual_table_stmt = 13, 
		RULE_delete_stmt = 14, RULE_delete_stmt_limited = 15, RULE_detach_stmt = 16, 
		RULE_drop_index_stmt = 17, RULE_drop_table_stmt = 18, RULE_drop_trigger_stmt = 19, 
		RULE_drop_view_stmt = 20, RULE_factored_select_stmt = 21, RULE_insert_stmt = 22, 
		RULE_pragma_stmt = 23, RULE_reindex_stmt = 24, RULE_release_stmt = 25, 
		RULE_rollback_stmt = 26, RULE_savepoint_stmt = 27, RULE_simple_select_stmt = 28, 
		RULE_select_stmt = 29, RULE_select_or_values = 30, RULE_update_stmt = 31, 
		RULE_update_stmt_limited = 32, RULE_vacuum_stmt = 33, RULE_column_def = 34, 
		RULE_type_name = 35, RULE_column_constraint = 36, RULE_conflict_clause = 37, 
		RULE_expr = 38, RULE_foreign_key_clause = 39, RULE_raise_function = 40, 
		RULE_indexed_column = 41, RULE_table_constraint = 42, RULE_with_clause = 43, 
		RULE_qualified_table_name = 44, RULE_ordering_term = 45, RULE_pragma_value = 46, 
		RULE_common_table_expression = 47, RULE_result_column = 48, RULE_table_or_subquery = 49, 
		RULE_join_clause = 50, RULE_join_operator = 51, RULE_join_constraint = 52, 
		RULE_select_core = 53, RULE_compound_operator = 54, RULE_cte_table_name = 55, 
		RULE_signed_number = 56, RULE_literal_value = 57, RULE_unary_operator = 58, 
		RULE_error_message = 59, RULE_module_argument = 60, RULE_column_alias = 61, 
		RULE_keyword = 62, RULE_name = 63, RULE_function_name = 64, RULE_database_name = 65, 
		RULE_table_name = 66, RULE_table_or_index_name = 67, RULE_new_table_name = 68, 
		RULE_column_name = 69, RULE_collation_name = 70, RULE_foreign_table = 71, 
		RULE_index_name = 72, RULE_trigger_name = 73, RULE_view_name = 74, RULE_module_name = 75, 
		RULE_pragma_name = 76, RULE_savepoint_name = 77, RULE_table_alias = 78, 
		RULE_transaction_name = 79, RULE_any_name = 80;
	public static readonly string[] ruleNames = {
		"parse", "sql_stmt_list", "sql_stmt", "alter_table_stmt", "analyze_stmt", 
		"attach_stmt", "begin_stmt", "commit_stmt", "compound_select_stmt", "create_index_stmt", 
		"create_table_stmt", "create_trigger_stmt", "create_view_stmt", "create_virtual_table_stmt", 
		"delete_stmt", "delete_stmt_limited", "detach_stmt", "drop_index_stmt", 
		"drop_table_stmt", "drop_trigger_stmt", "drop_view_stmt", "factored_select_stmt", 
		"insert_stmt", "pragma_stmt", "reindex_stmt", "release_stmt", "rollback_stmt", 
		"savepoint_stmt", "simple_select_stmt", "select_stmt", "select_or_values", 
		"update_stmt", "update_stmt_limited", "vacuum_stmt", "column_def", "type_name", 
		"column_constraint", "conflict_clause", "expr", "foreign_key_clause", 
		"raise_function", "indexed_column", "table_constraint", "with_clause", 
		"qualified_table_name", "ordering_term", "pragma_value", "common_table_expression", 
		"result_column", "table_or_subquery", "join_clause", "join_operator", 
		"join_constraint", "select_core", "compound_operator", "cte_table_name", 
		"signed_number", "literal_value", "unary_operator", "error_message", "module_argument", 
		"column_alias", "keyword", "name", "function_name", "database_name", "table_name", 
		"table_or_index_name", "new_table_name", "column_name", "collation_name", 
		"foreign_table", "index_name", "trigger_name", "view_name", "module_name", 
		"pragma_name", "savepoint_name", "table_alias", "transaction_name", "any_name"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", "'-'", "'~'", 
		"'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", 
		"'>='", "'=='", "'!='", "'<>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", "ASSIGN", "STAR", 
		"PLUS", "MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", 
		"PIPE", "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", "K_ABORT", 
		"K_ACTION", "K_ADD", "K_AFTER", "K_ALL", "K_ALTER", "K_ANALYZE", "K_AND", 
		"K_AS", "K_ASC", "K_ATTACH", "K_AUTOINCREMENT", "K_BEFORE", "K_BEGIN", 
		"K_BETWEEN", "K_BY", "K_CASCADE", "K_CASE", "K_CAST", "K_CHECK", "K_COLLATE", 
		"K_COLUMN", "K_COMMIT", "K_CONFLICT", "K_CONSTRAINT", "K_CREATE", "K_CROSS", 
		"K_CURRENT_DATE", "K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE", 
		"K_DEFAULT", "K_DEFERRABLE", "K_DEFERRED", "K_DELETE", "K_DESC", "K_DETACH", 
		"K_DISTINCT", "K_DROP", "K_EACH", "K_ELSE", "K_END", "K_ESCAPE", "K_EXCEPT", 
		"K_EXCLUSIVE", "K_EXISTS", "K_EXPLAIN", "K_FAIL", "K_FOR", "K_FOREIGN", 
		"K_FROM", "K_FULL", "K_GLOB", "K_GROUP", "K_HAVING", "K_IF", "K_IGNORE", 
		"K_IMMEDIATE", "K_IN", "K_INDEX", "K_INDEXED", "K_INITIALLY", "K_INNER", 
		"K_INSERT", "K_INSTEAD", "K_INTERSECT", "K_INTO", "K_IS", "K_ISNULL", 
		"K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT", "K_MATCH", "K_NATURAL", 
		"K_NO", "K_NOT", "K_NOTNULL", "K_NULL", "K_OF", "K_OFFSET", "K_ON", "K_OR", 
		"K_ORDER", "K_OUTER", "K_PLAN", "K_PRAGMA", "K_PRIMARY", "K_QUERY", "K_RAISE", 
		"K_RECURSIVE", "K_REFERENCES", "K_REGEXP", "K_REINDEX", "K_RELEASE", "K_RENAME", 
		"K_REPLACE", "K_RESTRICT", "K_RIGHT", "K_ROLLBACK", "K_ROW", "K_SAVEPOINT", 
		"K_SELECT", "K_SET", "K_TABLE", "K_TEMP", "K_TEMPORARY", "K_THEN", "K_TO", 
		"K_TRANSACTION", "K_TRIGGER", "K_UNION", "K_UNIQUE", "K_UPDATE", "K_USING", 
		"K_VACUUM", "K_VALUES", "K_VIEW", "K_VIRTUAL", "K_WHEN", "K_WHERE", "K_WITH", 
		"K_WITHOUT", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", "STRING_LITERAL", 
		"BLOB_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES", 
		"UNEXPECTED_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SqlParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ParseContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SqlParser.Eof, 0); }
		public Sql_stmt_listContext[] sql_stmt_list() {
			return GetRuleContexts<Sql_stmt_listContext>();
		}
		public Sql_stmt_listContext sql_stmt_list(int i) {
			return GetRuleContext<Sql_stmt_listContext>(i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SCOL) | (1L << K_ALTER) | (1L << K_ANALYZE) | (1L << K_ATTACH) | (1L << K_BEGIN) | (1L << K_COMMIT) | (1L << K_CREATE) | (1L << K_DELETE) | (1L << K_DETACH) | (1L << K_DROP))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (K_END - 66)) | (1L << (K_EXPLAIN - 66)) | (1L << (K_INSERT - 66)) | (1L << (K_PRAGMA - 66)) | (1L << (K_REINDEX - 66)) | (1L << (K_RELEASE - 66)) | (1L << (K_REPLACE - 66)) | (1L << (K_ROLLBACK - 66)) | (1L << (K_SAVEPOINT - 66)) | (1L << (K_SELECT - 66)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (K_UPDATE - 139)) | (1L << (K_VACUUM - 139)) | (1L << (K_VALUES - 139)) | (1L << (K_WITH - 139)))) != 0)) {
				{
				{
				State = 162; sql_stmt_list();
				}
				}
				State = 167;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 168; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmt_listContext : ParserRuleContext {
		public Sql_stmtContext[] sql_stmt() {
			return GetRuleContexts<Sql_stmtContext>();
		}
		public Sql_stmtContext sql_stmt(int i) {
			return GetRuleContext<Sql_stmtContext>(i);
		}
		public Sql_stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSql_stmt_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSql_stmt_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_stmt_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmt_listContext sql_stmt_list() {
		Sql_stmt_listContext _localctx = new Sql_stmt_listContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_sql_stmt_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==SCOL) {
				{
				{
				State = 170; Match(SCOL);
				}
				}
				State = 175;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 176; sql_stmt();
			State = 185;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 178;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 177; Match(SCOL);
						}
						}
						State = 180;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==SCOL );
					State = 182; sql_stmt();
					}
					} 
				}
				State = 187;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			State = 191;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 188; Match(SCOL);
					}
					} 
				}
				State = 193;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmtContext : ParserRuleContext {
		public Alter_table_stmtContext alter_table_stmt() {
			return GetRuleContext<Alter_table_stmtContext>(0);
		}
		public Analyze_stmtContext analyze_stmt() {
			return GetRuleContext<Analyze_stmtContext>(0);
		}
		public Attach_stmtContext attach_stmt() {
			return GetRuleContext<Attach_stmtContext>(0);
		}
		public Begin_stmtContext begin_stmt() {
			return GetRuleContext<Begin_stmtContext>(0);
		}
		public Commit_stmtContext commit_stmt() {
			return GetRuleContext<Commit_stmtContext>(0);
		}
		public Compound_select_stmtContext compound_select_stmt() {
			return GetRuleContext<Compound_select_stmtContext>(0);
		}
		public Create_index_stmtContext create_index_stmt() {
			return GetRuleContext<Create_index_stmtContext>(0);
		}
		public Create_table_stmtContext create_table_stmt() {
			return GetRuleContext<Create_table_stmtContext>(0);
		}
		public Create_trigger_stmtContext create_trigger_stmt() {
			return GetRuleContext<Create_trigger_stmtContext>(0);
		}
		public Create_view_stmtContext create_view_stmt() {
			return GetRuleContext<Create_view_stmtContext>(0);
		}
		public Create_virtual_table_stmtContext create_virtual_table_stmt() {
			return GetRuleContext<Create_virtual_table_stmtContext>(0);
		}
		public Delete_stmtContext delete_stmt() {
			return GetRuleContext<Delete_stmtContext>(0);
		}
		public Delete_stmt_limitedContext delete_stmt_limited() {
			return GetRuleContext<Delete_stmt_limitedContext>(0);
		}
		public Detach_stmtContext detach_stmt() {
			return GetRuleContext<Detach_stmtContext>(0);
		}
		public Drop_index_stmtContext drop_index_stmt() {
			return GetRuleContext<Drop_index_stmtContext>(0);
		}
		public Drop_table_stmtContext drop_table_stmt() {
			return GetRuleContext<Drop_table_stmtContext>(0);
		}
		public Drop_trigger_stmtContext drop_trigger_stmt() {
			return GetRuleContext<Drop_trigger_stmtContext>(0);
		}
		public Drop_view_stmtContext drop_view_stmt() {
			return GetRuleContext<Drop_view_stmtContext>(0);
		}
		public Factored_select_stmtContext factored_select_stmt() {
			return GetRuleContext<Factored_select_stmtContext>(0);
		}
		public Insert_stmtContext insert_stmt() {
			return GetRuleContext<Insert_stmtContext>(0);
		}
		public Pragma_stmtContext pragma_stmt() {
			return GetRuleContext<Pragma_stmtContext>(0);
		}
		public Reindex_stmtContext reindex_stmt() {
			return GetRuleContext<Reindex_stmtContext>(0);
		}
		public Release_stmtContext release_stmt() {
			return GetRuleContext<Release_stmtContext>(0);
		}
		public Rollback_stmtContext rollback_stmt() {
			return GetRuleContext<Rollback_stmtContext>(0);
		}
		public Savepoint_stmtContext savepoint_stmt() {
			return GetRuleContext<Savepoint_stmtContext>(0);
		}
		public Simple_select_stmtContext simple_select_stmt() {
			return GetRuleContext<Simple_select_stmtContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Update_stmtContext update_stmt() {
			return GetRuleContext<Update_stmtContext>(0);
		}
		public Update_stmt_limitedContext update_stmt_limited() {
			return GetRuleContext<Update_stmt_limitedContext>(0);
		}
		public Vacuum_stmtContext vacuum_stmt() {
			return GetRuleContext<Vacuum_stmtContext>(0);
		}
		public ITerminalNode K_EXPLAIN() { return GetToken(SqlParser.K_EXPLAIN, 0); }
		public ITerminalNode K_QUERY() { return GetToken(SqlParser.K_QUERY, 0); }
		public ITerminalNode K_PLAN() { return GetToken(SqlParser.K_PLAN, 0); }
		public Sql_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSql_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSql_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmtContext sql_stmt() {
		Sql_stmtContext _localctx = new Sql_stmtContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_sql_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_EXPLAIN) {
				{
				State = 194; Match(K_EXPLAIN);
				State = 197;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_QUERY) {
					{
					State = 195; Match(K_QUERY);
					State = 196; Match(K_PLAN);
					}
				}

				}
			}

			State = 231;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 201; alter_table_stmt();
				}
				break;

			case 2:
				{
				State = 202; analyze_stmt();
				}
				break;

			case 3:
				{
				State = 203; attach_stmt();
				}
				break;

			case 4:
				{
				State = 204; begin_stmt();
				}
				break;

			case 5:
				{
				State = 205; commit_stmt();
				}
				break;

			case 6:
				{
				State = 206; compound_select_stmt();
				}
				break;

			case 7:
				{
				State = 207; create_index_stmt();
				}
				break;

			case 8:
				{
				State = 208; create_table_stmt();
				}
				break;

			case 9:
				{
				State = 209; create_trigger_stmt();
				}
				break;

			case 10:
				{
				State = 210; create_view_stmt();
				}
				break;

			case 11:
				{
				State = 211; create_virtual_table_stmt();
				}
				break;

			case 12:
				{
				State = 212; delete_stmt();
				}
				break;

			case 13:
				{
				State = 213; delete_stmt_limited();
				}
				break;

			case 14:
				{
				State = 214; detach_stmt();
				}
				break;

			case 15:
				{
				State = 215; drop_index_stmt();
				}
				break;

			case 16:
				{
				State = 216; drop_table_stmt();
				}
				break;

			case 17:
				{
				State = 217; drop_trigger_stmt();
				}
				break;

			case 18:
				{
				State = 218; drop_view_stmt();
				}
				break;

			case 19:
				{
				State = 219; factored_select_stmt();
				}
				break;

			case 20:
				{
				State = 220; insert_stmt();
				}
				break;

			case 21:
				{
				State = 221; pragma_stmt();
				}
				break;

			case 22:
				{
				State = 222; reindex_stmt();
				}
				break;

			case 23:
				{
				State = 223; release_stmt();
				}
				break;

			case 24:
				{
				State = 224; rollback_stmt();
				}
				break;

			case 25:
				{
				State = 225; savepoint_stmt();
				}
				break;

			case 26:
				{
				State = 226; simple_select_stmt();
				}
				break;

			case 27:
				{
				State = 227; select_stmt();
				}
				break;

			case 28:
				{
				State = 228; update_stmt();
				}
				break;

			case 29:
				{
				State = 229; update_stmt_limited();
				}
				break;

			case 30:
				{
				State = 230; vacuum_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_stmtContext : ParserRuleContext {
		public ITerminalNode K_ALTER() { return GetToken(SqlParser.K_ALTER, 0); }
		public ITerminalNode K_TABLE() { return GetToken(SqlParser.K_TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_RENAME() { return GetToken(SqlParser.K_RENAME, 0); }
		public ITerminalNode K_TO() { return GetToken(SqlParser.K_TO, 0); }
		public New_table_nameContext new_table_name() {
			return GetRuleContext<New_table_nameContext>(0);
		}
		public ITerminalNode K_ADD() { return GetToken(SqlParser.K_ADD, 0); }
		public Column_defContext column_def() {
			return GetRuleContext<Column_defContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_COLUMN() { return GetToken(SqlParser.K_COLUMN, 0); }
		public Alter_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterAlter_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitAlter_table_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_stmtContext alter_table_stmt() {
		Alter_table_stmtContext _localctx = new Alter_table_stmtContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_alter_table_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(K_ALTER);
			State = 234; Match(K_TABLE);
			State = 238;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 235; database_name();
				State = 236; Match(DOT);
				}
				break;
			}
			State = 240; table_name();
			State = 249;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_RENAME:
				{
				State = 241; Match(K_RENAME);
				State = 242; Match(K_TO);
				State = 243; new_table_name();
				}
				break;
			case K_ADD:
				{
				State = 244; Match(K_ADD);
				State = 246;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
				case 1:
					{
					State = 245; Match(K_COLUMN);
					}
					break;
				}
				State = 248; column_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analyze_stmtContext : ParserRuleContext {
		public ITerminalNode K_ANALYZE() { return GetToken(SqlParser.K_ANALYZE, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Table_or_index_nameContext table_or_index_name() {
			return GetRuleContext<Table_or_index_nameContext>(0);
		}
		public Analyze_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyze_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterAnalyze_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitAnalyze_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalyze_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Analyze_stmtContext analyze_stmt() {
		Analyze_stmtContext _localctx = new Analyze_stmtContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_analyze_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; Match(K_ANALYZE);
			State = 258;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 252; database_name();
				}
				break;

			case 2:
				{
				State = 253; table_or_index_name();
				}
				break;

			case 3:
				{
				State = 254; database_name();
				State = 255; Match(DOT);
				State = 256; table_or_index_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attach_stmtContext : ParserRuleContext {
		public ITerminalNode K_ATTACH() { return GetToken(SqlParser.K_ATTACH, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(SqlParser.K_AS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_DATABASE() { return GetToken(SqlParser.K_DATABASE, 0); }
		public Attach_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attach_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterAttach_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitAttach_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttach_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attach_stmtContext attach_stmt() {
		Attach_stmtContext _localctx = new Attach_stmtContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_attach_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; Match(K_ATTACH);
			State = 262;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				State = 261; Match(K_DATABASE);
				}
				break;
			}
			State = 264; expr(0);
			State = 265; Match(K_AS);
			State = 266; database_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_stmtContext : ParserRuleContext {
		public ITerminalNode K_BEGIN() { return GetToken(SqlParser.K_BEGIN, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SqlParser.K_TRANSACTION, 0); }
		public ITerminalNode K_DEFERRED() { return GetToken(SqlParser.K_DEFERRED, 0); }
		public ITerminalNode K_IMMEDIATE() { return GetToken(SqlParser.K_IMMEDIATE, 0); }
		public ITerminalNode K_EXCLUSIVE() { return GetToken(SqlParser.K_EXCLUSIVE, 0); }
		public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public Begin_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterBegin_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitBegin_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_stmtContext begin_stmt() {
		Begin_stmtContext _localctx = new Begin_stmtContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_begin_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; Match(K_BEGIN);
			State = 270;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (K_DEFERRED - 58)) | (1L << (K_EXCLUSIVE - 58)) | (1L << (K_IMMEDIATE - 58)))) != 0)) {
				{
				State = 269;
				_la = _input.La(1);
				if ( !(((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (K_DEFERRED - 58)) | (1L << (K_EXCLUSIVE - 58)) | (1L << (K_IMMEDIATE - 58)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 276;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_TRANSACTION) {
				{
				State = 272; Match(K_TRANSACTION);
				State = 274;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
				case 1:
					{
					State = 273; transaction_name();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commit_stmtContext : ParserRuleContext {
		public ITerminalNode K_COMMIT() { return GetToken(SqlParser.K_COMMIT, 0); }
		public ITerminalNode K_END() { return GetToken(SqlParser.K_END, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SqlParser.K_TRANSACTION, 0); }
		public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public Commit_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commit_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterCommit_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitCommit_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommit_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Commit_stmtContext commit_stmt() {
		Commit_stmtContext _localctx = new Commit_stmtContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_commit_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			_la = _input.La(1);
			if ( !(_la==K_COMMIT || _la==K_END) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 283;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_TRANSACTION) {
				{
				State = 279; Match(K_TRANSACTION);
				State = 281;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					State = 280; transaction_name();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_select_stmtContext : ParserRuleContext {
		public Select_coreContext[] select_core() {
			return GetRuleContexts<Select_coreContext>();
		}
		public Select_coreContext select_core(int i) {
			return GetRuleContext<Select_coreContext>(i);
		}
		public ITerminalNode K_WITH() { return GetToken(SqlParser.K_WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public ITerminalNode K_ORDER() { return GetToken(SqlParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SqlParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SqlParser.K_LIMIT, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] K_UNION() { return GetTokens(SqlParser.K_UNION); }
		public ITerminalNode K_UNION(int i) {
			return GetToken(SqlParser.K_UNION, i);
		}
		public ITerminalNode[] K_INTERSECT() { return GetTokens(SqlParser.K_INTERSECT); }
		public ITerminalNode K_INTERSECT(int i) {
			return GetToken(SqlParser.K_INTERSECT, i);
		}
		public ITerminalNode[] K_EXCEPT() { return GetTokens(SqlParser.K_EXCEPT); }
		public ITerminalNode K_EXCEPT(int i) {
			return GetToken(SqlParser.K_EXCEPT, i);
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(SqlParser.K_RECURSIVE, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(SqlParser.K_OFFSET, 0); }
		public ITerminalNode[] K_ALL() { return GetTokens(SqlParser.K_ALL); }
		public ITerminalNode K_ALL(int i) {
			return GetToken(SqlParser.K_ALL, i);
		}
		public Compound_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterCompound_select_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitCompound_select_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_select_stmtContext compound_select_stmt() {
		Compound_select_stmtContext _localctx = new Compound_select_stmtContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_compound_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 285; Match(K_WITH);
				State = 287;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
				case 1:
					{
					State = 286; Match(K_RECURSIVE);
					}
					break;
				}
				State = 289; common_table_expression();
				State = 294;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 290; Match(COMMA);
					State = 291; common_table_expression();
					}
					}
					State = 296;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 299; select_core();
			State = 309;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 306;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case K_UNION:
					{
					State = 300; Match(K_UNION);
					State = 302;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==K_ALL) {
						{
						State = 301; Match(K_ALL);
						}
					}

					}
					break;
				case K_INTERSECT:
					{
					State = 304; Match(K_INTERSECT);
					}
					break;
				case K_EXCEPT:
					{
					State = 305; Match(K_EXCEPT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 308; select_core();
				}
				}
				State = 311;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==K_EXCEPT || _la==K_INTERSECT || _la==K_UNION );
			State = 323;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ORDER) {
				{
				State = 313; Match(K_ORDER);
				State = 314; Match(K_BY);
				State = 315; ordering_term();
				State = 320;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 316; Match(COMMA);
					State = 317; ordering_term();
					}
					}
					State = 322;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 331;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_LIMIT) {
				{
				State = 325; Match(K_LIMIT);
				State = 326; expr(0);
				State = 329;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 327;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 328; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_index_stmtContext : ParserRuleContext {
		public ITerminalNode K_CREATE() { return GetToken(SqlParser.K_CREATE, 0); }
		public ITerminalNode K_INDEX() { return GetToken(SqlParser.K_INDEX, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_ON() { return GetToken(SqlParser.K_ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Indexed_columnContext[] indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		public ITerminalNode K_UNIQUE() { return GetToken(SqlParser.K_UNIQUE, 0); }
		public ITerminalNode K_IF() { return GetToken(SqlParser.K_IF, 0); }
		public ITerminalNode K_NOT() { return GetToken(SqlParser.K_NOT, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SqlParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_WHERE() { return GetToken(SqlParser.K_WHERE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Create_index_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterCreate_index_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitCreate_index_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_index_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_index_stmtContext create_index_stmt() {
		Create_index_stmtContext _localctx = new Create_index_stmtContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_create_index_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; Match(K_CREATE);
			State = 335;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_UNIQUE) {
				{
				State = 334; Match(K_UNIQUE);
				}
			}

			State = 337; Match(K_INDEX);
			State = 341;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 338; Match(K_IF);
				State = 339; Match(K_NOT);
				State = 340; Match(K_EXISTS);
				}
				break;
			}
			State = 346;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 343; database_name();
				State = 344; Match(DOT);
				}
				break;
			}
			State = 348; index_name();
			State = 349; Match(K_ON);
			State = 350; table_name();
			State = 351; Match(OPEN_PAR);
			State = 352; indexed_column();
			State = 357;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 353; Match(COMMA);
				State = 354; indexed_column();
				}
				}
				State = 359;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 360; Match(CLOSE_PAR);
			State = 363;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 361; Match(K_WHERE);
				State = 362; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_stmtContext : ParserRuleContext {
		public ITerminalNode K_CREATE() { return GetToken(SqlParser.K_CREATE, 0); }
		public ITerminalNode K_TABLE() { return GetToken(SqlParser.K_TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_defContext[] column_def() {
			return GetRuleContexts<Column_defContext>();
		}
		public Column_defContext column_def(int i) {
			return GetRuleContext<Column_defContext>(i);
		}
		public ITerminalNode K_AS() { return GetToken(SqlParser.K_AS, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SqlParser.K_IF, 0); }
		public ITerminalNode K_NOT() { return GetToken(SqlParser.K_NOT, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SqlParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_TEMP() { return GetToken(SqlParser.K_TEMP, 0); }
		public ITerminalNode K_TEMPORARY() { return GetToken(SqlParser.K_TEMPORARY, 0); }
		public Table_constraintContext[] table_constraint() {
			return GetRuleContexts<Table_constraintContext>();
		}
		public Table_constraintContext table_constraint(int i) {
			return GetRuleContext<Table_constraintContext>(i);
		}
		public ITerminalNode K_WITHOUT() { return GetToken(SqlParser.K_WITHOUT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SqlParser.IDENTIFIER, 0); }
		public Create_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterCreate_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitCreate_table_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_stmtContext create_table_stmt() {
		Create_table_stmtContext _localctx = new Create_table_stmtContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_create_table_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 365; Match(K_CREATE);
			State = 367;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_TEMP || _la==K_TEMPORARY) {
				{
				State = 366;
				_la = _input.La(1);
				if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 369; Match(K_TABLE);
			State = 373;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 370; Match(K_IF);
				State = 371; Match(K_NOT);
				State = 372; Match(K_EXISTS);
				}
				break;
			}
			State = 378;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				State = 375; database_name();
				State = 376; Match(DOT);
				}
				break;
			}
			State = 380; table_name();
			State = 404;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPEN_PAR:
				{
				State = 381; Match(OPEN_PAR);
				State = 382; column_def();
				State = 387;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 383; Match(COMMA);
						State = 384; column_def();
						}
						} 
					}
					State = 389;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
				}
				State = 394;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 390; Match(COMMA);
					State = 391; table_constraint();
					}
					}
					State = 396;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 397; Match(CLOSE_PAR);
				State = 400;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_WITHOUT) {
					{
					State = 398; Match(K_WITHOUT);
					State = 399; Match(IDENTIFIER);
					}
				}

				}
				break;
			case K_AS:
				{
				State = 402; Match(K_AS);
				State = 403; select_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_trigger_stmtContext : ParserRuleContext {
		public ITerminalNode K_CREATE() { return GetToken(SqlParser.K_CREATE, 0); }
		public ITerminalNode K_TRIGGER() { return GetToken(SqlParser.K_TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public ITerminalNode K_ON() { return GetToken(SqlParser.K_ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_BEGIN() { return GetToken(SqlParser.K_BEGIN, 0); }
		public ITerminalNode K_END() { return GetToken(SqlParser.K_END, 0); }
		public ITerminalNode K_DELETE() { return GetToken(SqlParser.K_DELETE, 0); }
		public ITerminalNode K_INSERT() { return GetToken(SqlParser.K_INSERT, 0); }
		public ITerminalNode K_UPDATE() { return GetToken(SqlParser.K_UPDATE, 0); }
		public ITerminalNode K_IF() { return GetToken(SqlParser.K_IF, 0); }
		public ITerminalNode K_NOT() { return GetToken(SqlParser.K_NOT, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SqlParser.K_EXISTS, 0); }
		public Database_nameContext[] database_name() {
			return GetRuleContexts<Database_nameContext>();
		}
		public Database_nameContext database_name(int i) {
			return GetRuleContext<Database_nameContext>(i);
		}
		public ITerminalNode K_BEFORE() { return GetToken(SqlParser.K_BEFORE, 0); }
		public ITerminalNode K_AFTER() { return GetToken(SqlParser.K_AFTER, 0); }
		public ITerminalNode K_INSTEAD() { return GetToken(SqlParser.K_INSTEAD, 0); }
		public ITerminalNode[] K_OF() { return GetTokens(SqlParser.K_OF); }
		public ITerminalNode K_OF(int i) {
			return GetToken(SqlParser.K_OF, i);
		}
		public ITerminalNode K_FOR() { return GetToken(SqlParser.K_FOR, 0); }
		public ITerminalNode K_EACH() { return GetToken(SqlParser.K_EACH, 0); }
		public ITerminalNode K_ROW() { return GetToken(SqlParser.K_ROW, 0); }
		public ITerminalNode K_WHEN() { return GetToken(SqlParser.K_WHEN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_TEMP() { return GetToken(SqlParser.K_TEMP, 0); }
		public ITerminalNode K_TEMPORARY() { return GetToken(SqlParser.K_TEMPORARY, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Update_stmtContext[] update_stmt() {
			return GetRuleContexts<Update_stmtContext>();
		}
		public Update_stmtContext update_stmt(int i) {
			return GetRuleContext<Update_stmtContext>(i);
		}
		public Insert_stmtContext[] insert_stmt() {
			return GetRuleContexts<Insert_stmtContext>();
		}
		public Insert_stmtContext insert_stmt(int i) {
			return GetRuleContext<Insert_stmtContext>(i);
		}
		public Delete_stmtContext[] delete_stmt() {
			return GetRuleContexts<Delete_stmtContext>();
		}
		public Delete_stmtContext delete_stmt(int i) {
			return GetRuleContext<Delete_stmtContext>(i);
		}
		public Select_stmtContext[] select_stmt() {
			return GetRuleContexts<Select_stmtContext>();
		}
		public Select_stmtContext select_stmt(int i) {
			return GetRuleContext<Select_stmtContext>(i);
		}
		public Create_trigger_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_trigger_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterCreate_trigger_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitCreate_trigger_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_trigger_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_trigger_stmtContext create_trigger_stmt() {
		Create_trigger_stmtContext _localctx = new Create_trigger_stmtContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_create_trigger_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406; Match(K_CREATE);
			State = 408;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_TEMP || _la==K_TEMPORARY) {
				{
				State = 407;
				_la = _input.La(1);
				if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 410; Match(K_TRIGGER);
			State = 414;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				State = 411; Match(K_IF);
				State = 412; Match(K_NOT);
				State = 413; Match(K_EXISTS);
				}
				break;
			}
			State = 419;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 416; database_name();
				State = 417; Match(DOT);
				}
				break;
			}
			State = 421; trigger_name();
			State = 426;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_BEFORE:
				{
				State = 422; Match(K_BEFORE);
				}
				break;
			case K_AFTER:
				{
				State = 423; Match(K_AFTER);
				}
				break;
			case K_INSTEAD:
				{
				State = 424; Match(K_INSTEAD);
				State = 425; Match(K_OF);
				}
				break;
			case K_DELETE:
			case K_INSERT:
			case K_UPDATE:
				break;
			default:
				break;
			}
			State = 442;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_DELETE:
				{
				State = 428; Match(K_DELETE);
				}
				break;
			case K_INSERT:
				{
				State = 429; Match(K_INSERT);
				}
				break;
			case K_UPDATE:
				{
				State = 430; Match(K_UPDATE);
				State = 440;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_OF) {
					{
					State = 431; Match(K_OF);
					State = 432; column_name();
					State = 437;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 433; Match(COMMA);
						State = 434; column_name();
						}
						}
						State = 439;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 444; Match(K_ON);
			State = 448;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 445; database_name();
				State = 446; Match(DOT);
				}
				break;
			}
			State = 450; table_name();
			State = 454;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_FOR) {
				{
				State = 451; Match(K_FOR);
				State = 452; Match(K_EACH);
				State = 453; Match(K_ROW);
				}
			}

			State = 458;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WHEN) {
				{
				State = 456; Match(K_WHEN);
				State = 457; expr(0);
				}
			}

			State = 460; Match(K_BEGIN);
			State = 469;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 465;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
				case 1:
					{
					State = 461; update_stmt();
					}
					break;

				case 2:
					{
					State = 462; insert_stmt();
					}
					break;

				case 3:
					{
					State = 463; delete_stmt();
					}
					break;

				case 4:
					{
					State = 464; select_stmt();
					}
					break;
				}
				State = 467; Match(SCOL);
				}
				}
				State = 471;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==K_DELETE || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (K_INSERT - 88)) | (1L << (K_REPLACE - 88)) | (1L << (K_SELECT - 88)) | (1L << (K_UPDATE - 88)) | (1L << (K_VALUES - 88)) | (1L << (K_WITH - 88)))) != 0) );
			State = 473; Match(K_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_view_stmtContext : ParserRuleContext {
		public ITerminalNode K_CREATE() { return GetToken(SqlParser.K_CREATE, 0); }
		public ITerminalNode K_VIEW() { return GetToken(SqlParser.K_VIEW, 0); }
		public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(SqlParser.K_AS, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SqlParser.K_IF, 0); }
		public ITerminalNode K_NOT() { return GetToken(SqlParser.K_NOT, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SqlParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_TEMP() { return GetToken(SqlParser.K_TEMP, 0); }
		public ITerminalNode K_TEMPORARY() { return GetToken(SqlParser.K_TEMPORARY, 0); }
		public Create_view_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterCreate_view_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitCreate_view_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_view_stmtContext create_view_stmt() {
		Create_view_stmtContext _localctx = new Create_view_stmtContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_create_view_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475; Match(K_CREATE);
			State = 477;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_TEMP || _la==K_TEMPORARY) {
				{
				State = 476;
				_la = _input.La(1);
				if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 479; Match(K_VIEW);
			State = 483;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 480; Match(K_IF);
				State = 481; Match(K_NOT);
				State = 482; Match(K_EXISTS);
				}
				break;
			}
			State = 488;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				State = 485; database_name();
				State = 486; Match(DOT);
				}
				break;
			}
			State = 490; view_name();
			State = 491; Match(K_AS);
			State = 492; select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_virtual_table_stmtContext : ParserRuleContext {
		public ITerminalNode K_CREATE() { return GetToken(SqlParser.K_CREATE, 0); }
		public ITerminalNode K_VIRTUAL() { return GetToken(SqlParser.K_VIRTUAL, 0); }
		public ITerminalNode K_TABLE() { return GetToken(SqlParser.K_TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_USING() { return GetToken(SqlParser.K_USING, 0); }
		public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SqlParser.K_IF, 0); }
		public ITerminalNode K_NOT() { return GetToken(SqlParser.K_NOT, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SqlParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Module_argumentContext[] module_argument() {
			return GetRuleContexts<Module_argumentContext>();
		}
		public Module_argumentContext module_argument(int i) {
			return GetRuleContext<Module_argumentContext>(i);
		}
		public Create_virtual_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_virtual_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterCreate_virtual_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitCreate_virtual_table_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_virtual_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_virtual_table_stmtContext create_virtual_table_stmt() {
		Create_virtual_table_stmtContext _localctx = new Create_virtual_table_stmtContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_create_virtual_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494; Match(K_CREATE);
			State = 495; Match(K_VIRTUAL);
			State = 496; Match(K_TABLE);
			State = 500;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				State = 497; Match(K_IF);
				State = 498; Match(K_NOT);
				State = 499; Match(K_EXISTS);
				}
				break;
			}
			State = 505;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				State = 502; database_name();
				State = 503; Match(DOT);
				}
				break;
			}
			State = 507; table_name();
			State = 508; Match(K_USING);
			State = 509; module_name();
			State = 521;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 510; Match(OPEN_PAR);
				State = 511; module_argument();
				State = 516;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 512; Match(COMMA);
					State = 513; module_argument();
					}
					}
					State = 518;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 519; Match(CLOSE_PAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmtContext : ParserRuleContext {
		public ITerminalNode K_DELETE() { return GetToken(SqlParser.K_DELETE, 0); }
		public ITerminalNode K_FROM() { return GetToken(SqlParser.K_FROM, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode K_WHERE() { return GetToken(SqlParser.K_WHERE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Delete_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterDelete_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitDelete_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmtContext delete_stmt() {
		Delete_stmtContext _localctx = new Delete_stmtContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_delete_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 523; with_clause();
				}
			}

			State = 526; Match(K_DELETE);
			State = 527; Match(K_FROM);
			State = 528; qualified_table_name();
			State = 531;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 529; Match(K_WHERE);
				State = 530; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmt_limitedContext : ParserRuleContext {
		public ITerminalNode K_DELETE() { return GetToken(SqlParser.K_DELETE, 0); }
		public ITerminalNode K_FROM() { return GetToken(SqlParser.K_FROM, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode K_WHERE() { return GetToken(SqlParser.K_WHERE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SqlParser.K_LIMIT, 0); }
		public ITerminalNode K_ORDER() { return GetToken(SqlParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SqlParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_OFFSET() { return GetToken(SqlParser.K_OFFSET, 0); }
		public Delete_stmt_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt_limited; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterDelete_stmt_limited(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitDelete_stmt_limited(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_stmt_limited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmt_limitedContext delete_stmt_limited() {
		Delete_stmt_limitedContext _localctx = new Delete_stmt_limitedContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_delete_stmt_limited);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 533; with_clause();
				}
			}

			State = 536; Match(K_DELETE);
			State = 537; Match(K_FROM);
			State = 538; qualified_table_name();
			State = 541;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 539; Match(K_WHERE);
				State = 540; expr(0);
				}
			}

			State = 561;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_LIMIT || _la==K_ORDER) {
				{
				State = 553;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_ORDER) {
					{
					State = 543; Match(K_ORDER);
					State = 544; Match(K_BY);
					State = 545; ordering_term();
					State = 550;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 546; Match(COMMA);
						State = 547; ordering_term();
						}
						}
						State = 552;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 555; Match(K_LIMIT);
				State = 556; expr(0);
				State = 559;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 557;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 558; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Detach_stmtContext : ParserRuleContext {
		public ITerminalNode K_DETACH() { return GetToken(SqlParser.K_DETACH, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_DATABASE() { return GetToken(SqlParser.K_DATABASE, 0); }
		public Detach_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detach_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterDetach_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitDetach_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetach_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Detach_stmtContext detach_stmt() {
		Detach_stmtContext _localctx = new Detach_stmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_detach_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563; Match(K_DETACH);
			State = 565;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
			case 1:
				{
				State = 564; Match(K_DATABASE);
				}
				break;
			}
			State = 567; database_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_index_stmtContext : ParserRuleContext {
		public ITerminalNode K_DROP() { return GetToken(SqlParser.K_DROP, 0); }
		public ITerminalNode K_INDEX() { return GetToken(SqlParser.K_INDEX, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SqlParser.K_IF, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SqlParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Drop_index_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterDrop_index_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitDrop_index_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_index_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_index_stmtContext drop_index_stmt() {
		Drop_index_stmtContext _localctx = new Drop_index_stmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_drop_index_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569; Match(K_DROP);
			State = 570; Match(K_INDEX);
			State = 573;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 571; Match(K_IF);
				State = 572; Match(K_EXISTS);
				}
				break;
			}
			State = 578;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				State = 575; database_name();
				State = 576; Match(DOT);
				}
				break;
			}
			State = 580; index_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_table_stmtContext : ParserRuleContext {
		public ITerminalNode K_DROP() { return GetToken(SqlParser.K_DROP, 0); }
		public ITerminalNode K_TABLE() { return GetToken(SqlParser.K_TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SqlParser.K_IF, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SqlParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Drop_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterDrop_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitDrop_table_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_table_stmtContext drop_table_stmt() {
		Drop_table_stmtContext _localctx = new Drop_table_stmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_drop_table_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582; Match(K_DROP);
			State = 583; Match(K_TABLE);
			State = 586;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				State = 584; Match(K_IF);
				State = 585; Match(K_EXISTS);
				}
				break;
			}
			State = 591;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				State = 588; database_name();
				State = 589; Match(DOT);
				}
				break;
			}
			State = 593; table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_trigger_stmtContext : ParserRuleContext {
		public ITerminalNode K_DROP() { return GetToken(SqlParser.K_DROP, 0); }
		public ITerminalNode K_TRIGGER() { return GetToken(SqlParser.K_TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SqlParser.K_IF, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SqlParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Drop_trigger_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_trigger_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterDrop_trigger_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitDrop_trigger_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_trigger_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_trigger_stmtContext drop_trigger_stmt() {
		Drop_trigger_stmtContext _localctx = new Drop_trigger_stmtContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_drop_trigger_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595; Match(K_DROP);
			State = 596; Match(K_TRIGGER);
			State = 599;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 597; Match(K_IF);
				State = 598; Match(K_EXISTS);
				}
				break;
			}
			State = 604;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				State = 601; database_name();
				State = 602; Match(DOT);
				}
				break;
			}
			State = 606; trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_view_stmtContext : ParserRuleContext {
		public ITerminalNode K_DROP() { return GetToken(SqlParser.K_DROP, 0); }
		public ITerminalNode K_VIEW() { return GetToken(SqlParser.K_VIEW, 0); }
		public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SqlParser.K_IF, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SqlParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Drop_view_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterDrop_view_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitDrop_view_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_view_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_view_stmtContext drop_view_stmt() {
		Drop_view_stmtContext _localctx = new Drop_view_stmtContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_drop_view_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608; Match(K_DROP);
			State = 609; Match(K_VIEW);
			State = 612;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 610; Match(K_IF);
				State = 611; Match(K_EXISTS);
				}
				break;
			}
			State = 617;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 614; database_name();
				State = 615; Match(DOT);
				}
				break;
			}
			State = 619; view_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Factored_select_stmtContext : ParserRuleContext {
		public Select_coreContext[] select_core() {
			return GetRuleContexts<Select_coreContext>();
		}
		public Select_coreContext select_core(int i) {
			return GetRuleContext<Select_coreContext>(i);
		}
		public ITerminalNode K_WITH() { return GetToken(SqlParser.K_WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public Compound_operatorContext[] compound_operator() {
			return GetRuleContexts<Compound_operatorContext>();
		}
		public Compound_operatorContext compound_operator(int i) {
			return GetRuleContext<Compound_operatorContext>(i);
		}
		public ITerminalNode K_ORDER() { return GetToken(SqlParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SqlParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SqlParser.K_LIMIT, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(SqlParser.K_RECURSIVE, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(SqlParser.K_OFFSET, 0); }
		public Factored_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factored_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterFactored_select_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitFactored_select_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactored_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Factored_select_stmtContext factored_select_stmt() {
		Factored_select_stmtContext _localctx = new Factored_select_stmtContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_factored_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 621; Match(K_WITH);
				State = 623;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
				case 1:
					{
					State = 622; Match(K_RECURSIVE);
					}
					break;
				}
				State = 625; common_table_expression();
				State = 630;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 626; Match(COMMA);
					State = 627; common_table_expression();
					}
					}
					State = 632;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 635; select_core();
			State = 641;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==K_EXCEPT || _la==K_INTERSECT || _la==K_UNION) {
				{
				{
				State = 636; compound_operator();
				State = 637; select_core();
				}
				}
				State = 643;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 654;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ORDER) {
				{
				State = 644; Match(K_ORDER);
				State = 645; Match(K_BY);
				State = 646; ordering_term();
				State = 651;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 647; Match(COMMA);
					State = 648; ordering_term();
					}
					}
					State = 653;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 662;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_LIMIT) {
				{
				State = 656; Match(K_LIMIT);
				State = 657; expr(0);
				State = 660;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 658;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 659; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_stmtContext : ParserRuleContext {
		public ITerminalNode K_INTO() { return GetToken(SqlParser.K_INTO, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_INSERT() { return GetToken(SqlParser.K_INSERT, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SqlParser.K_REPLACE, 0); }
		public ITerminalNode K_OR() { return GetToken(SqlParser.K_OR, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SqlParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SqlParser.K_ABORT, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SqlParser.K_FAIL, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SqlParser.K_IGNORE, 0); }
		public ITerminalNode K_VALUES() { return GetToken(SqlParser.K_VALUES, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode K_DEFAULT() { return GetToken(SqlParser.K_DEFAULT, 0); }
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Insert_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterInsert_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitInsert_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_stmtContext insert_stmt() {
		Insert_stmtContext _localctx = new Insert_stmtContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_insert_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 664; with_clause();
				}
			}

			State = 684;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				State = 667; Match(K_INSERT);
				}
				break;

			case 2:
				{
				State = 668; Match(K_REPLACE);
				}
				break;

			case 3:
				{
				State = 669; Match(K_INSERT);
				State = 670; Match(K_OR);
				State = 671; Match(K_REPLACE);
				}
				break;

			case 4:
				{
				State = 672; Match(K_INSERT);
				State = 673; Match(K_OR);
				State = 674; Match(K_ROLLBACK);
				}
				break;

			case 5:
				{
				State = 675; Match(K_INSERT);
				State = 676; Match(K_OR);
				State = 677; Match(K_ABORT);
				}
				break;

			case 6:
				{
				State = 678; Match(K_INSERT);
				State = 679; Match(K_OR);
				State = 680; Match(K_FAIL);
				}
				break;

			case 7:
				{
				State = 681; Match(K_INSERT);
				State = 682; Match(K_OR);
				State = 683; Match(K_IGNORE);
				}
				break;
			}
			State = 686; Match(K_INTO);
			State = 690;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				State = 687; database_name();
				State = 688; Match(DOT);
				}
				break;
			}
			State = 692; table_name();
			State = 704;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 693; Match(OPEN_PAR);
				State = 694; column_name();
				State = 699;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 695; Match(COMMA);
					State = 696; column_name();
					}
					}
					State = 701;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 702; Match(CLOSE_PAR);
				}
			}

			State = 737;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				State = 706; Match(K_VALUES);
				State = 707; Match(OPEN_PAR);
				State = 708; expr(0);
				State = 713;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 709; Match(COMMA);
					State = 710; expr(0);
					}
					}
					State = 715;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 716; Match(CLOSE_PAR);
				State = 731;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 717; Match(COMMA);
					State = 718; Match(OPEN_PAR);
					State = 719; expr(0);
					State = 724;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 720; Match(COMMA);
						State = 721; expr(0);
						}
						}
						State = 726;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 727; Match(CLOSE_PAR);
					}
					}
					State = 733;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				{
				State = 734; select_stmt();
				}
				break;

			case 3:
				{
				State = 735; Match(K_DEFAULT);
				State = 736; Match(K_VALUES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_stmtContext : ParserRuleContext {
		public ITerminalNode K_PRAGMA() { return GetToken(SqlParser.K_PRAGMA, 0); }
		public Pragma_nameContext pragma_name() {
			return GetRuleContext<Pragma_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Pragma_valueContext pragma_value() {
			return GetRuleContext<Pragma_valueContext>(0);
		}
		public Pragma_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterPragma_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitPragma_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_stmtContext pragma_stmt() {
		Pragma_stmtContext _localctx = new Pragma_stmtContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_pragma_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739; Match(K_PRAGMA);
			State = 743;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				State = 740; database_name();
				State = 741; Match(DOT);
				}
				break;
			}
			State = 745; pragma_name();
			State = 752;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ASSIGN:
				{
				State = 746; Match(ASSIGN);
				State = 747; pragma_value();
				}
				break;
			case OPEN_PAR:
				{
				State = 748; Match(OPEN_PAR);
				State = 749; pragma_value();
				State = 750; Match(CLOSE_PAR);
				}
				break;
			case Eof:
			case SCOL:
			case K_ALTER:
			case K_ANALYZE:
			case K_ATTACH:
			case K_BEGIN:
			case K_COMMIT:
			case K_CREATE:
			case K_DELETE:
			case K_DETACH:
			case K_DROP:
			case K_END:
			case K_EXPLAIN:
			case K_INSERT:
			case K_PRAGMA:
			case K_REINDEX:
			case K_RELEASE:
			case K_REPLACE:
			case K_ROLLBACK:
			case K_SAVEPOINT:
			case K_SELECT:
			case K_UPDATE:
			case K_VACUUM:
			case K_VALUES:
			case K_WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_stmtContext : ParserRuleContext {
		public ITerminalNode K_REINDEX() { return GetToken(SqlParser.K_REINDEX, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Reindex_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterReindex_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitReindex_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReindex_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_stmtContext reindex_stmt() {
		Reindex_stmtContext _localctx = new Reindex_stmtContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_reindex_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754; Match(K_REINDEX);
			State = 765;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				State = 755; collation_name();
				}
				break;

			case 2:
				{
				State = 759;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
				case 1:
					{
					State = 756; database_name();
					State = 757; Match(DOT);
					}
					break;
				}
				State = 763;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					State = 761; table_name();
					}
					break;

				case 2:
					{
					State = 762; index_name();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Release_stmtContext : ParserRuleContext {
		public ITerminalNode K_RELEASE() { return GetToken(SqlParser.K_RELEASE, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public ITerminalNode K_SAVEPOINT() { return GetToken(SqlParser.K_SAVEPOINT, 0); }
		public Release_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_release_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterRelease_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitRelease_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelease_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Release_stmtContext release_stmt() {
		Release_stmtContext _localctx = new Release_stmtContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_release_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767; Match(K_RELEASE);
			State = 769;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				State = 768; Match(K_SAVEPOINT);
				}
				break;
			}
			State = 771; savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollback_stmtContext : ParserRuleContext {
		public ITerminalNode K_ROLLBACK() { return GetToken(SqlParser.K_ROLLBACK, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SqlParser.K_TRANSACTION, 0); }
		public ITerminalNode K_TO() { return GetToken(SqlParser.K_TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public ITerminalNode K_SAVEPOINT() { return GetToken(SqlParser.K_SAVEPOINT, 0); }
		public Rollback_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollback_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterRollback_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitRollback_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollback_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollback_stmtContext rollback_stmt() {
		Rollback_stmtContext _localctx = new Rollback_stmtContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_rollback_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773; Match(K_ROLLBACK);
			State = 778;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_TRANSACTION) {
				{
				State = 774; Match(K_TRANSACTION);
				State = 776;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
				case 1:
					{
					State = 775; transaction_name();
					}
					break;
				}
				}
			}

			State = 785;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_TO) {
				{
				State = 780; Match(K_TO);
				State = 782;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,101,_ctx) ) {
				case 1:
					{
					State = 781; Match(K_SAVEPOINT);
					}
					break;
				}
				State = 784; savepoint_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_stmtContext : ParserRuleContext {
		public ITerminalNode K_SAVEPOINT() { return GetToken(SqlParser.K_SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public Savepoint_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSavepoint_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSavepoint_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_stmtContext savepoint_stmt() {
		Savepoint_stmtContext _localctx = new Savepoint_stmtContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_savepoint_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787; Match(K_SAVEPOINT);
			State = 788; savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_select_stmtContext : ParserRuleContext {
		public Select_coreContext select_core() {
			return GetRuleContext<Select_coreContext>(0);
		}
		public ITerminalNode K_WITH() { return GetToken(SqlParser.K_WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public ITerminalNode K_ORDER() { return GetToken(SqlParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SqlParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SqlParser.K_LIMIT, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(SqlParser.K_RECURSIVE, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(SqlParser.K_OFFSET, 0); }
		public Simple_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSimple_select_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSimple_select_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_select_stmtContext simple_select_stmt() {
		Simple_select_stmtContext _localctx = new Simple_select_stmtContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_simple_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 802;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 790; Match(K_WITH);
				State = 792;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,103,_ctx) ) {
				case 1:
					{
					State = 791; Match(K_RECURSIVE);
					}
					break;
				}
				State = 794; common_table_expression();
				State = 799;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 795; Match(COMMA);
					State = 796; common_table_expression();
					}
					}
					State = 801;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 804; select_core();
			State = 815;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ORDER) {
				{
				State = 805; Match(K_ORDER);
				State = 806; Match(K_BY);
				State = 807; ordering_term();
				State = 812;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 808; Match(COMMA);
					State = 809; ordering_term();
					}
					}
					State = 814;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 823;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_LIMIT) {
				{
				State = 817; Match(K_LIMIT);
				State = 818; expr(0);
				State = 821;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 819;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 820; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_stmtContext : ParserRuleContext {
		public Select_or_valuesContext[] select_or_values() {
			return GetRuleContexts<Select_or_valuesContext>();
		}
		public Select_or_valuesContext select_or_values(int i) {
			return GetRuleContext<Select_or_valuesContext>(i);
		}
		public ITerminalNode K_WITH() { return GetToken(SqlParser.K_WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public Compound_operatorContext[] compound_operator() {
			return GetRuleContexts<Compound_operatorContext>();
		}
		public Compound_operatorContext compound_operator(int i) {
			return GetRuleContext<Compound_operatorContext>(i);
		}
		public ITerminalNode K_ORDER() { return GetToken(SqlParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SqlParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SqlParser.K_LIMIT, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(SqlParser.K_RECURSIVE, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(SqlParser.K_OFFSET, 0); }
		public Select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSelect_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSelect_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_stmtContext select_stmt() {
		Select_stmtContext _localctx = new Select_stmtContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 825; Match(K_WITH);
				State = 827;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,110,_ctx) ) {
				case 1:
					{
					State = 826; Match(K_RECURSIVE);
					}
					break;
				}
				State = 829; common_table_expression();
				State = 834;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 830; Match(COMMA);
					State = 831; common_table_expression();
					}
					}
					State = 836;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 839; select_or_values();
			State = 845;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==K_EXCEPT || _la==K_INTERSECT || _la==K_UNION) {
				{
				{
				State = 840; compound_operator();
				State = 841; select_or_values();
				}
				}
				State = 847;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 858;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ORDER) {
				{
				State = 848; Match(K_ORDER);
				State = 849; Match(K_BY);
				State = 850; ordering_term();
				State = 855;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 851; Match(COMMA);
					State = 852; ordering_term();
					}
					}
					State = 857;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 866;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_LIMIT) {
				{
				State = 860; Match(K_LIMIT);
				State = 861; expr(0);
				State = 864;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 862;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 863; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_or_valuesContext : ParserRuleContext {
		public ITerminalNode K_SELECT() { return GetToken(SqlParser.K_SELECT, 0); }
		public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		public ITerminalNode K_FROM() { return GetToken(SqlParser.K_FROM, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SqlParser.K_WHERE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_GROUP() { return GetToken(SqlParser.K_GROUP, 0); }
		public ITerminalNode K_BY() { return GetToken(SqlParser.K_BY, 0); }
		public ITerminalNode K_DISTINCT() { return GetToken(SqlParser.K_DISTINCT, 0); }
		public ITerminalNode K_ALL() { return GetToken(SqlParser.K_ALL, 0); }
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public ITerminalNode K_HAVING() { return GetToken(SqlParser.K_HAVING, 0); }
		public ITerminalNode K_VALUES() { return GetToken(SqlParser.K_VALUES, 0); }
		public Select_or_valuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_or_values; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSelect_or_values(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSelect_or_values(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_or_values(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_or_valuesContext select_or_values() {
		Select_or_valuesContext _localctx = new Select_or_valuesContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_select_or_values);
		int _la;
		try {
			State = 942;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 868; Match(K_SELECT);
				State = 870;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
				case 1:
					{
					State = 869;
					_la = _input.La(1);
					if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 872; result_column();
				State = 877;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 873; Match(COMMA);
					State = 874; result_column();
					}
					}
					State = 879;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 892;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_FROM) {
					{
					State = 880; Match(K_FROM);
					State = 890;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
					case 1:
						{
						State = 881; table_or_subquery();
						State = 886;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==COMMA) {
							{
							{
							State = 882; Match(COMMA);
							State = 883; table_or_subquery();
							}
							}
							State = 888;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						}
						break;

					case 2:
						{
						State = 889; join_clause();
						}
						break;
					}
					}
				}

				State = 896;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_WHERE) {
					{
					State = 894; Match(K_WHERE);
					State = 895; expr(0);
					}
				}

				State = 912;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_GROUP) {
					{
					State = 898; Match(K_GROUP);
					State = 899; Match(K_BY);
					State = 900; expr(0);
					State = 905;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 901; Match(COMMA);
						State = 902; expr(0);
						}
						}
						State = 907;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 910;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==K_HAVING) {
						{
						State = 908; Match(K_HAVING);
						State = 909; expr(0);
						}
					}

					}
				}

				}
				break;
			case K_VALUES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 914; Match(K_VALUES);
				State = 915; Match(OPEN_PAR);
				State = 916; expr(0);
				State = 921;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 917; Match(COMMA);
					State = 918; expr(0);
					}
					}
					State = 923;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 924; Match(CLOSE_PAR);
				State = 939;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 925; Match(COMMA);
					State = 926; Match(OPEN_PAR);
					State = 927; expr(0);
					State = 932;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 928; Match(COMMA);
						State = 929; expr(0);
						}
						}
						State = 934;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 935; Match(CLOSE_PAR);
					}
					}
					State = 941;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmtContext : ParserRuleContext {
		public ITerminalNode K_UPDATE() { return GetToken(SqlParser.K_UPDATE, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public ITerminalNode K_SET() { return GetToken(SqlParser.K_SET, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode K_OR() { return GetToken(SqlParser.K_OR, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SqlParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SqlParser.K_ABORT, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SqlParser.K_REPLACE, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SqlParser.K_FAIL, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SqlParser.K_IGNORE, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SqlParser.K_WHERE, 0); }
		public Update_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmtContext update_stmt() {
		Update_stmtContext _localctx = new Update_stmtContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_update_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 945;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 944; with_clause();
				}
			}

			State = 947; Match(K_UPDATE);
			State = 958;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,132,_ctx) ) {
			case 1:
				{
				State = 948; Match(K_OR);
				State = 949; Match(K_ROLLBACK);
				}
				break;

			case 2:
				{
				State = 950; Match(K_OR);
				State = 951; Match(K_ABORT);
				}
				break;

			case 3:
				{
				State = 952; Match(K_OR);
				State = 953; Match(K_REPLACE);
				}
				break;

			case 4:
				{
				State = 954; Match(K_OR);
				State = 955; Match(K_FAIL);
				}
				break;

			case 5:
				{
				State = 956; Match(K_OR);
				State = 957; Match(K_IGNORE);
				}
				break;
			}
			State = 960; qualified_table_name();
			State = 961; Match(K_SET);
			State = 962; column_name();
			State = 963; Match(ASSIGN);
			State = 964; expr(0);
			State = 972;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 965; Match(COMMA);
				State = 966; column_name();
				State = 967; Match(ASSIGN);
				State = 968; expr(0);
				}
				}
				State = 974;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 977;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 975; Match(K_WHERE);
				State = 976; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmt_limitedContext : ParserRuleContext {
		public ITerminalNode K_UPDATE() { return GetToken(SqlParser.K_UPDATE, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public ITerminalNode K_SET() { return GetToken(SqlParser.K_SET, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode K_OR() { return GetToken(SqlParser.K_OR, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SqlParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SqlParser.K_ABORT, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SqlParser.K_REPLACE, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SqlParser.K_FAIL, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SqlParser.K_IGNORE, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SqlParser.K_WHERE, 0); }
		public ITerminalNode K_LIMIT() { return GetToken(SqlParser.K_LIMIT, 0); }
		public ITerminalNode K_ORDER() { return GetToken(SqlParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SqlParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_OFFSET() { return GetToken(SqlParser.K_OFFSET, 0); }
		public Update_stmt_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt_limited; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt_limited(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt_limited(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_stmt_limited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmt_limitedContext update_stmt_limited() {
		Update_stmt_limitedContext _localctx = new Update_stmt_limitedContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_update_stmt_limited);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 980;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 979; with_clause();
				}
			}

			State = 982; Match(K_UPDATE);
			State = 993;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
			case 1:
				{
				State = 983; Match(K_OR);
				State = 984; Match(K_ROLLBACK);
				}
				break;

			case 2:
				{
				State = 985; Match(K_OR);
				State = 986; Match(K_ABORT);
				}
				break;

			case 3:
				{
				State = 987; Match(K_OR);
				State = 988; Match(K_REPLACE);
				}
				break;

			case 4:
				{
				State = 989; Match(K_OR);
				State = 990; Match(K_FAIL);
				}
				break;

			case 5:
				{
				State = 991; Match(K_OR);
				State = 992; Match(K_IGNORE);
				}
				break;
			}
			State = 995; qualified_table_name();
			State = 996; Match(K_SET);
			State = 997; column_name();
			State = 998; Match(ASSIGN);
			State = 999; expr(0);
			State = 1007;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1000; Match(COMMA);
				State = 1001; column_name();
				State = 1002; Match(ASSIGN);
				State = 1003; expr(0);
				}
				}
				State = 1009;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1012;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 1010; Match(K_WHERE);
				State = 1011; expr(0);
				}
			}

			State = 1032;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_LIMIT || _la==K_ORDER) {
				{
				State = 1024;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_ORDER) {
					{
					State = 1014; Match(K_ORDER);
					State = 1015; Match(K_BY);
					State = 1016; ordering_term();
					State = 1021;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1017; Match(COMMA);
						State = 1018; ordering_term();
						}
						}
						State = 1023;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 1026; Match(K_LIMIT);
				State = 1027; expr(0);
				State = 1030;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 1028;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 1029; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vacuum_stmtContext : ParserRuleContext {
		public ITerminalNode K_VACUUM() { return GetToken(SqlParser.K_VACUUM, 0); }
		public Vacuum_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuum_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterVacuum_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitVacuum_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVacuum_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vacuum_stmtContext vacuum_stmt() {
		Vacuum_stmtContext _localctx = new Vacuum_stmtContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_vacuum_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1034; Match(K_VACUUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_defContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Column_constraintContext[] column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		public Column_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterColumn_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitColumn_def(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_defContext column_def() {
		Column_defContext _localctx = new Column_defContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_column_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1036; column_name();
			State = 1038;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,143,_ctx) ) {
			case 1:
				{
				State = 1037; type_name();
				}
				break;
			}
			State = 1043;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CHECK) | (1L << K_COLLATE) | (1L << K_CONSTRAINT) | (1L << K_DEFAULT))) != 0) || ((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & ((1L << (K_NOT - 102)) | (1L << (K_NULL - 102)) | (1L << (K_PRIMARY - 102)) | (1L << (K_REFERENCES - 102)) | (1L << (K_UNIQUE - 102)))) != 0)) {
				{
				{
				State = 1040; column_constraint();
				}
				}
				State = 1045;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public Signed_numberContext[] signed_number() {
			return GetRuleContexts<Signed_numberContext>();
		}
		public Signed_numberContext signed_number(int i) {
			return GetRuleContext<Signed_numberContext>(i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_type_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1047;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1046; name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1049;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,145,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1061;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				State = 1051; Match(OPEN_PAR);
				State = 1052; signed_number();
				State = 1053; Match(CLOSE_PAR);
				}
				break;

			case 2:
				{
				State = 1055; Match(OPEN_PAR);
				State = 1056; signed_number();
				State = 1057; Match(COMMA);
				State = 1058; signed_number();
				State = 1059; Match(CLOSE_PAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		public ITerminalNode K_PRIMARY() { return GetToken(SqlParser.K_PRIMARY, 0); }
		public ITerminalNode K_KEY() { return GetToken(SqlParser.K_KEY, 0); }
		public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		public ITerminalNode K_NULL() { return GetToken(SqlParser.K_NULL, 0); }
		public ITerminalNode K_UNIQUE() { return GetToken(SqlParser.K_UNIQUE, 0); }
		public ITerminalNode K_CHECK() { return GetToken(SqlParser.K_CHECK, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_DEFAULT() { return GetToken(SqlParser.K_DEFAULT, 0); }
		public ITerminalNode K_COLLATE() { return GetToken(SqlParser.K_COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public ITerminalNode K_CONSTRAINT() { return GetToken(SqlParser.K_CONSTRAINT, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public ITerminalNode K_AUTOINCREMENT() { return GetToken(SqlParser.K_AUTOINCREMENT, 0); }
		public ITerminalNode K_NOT() { return GetToken(SqlParser.K_NOT, 0); }
		public ITerminalNode K_ASC() { return GetToken(SqlParser.K_ASC, 0); }
		public ITerminalNode K_DESC() { return GetToken(SqlParser.K_DESC, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_column_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1065;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_CONSTRAINT) {
				{
				State = 1063; Match(K_CONSTRAINT);
				State = 1064; name();
				}
			}

			State = 1100;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_PRIMARY:
				{
				State = 1067; Match(K_PRIMARY);
				State = 1068; Match(K_KEY);
				State = 1070;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_ASC || _la==K_DESC) {
					{
					State = 1069;
					_la = _input.La(1);
					if ( !(_la==K_ASC || _la==K_DESC) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 1072; conflict_clause();
				State = 1074;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_AUTOINCREMENT) {
					{
					State = 1073; Match(K_AUTOINCREMENT);
					}
				}

				}
				break;
			case K_NOT:
			case K_NULL:
				{
				State = 1077;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_NOT) {
					{
					State = 1076; Match(K_NOT);
					}
				}

				State = 1079; Match(K_NULL);
				State = 1080; conflict_clause();
				}
				break;
			case K_UNIQUE:
				{
				State = 1081; Match(K_UNIQUE);
				State = 1082; conflict_clause();
				}
				break;
			case K_CHECK:
				{
				State = 1083; Match(K_CHECK);
				State = 1084; Match(OPEN_PAR);
				State = 1085; expr(0);
				State = 1086; Match(CLOSE_PAR);
				}
				break;
			case K_DEFAULT:
				{
				State = 1088; Match(K_DEFAULT);
				State = 1095;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,151,_ctx) ) {
				case 1:
					{
					State = 1089; signed_number();
					}
					break;

				case 2:
					{
					State = 1090; literal_value();
					}
					break;

				case 3:
					{
					State = 1091; Match(OPEN_PAR);
					State = 1092; expr(0);
					State = 1093; Match(CLOSE_PAR);
					}
					break;
				}
				}
				break;
			case K_COLLATE:
				{
				State = 1097; Match(K_COLLATE);
				State = 1098; collation_name();
				}
				break;
			case K_REFERENCES:
				{
				State = 1099; foreign_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conflict_clauseContext : ParserRuleContext {
		public ITerminalNode K_ON() { return GetToken(SqlParser.K_ON, 0); }
		public ITerminalNode K_CONFLICT() { return GetToken(SqlParser.K_CONFLICT, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SqlParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SqlParser.K_ABORT, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SqlParser.K_FAIL, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SqlParser.K_IGNORE, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SqlParser.K_REPLACE, 0); }
		public Conflict_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conflict_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterConflict_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitConflict_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConflict_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conflict_clauseContext conflict_clause() {
		Conflict_clauseContext _localctx = new Conflict_clauseContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_conflict_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ON) {
				{
				State = 1102; Match(K_ON);
				State = 1103; Match(K_CONFLICT);
				State = 1104;
				_la = _input.La(1);
				if ( !(_la==K_ABORT || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (K_FAIL - 72)) | (1L << (K_IGNORE - 72)) | (1L << (K_REPLACE - 72)) | (1L << (K_ROLLBACK - 72)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public ITerminalNode BIND_PARAMETER() { return GetToken(SqlParser.BIND_PARAMETER, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_IS() { return GetToken(SqlParser.K_IS, 0); }
		public ITerminalNode K_NOT() { return GetToken(SqlParser.K_NOT, 0); }
		public ITerminalNode K_IN() { return GetToken(SqlParser.K_IN, 0); }
		public ITerminalNode K_LIKE() { return GetToken(SqlParser.K_LIKE, 0); }
		public ITerminalNode K_GLOB() { return GetToken(SqlParser.K_GLOB, 0); }
		public ITerminalNode K_MATCH() { return GetToken(SqlParser.K_MATCH, 0); }
		public ITerminalNode K_REGEXP() { return GetToken(SqlParser.K_REGEXP, 0); }
		public ITerminalNode K_AND() { return GetToken(SqlParser.K_AND, 0); }
		public ITerminalNode K_OR() { return GetToken(SqlParser.K_OR, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode K_DISTINCT() { return GetToken(SqlParser.K_DISTINCT, 0); }
		public ITerminalNode K_CAST() { return GetToken(SqlParser.K_CAST, 0); }
		public ITerminalNode K_AS() { return GetToken(SqlParser.K_AS, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode K_COLLATE() { return GetToken(SqlParser.K_COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_ESCAPE() { return GetToken(SqlParser.K_ESCAPE, 0); }
		public ITerminalNode K_ISNULL() { return GetToken(SqlParser.K_ISNULL, 0); }
		public ITerminalNode K_NOTNULL() { return GetToken(SqlParser.K_NOTNULL, 0); }
		public ITerminalNode K_NULL() { return GetToken(SqlParser.K_NULL, 0); }
		public ITerminalNode K_BETWEEN() { return GetToken(SqlParser.K_BETWEEN, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode K_EXISTS() { return GetToken(SqlParser.K_EXISTS, 0); }
		public ITerminalNode K_CASE() { return GetToken(SqlParser.K_CASE, 0); }
		public ITerminalNode K_END() { return GetToken(SqlParser.K_END, 0); }
		public ITerminalNode[] K_WHEN() { return GetTokens(SqlParser.K_WHEN); }
		public ITerminalNode K_WHEN(int i) {
			return GetToken(SqlParser.K_WHEN, i);
		}
		public ITerminalNode[] K_THEN() { return GetTokens(SqlParser.K_THEN); }
		public ITerminalNode K_THEN(int i) {
			return GetToken(SqlParser.K_THEN, i);
		}
		public ITerminalNode K_ELSE() { return GetToken(SqlParser.K_ELSE, 0); }
		public Raise_functionContext raise_function() {
			return GetRuleContext<Raise_functionContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1183;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,164,_ctx) ) {
			case 1:
				{
				State = 1108; literal_value();
				}
				break;

			case 2:
				{
				State = 1109; Match(BIND_PARAMETER);
				}
				break;

			case 3:
				{
				State = 1118;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
				case 1:
					{
					State = 1113;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,154,_ctx) ) {
					case 1:
						{
						State = 1110; database_name();
						State = 1111; Match(DOT);
						}
						break;
					}
					State = 1115; table_name();
					State = 1116; Match(DOT);
					}
					break;
				}
				State = 1120; column_name();
				}
				break;

			case 4:
				{
				State = 1121; unary_operator();
				State = 1122; expr(21);
				}
				break;

			case 5:
				{
				State = 1124; function_name();
				State = 1125; Match(OPEN_PAR);
				State = 1138;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case OPEN_PAR:
				case PLUS:
				case MINUS:
				case TILDE:
				case K_ABORT:
				case K_ACTION:
				case K_ADD:
				case K_AFTER:
				case K_ALL:
				case K_ALTER:
				case K_ANALYZE:
				case K_AND:
				case K_AS:
				case K_ASC:
				case K_ATTACH:
				case K_AUTOINCREMENT:
				case K_BEFORE:
				case K_BEGIN:
				case K_BETWEEN:
				case K_BY:
				case K_CASCADE:
				case K_CASE:
				case K_CAST:
				case K_CHECK:
				case K_COLLATE:
				case K_COLUMN:
				case K_COMMIT:
				case K_CONFLICT:
				case K_CONSTRAINT:
				case K_CREATE:
				case K_CROSS:
				case K_CURRENT_DATE:
				case K_CURRENT_TIME:
				case K_CURRENT_TIMESTAMP:
				case K_DATABASE:
				case K_DEFAULT:
				case K_DEFERRABLE:
				case K_DEFERRED:
				case K_DELETE:
				case K_DESC:
				case K_DETACH:
				case K_DISTINCT:
				case K_DROP:
				case K_EACH:
				case K_ELSE:
				case K_END:
				case K_ESCAPE:
				case K_EXCEPT:
				case K_EXCLUSIVE:
				case K_EXISTS:
				case K_EXPLAIN:
				case K_FAIL:
				case K_FOR:
				case K_FOREIGN:
				case K_FROM:
				case K_FULL:
				case K_GLOB:
				case K_GROUP:
				case K_HAVING:
				case K_IF:
				case K_IGNORE:
				case K_IMMEDIATE:
				case K_IN:
				case K_INDEX:
				case K_INDEXED:
				case K_INITIALLY:
				case K_INNER:
				case K_INSERT:
				case K_INSTEAD:
				case K_INTERSECT:
				case K_INTO:
				case K_IS:
				case K_ISNULL:
				case K_JOIN:
				case K_KEY:
				case K_LEFT:
				case K_LIKE:
				case K_LIMIT:
				case K_MATCH:
				case K_NATURAL:
				case K_NO:
				case K_NOT:
				case K_NOTNULL:
				case K_NULL:
				case K_OF:
				case K_OFFSET:
				case K_ON:
				case K_OR:
				case K_ORDER:
				case K_OUTER:
				case K_PLAN:
				case K_PRAGMA:
				case K_PRIMARY:
				case K_QUERY:
				case K_RAISE:
				case K_RECURSIVE:
				case K_REFERENCES:
				case K_REGEXP:
				case K_REINDEX:
				case K_RELEASE:
				case K_RENAME:
				case K_REPLACE:
				case K_RESTRICT:
				case K_RIGHT:
				case K_ROLLBACK:
				case K_ROW:
				case K_SAVEPOINT:
				case K_SELECT:
				case K_SET:
				case K_TABLE:
				case K_TEMP:
				case K_TEMPORARY:
				case K_THEN:
				case K_TO:
				case K_TRANSACTION:
				case K_TRIGGER:
				case K_UNION:
				case K_UNIQUE:
				case K_UPDATE:
				case K_USING:
				case K_VACUUM:
				case K_VALUES:
				case K_VIEW:
				case K_VIRTUAL:
				case K_WHEN:
				case K_WHERE:
				case K_WITH:
				case K_WITHOUT:
				case IDENTIFIER:
				case NUMERIC_LITERAL:
				case BIND_PARAMETER:
				case STRING_LITERAL:
				case BLOB_LITERAL:
					{
					State = 1127;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
					case 1:
						{
						State = 1126; Match(K_DISTINCT);
						}
						break;
					}
					State = 1129; expr(0);
					State = 1134;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1130; Match(COMMA);
						State = 1131; expr(0);
						}
						}
						State = 1136;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				case STAR:
					{
					State = 1137; Match(STAR);
					}
					break;
				case CLOSE_PAR:
					break;
				default:
					break;
				}
				State = 1140; Match(CLOSE_PAR);
				}
				break;

			case 6:
				{
				State = 1142; Match(OPEN_PAR);
				State = 1143; expr(0);
				State = 1144; Match(CLOSE_PAR);
				}
				break;

			case 7:
				{
				State = 1146; Match(K_CAST);
				State = 1147; Match(OPEN_PAR);
				State = 1148; expr(0);
				State = 1149; Match(K_AS);
				State = 1150; type_name();
				State = 1151; Match(CLOSE_PAR);
				}
				break;

			case 8:
				{
				State = 1157;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_EXISTS || _la==K_NOT) {
					{
					State = 1154;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==K_NOT) {
						{
						State = 1153; Match(K_NOT);
						}
					}

					State = 1156; Match(K_EXISTS);
					}
				}

				State = 1159; Match(OPEN_PAR);
				State = 1160; select_stmt();
				State = 1161; Match(CLOSE_PAR);
				}
				break;

			case 9:
				{
				State = 1163; Match(K_CASE);
				State = 1165;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,161,_ctx) ) {
				case 1:
					{
					State = 1164; expr(0);
					}
					break;
				}
				State = 1172;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1167; Match(K_WHEN);
					State = 1168; expr(0);
					State = 1169; Match(K_THEN);
					State = 1170; expr(0);
					}
					}
					State = 1174;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==K_WHEN );
				State = 1178;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_ELSE) {
					{
					State = 1176; Match(K_ELSE);
					State = 1177; expr(0);
					}
				}

				State = 1180; Match(K_END);
				}
				break;

			case 10:
				{
				State = 1182; raise_function();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 1285;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,177,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1283;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1185;
						if (!(Precpred(_ctx, 20))) throw new FailedPredicateException(this, "Precpred(_ctx, 20)");
						State = 1186; Match(PIPE2);
						State = 1187; expr(21);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1188;
						if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
						State = 1189;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << DIV) | (1L << MOD))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 1190; expr(20);
						}
						break;

					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1191;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 1192;
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 1193; expr(19);
						}
						break;

					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1194;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 1195;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT2) | (1L << GT2) | (1L << AMP) | (1L << PIPE))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 1196; expr(18);
						}
						break;

					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1197;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 1198;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LT_EQ) | (1L << GT) | (1L << GT_EQ))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 1199; expr(17);
						}
						break;

					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1200;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 1213;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
						case 1:
							{
							State = 1201; Match(ASSIGN);
							}
							break;

						case 2:
							{
							State = 1202; Match(EQ);
							}
							break;

						case 3:
							{
							State = 1203; Match(NOT_EQ1);
							}
							break;

						case 4:
							{
							State = 1204; Match(NOT_EQ2);
							}
							break;

						case 5:
							{
							State = 1205; Match(K_IS);
							}
							break;

						case 6:
							{
							State = 1206; Match(K_IS);
							State = 1207; Match(K_NOT);
							}
							break;

						case 7:
							{
							State = 1208; Match(K_IN);
							}
							break;

						case 8:
							{
							State = 1209; Match(K_LIKE);
							}
							break;

						case 9:
							{
							State = 1210; Match(K_GLOB);
							}
							break;

						case 10:
							{
							State = 1211; Match(K_MATCH);
							}
							break;

						case 11:
							{
							State = 1212; Match(K_REGEXP);
							}
							break;
						}
						State = 1215; expr(16);
						}
						break;

					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1216;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 1217; Match(K_AND);
						State = 1218; expr(15);
						}
						break;

					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1219;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 1220; Match(K_OR);
						State = 1221; expr(14);
						}
						break;

					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1222;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 1223; Match(K_IS);
						State = 1225;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
						case 1:
							{
							State = 1224; Match(K_NOT);
							}
							break;
						}
						State = 1227; expr(7);
						}
						break;

					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1228;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 1230;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==K_NOT) {
							{
							State = 1229; Match(K_NOT);
							}
						}

						State = 1232; Match(K_BETWEEN);
						State = 1233; expr(0);
						State = 1234; Match(K_AND);
						State = 1235; expr(6);
						}
						break;

					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1237;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 1238; Match(K_COLLATE);
						State = 1239; collation_name();
						}
						break;

					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1240;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 1242;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==K_NOT) {
							{
							State = 1241; Match(K_NOT);
							}
						}

						State = 1244;
						_la = _input.La(1);
						if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (K_GLOB - 77)) | (1L << (K_LIKE - 77)) | (1L << (K_MATCH - 77)) | (1L << (K_REGEXP - 77)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 1245; expr(0);
						State = 1248;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
						case 1:
							{
							State = 1246; Match(K_ESCAPE);
							State = 1247; expr(0);
							}
							break;
						}
						}
						break;

					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1250;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 1255;
						_errHandler.Sync(this);
						switch (_input.La(1)) {
						case K_ISNULL:
							{
							State = 1251; Match(K_ISNULL);
							}
							break;
						case K_NOTNULL:
							{
							State = 1252; Match(K_NOTNULL);
							}
							break;
						case K_NOT:
							{
							State = 1253; Match(K_NOT);
							State = 1254; Match(K_NULL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;

					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1257;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 1259;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==K_NOT) {
							{
							State = 1258; Match(K_NOT);
							}
						}

						State = 1261; Match(K_IN);
						State = 1281;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,175,_ctx) ) {
						case 1:
							{
							State = 1262; Match(OPEN_PAR);
							State = 1272;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,173,_ctx) ) {
							case 1:
								{
								State = 1263; select_stmt();
								}
								break;

							case 2:
								{
								State = 1264; expr(0);
								State = 1269;
								_errHandler.Sync(this);
								_la = _input.La(1);
								while (_la==COMMA) {
									{
									{
									State = 1265; Match(COMMA);
									State = 1266; expr(0);
									}
									}
									State = 1271;
									_errHandler.Sync(this);
									_la = _input.La(1);
								}
								}
								break;
							}
							State = 1274; Match(CLOSE_PAR);
							}
							break;

						case 2:
							{
							State = 1278;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
							case 1:
								{
								State = 1275; database_name();
								State = 1276; Match(DOT);
								}
								break;
							}
							State = 1280; table_name();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1287;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,177,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Foreign_key_clauseContext : ParserRuleContext {
		public ITerminalNode K_REFERENCES() { return GetToken(SqlParser.K_REFERENCES, 0); }
		public Foreign_tableContext foreign_table() {
			return GetRuleContext<Foreign_tableContext>(0);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode K_DEFERRABLE() { return GetToken(SqlParser.K_DEFERRABLE, 0); }
		public ITerminalNode[] K_ON() { return GetTokens(SqlParser.K_ON); }
		public ITerminalNode K_ON(int i) {
			return GetToken(SqlParser.K_ON, i);
		}
		public ITerminalNode[] K_MATCH() { return GetTokens(SqlParser.K_MATCH); }
		public ITerminalNode K_MATCH(int i) {
			return GetToken(SqlParser.K_MATCH, i);
		}
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public ITerminalNode[] K_DELETE() { return GetTokens(SqlParser.K_DELETE); }
		public ITerminalNode K_DELETE(int i) {
			return GetToken(SqlParser.K_DELETE, i);
		}
		public ITerminalNode[] K_UPDATE() { return GetTokens(SqlParser.K_UPDATE); }
		public ITerminalNode K_UPDATE(int i) {
			return GetToken(SqlParser.K_UPDATE, i);
		}
		public ITerminalNode K_NOT() { return GetToken(SqlParser.K_NOT, 0); }
		public ITerminalNode K_INITIALLY() { return GetToken(SqlParser.K_INITIALLY, 0); }
		public ITerminalNode K_DEFERRED() { return GetToken(SqlParser.K_DEFERRED, 0); }
		public ITerminalNode K_IMMEDIATE() { return GetToken(SqlParser.K_IMMEDIATE, 0); }
		public ITerminalNode[] K_SET() { return GetTokens(SqlParser.K_SET); }
		public ITerminalNode K_SET(int i) {
			return GetToken(SqlParser.K_SET, i);
		}
		public ITerminalNode[] K_NULL() { return GetTokens(SqlParser.K_NULL); }
		public ITerminalNode K_NULL(int i) {
			return GetToken(SqlParser.K_NULL, i);
		}
		public ITerminalNode[] K_DEFAULT() { return GetTokens(SqlParser.K_DEFAULT); }
		public ITerminalNode K_DEFAULT(int i) {
			return GetToken(SqlParser.K_DEFAULT, i);
		}
		public ITerminalNode[] K_CASCADE() { return GetTokens(SqlParser.K_CASCADE); }
		public ITerminalNode K_CASCADE(int i) {
			return GetToken(SqlParser.K_CASCADE, i);
		}
		public ITerminalNode[] K_RESTRICT() { return GetTokens(SqlParser.K_RESTRICT); }
		public ITerminalNode K_RESTRICT(int i) {
			return GetToken(SqlParser.K_RESTRICT, i);
		}
		public ITerminalNode[] K_NO() { return GetTokens(SqlParser.K_NO); }
		public ITerminalNode K_NO(int i) {
			return GetToken(SqlParser.K_NO, i);
		}
		public ITerminalNode[] K_ACTION() { return GetTokens(SqlParser.K_ACTION); }
		public ITerminalNode K_ACTION(int i) {
			return GetToken(SqlParser.K_ACTION, i);
		}
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_key_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterForeign_key_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitForeign_key_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_key_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_key_clauseContext foreign_key_clause() {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_foreign_key_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1288; Match(K_REFERENCES);
			State = 1289; foreign_table();
			State = 1301;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 1290; Match(OPEN_PAR);
				State = 1291; column_name();
				State = 1296;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1292; Match(COMMA);
					State = 1293; column_name();
					}
					}
					State = 1298;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1299; Match(CLOSE_PAR);
				}
			}

			State = 1321;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==K_MATCH || _la==K_ON) {
				{
				{
				State = 1317;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case K_ON:
					{
					State = 1303; Match(K_ON);
					State = 1304;
					_la = _input.La(1);
					if ( !(_la==K_DELETE || _la==K_UPDATE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 1313;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,180,_ctx) ) {
					case 1:
						{
						State = 1305; Match(K_SET);
						State = 1306; Match(K_NULL);
						}
						break;

					case 2:
						{
						State = 1307; Match(K_SET);
						State = 1308; Match(K_DEFAULT);
						}
						break;

					case 3:
						{
						State = 1309; Match(K_CASCADE);
						}
						break;

					case 4:
						{
						State = 1310; Match(K_RESTRICT);
						}
						break;

					case 5:
						{
						State = 1311; Match(K_NO);
						State = 1312; Match(K_ACTION);
						}
						break;
					}
					}
					break;
				case K_MATCH:
					{
					State = 1315; Match(K_MATCH);
					State = 1316; name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 1323;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1334;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				State = 1325;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_NOT) {
					{
					State = 1324; Match(K_NOT);
					}
				}

				State = 1327; Match(K_DEFERRABLE);
				State = 1332;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,184,_ctx) ) {
				case 1:
					{
					State = 1328; Match(K_INITIALLY);
					State = 1329; Match(K_DEFERRED);
					}
					break;

				case 2:
					{
					State = 1330; Match(K_INITIALLY);
					State = 1331; Match(K_IMMEDIATE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raise_functionContext : ParserRuleContext {
		public ITerminalNode K_RAISE() { return GetToken(SqlParser.K_RAISE, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SqlParser.K_IGNORE, 0); }
		public Error_messageContext error_message() {
			return GetRuleContext<Error_messageContext>(0);
		}
		public ITerminalNode K_ROLLBACK() { return GetToken(SqlParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SqlParser.K_ABORT, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SqlParser.K_FAIL, 0); }
		public Raise_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterRaise_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitRaise_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raise_functionContext raise_function() {
		Raise_functionContext _localctx = new Raise_functionContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_raise_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1336; Match(K_RAISE);
			State = 1337; Match(OPEN_PAR);
			State = 1342;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_IGNORE:
				{
				State = 1338; Match(K_IGNORE);
				}
				break;
			case K_ABORT:
			case K_FAIL:
			case K_ROLLBACK:
				{
				State = 1339;
				_la = _input.La(1);
				if ( !(_la==K_ABORT || _la==K_FAIL || _la==K_ROLLBACK) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1340; Match(COMMA);
				State = 1341; error_message();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1344; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexed_columnContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode K_COLLATE() { return GetToken(SqlParser.K_COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_ASC() { return GetToken(SqlParser.K_ASC, 0); }
		public ITerminalNode K_DESC() { return GetToken(SqlParser.K_DESC, 0); }
		public Indexed_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexed_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterIndexed_column(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitIndexed_column(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexed_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexed_columnContext indexed_column() {
		Indexed_columnContext _localctx = new Indexed_columnContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_indexed_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1346; column_name();
			State = 1349;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_COLLATE) {
				{
				State = 1347; Match(K_COLLATE);
				State = 1348; collation_name();
				}
			}

			State = 1352;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ASC || _la==K_DESC) {
				{
				State = 1351;
				_la = _input.La(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		public Indexed_columnContext[] indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		public ITerminalNode K_CHECK() { return GetToken(SqlParser.K_CHECK, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_FOREIGN() { return GetToken(SqlParser.K_FOREIGN, 0); }
		public ITerminalNode K_KEY() { return GetToken(SqlParser.K_KEY, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public ITerminalNode K_CONSTRAINT() { return GetToken(SqlParser.K_CONSTRAINT, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode K_PRIMARY() { return GetToken(SqlParser.K_PRIMARY, 0); }
		public ITerminalNode K_UNIQUE() { return GetToken(SqlParser.K_UNIQUE, 0); }
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_table_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1356;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_CONSTRAINT) {
				{
				State = 1354; Match(K_CONSTRAINT);
				State = 1355; name();
				}
			}

			State = 1394;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_PRIMARY:
			case K_UNIQUE:
				{
				State = 1361;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case K_PRIMARY:
					{
					State = 1358; Match(K_PRIMARY);
					State = 1359; Match(K_KEY);
					}
					break;
				case K_UNIQUE:
					{
					State = 1360; Match(K_UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1363; Match(OPEN_PAR);
				State = 1364; indexed_column();
				State = 1369;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1365; Match(COMMA);
					State = 1366; indexed_column();
					}
					}
					State = 1371;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1372; Match(CLOSE_PAR);
				State = 1373; conflict_clause();
				}
				break;
			case K_CHECK:
				{
				State = 1375; Match(K_CHECK);
				State = 1376; Match(OPEN_PAR);
				State = 1377; expr(0);
				State = 1378; Match(CLOSE_PAR);
				}
				break;
			case K_FOREIGN:
				{
				State = 1380; Match(K_FOREIGN);
				State = 1381; Match(K_KEY);
				State = 1382; Match(OPEN_PAR);
				State = 1383; column_name();
				State = 1388;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1384; Match(COMMA);
					State = 1385; column_name();
					}
					}
					State = 1390;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1391; Match(CLOSE_PAR);
				State = 1392; foreign_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_clauseContext : ParserRuleContext {
		public ITerminalNode K_WITH() { return GetToken(SqlParser.K_WITH, 0); }
		public Cte_table_nameContext[] cte_table_name() {
			return GetRuleContexts<Cte_table_nameContext>();
		}
		public Cte_table_nameContext cte_table_name(int i) {
			return GetRuleContext<Cte_table_nameContext>(i);
		}
		public ITerminalNode[] K_AS() { return GetTokens(SqlParser.K_AS); }
		public ITerminalNode K_AS(int i) {
			return GetToken(SqlParser.K_AS, i);
		}
		public Select_stmtContext[] select_stmt() {
			return GetRuleContexts<Select_stmtContext>();
		}
		public Select_stmtContext select_stmt(int i) {
			return GetRuleContext<Select_stmtContext>(i);
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(SqlParser.K_RECURSIVE, 0); }
		public With_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterWith_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitWith_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_clauseContext with_clause() {
		With_clauseContext _localctx = new With_clauseContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_with_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1396; Match(K_WITH);
			State = 1398;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				State = 1397; Match(K_RECURSIVE);
				}
				break;
			}
			State = 1400; cte_table_name();
			State = 1401; Match(K_AS);
			State = 1402; Match(OPEN_PAR);
			State = 1403; select_stmt();
			State = 1404; Match(CLOSE_PAR);
			State = 1414;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1405; Match(COMMA);
				State = 1406; cte_table_name();
				State = 1407; Match(K_AS);
				State = 1408; Match(OPEN_PAR);
				State = 1409; select_stmt();
				State = 1410; Match(CLOSE_PAR);
				}
				}
				State = 1416;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_table_nameContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_INDEXED() { return GetToken(SqlParser.K_INDEXED, 0); }
		public ITerminalNode K_BY() { return GetToken(SqlParser.K_BY, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_NOT() { return GetToken(SqlParser.K_NOT, 0); }
		public Qualified_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterQualified_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitQualified_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_table_nameContext qualified_table_name() {
		Qualified_table_nameContext _localctx = new Qualified_table_nameContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_qualified_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1420;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				State = 1417; database_name();
				State = 1418; Match(DOT);
				}
				break;
			}
			State = 1422; table_name();
			State = 1428;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_INDEXED:
				{
				State = 1423; Match(K_INDEXED);
				State = 1424; Match(K_BY);
				State = 1425; index_name();
				}
				break;
			case K_NOT:
				{
				State = 1426; Match(K_NOT);
				State = 1427; Match(K_INDEXED);
				}
				break;
			case Eof:
			case SCOL:
			case K_ALTER:
			case K_ANALYZE:
			case K_ATTACH:
			case K_BEGIN:
			case K_COMMIT:
			case K_CREATE:
			case K_DELETE:
			case K_DETACH:
			case K_DROP:
			case K_END:
			case K_EXPLAIN:
			case K_INSERT:
			case K_LIMIT:
			case K_ORDER:
			case K_PRAGMA:
			case K_REINDEX:
			case K_RELEASE:
			case K_REPLACE:
			case K_ROLLBACK:
			case K_SAVEPOINT:
			case K_SELECT:
			case K_SET:
			case K_UPDATE:
			case K_VACUUM:
			case K_VALUES:
			case K_WHERE:
			case K_WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordering_termContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_COLLATE() { return GetToken(SqlParser.K_COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_ASC() { return GetToken(SqlParser.K_ASC, 0); }
		public ITerminalNode K_DESC() { return GetToken(SqlParser.K_DESC, 0); }
		public Ordering_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterOrdering_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitOrdering_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ordering_termContext ordering_term() {
		Ordering_termContext _localctx = new Ordering_termContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_ordering_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1430; expr(0);
			State = 1433;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_COLLATE) {
				{
				State = 1431; Match(K_COLLATE);
				State = 1432; collation_name();
				}
			}

			State = 1436;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ASC || _la==K_DESC) {
				{
				State = 1435;
				_la = _input.La(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_valueContext : ParserRuleContext {
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(SqlParser.STRING_LITERAL, 0); }
		public Pragma_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterPragma_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitPragma_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_valueContext pragma_value() {
		Pragma_valueContext _localctx = new Pragma_valueContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_pragma_value);
		try {
			State = 1441;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,200,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1438; signed_number();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1439; name();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1440; Match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_expressionContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(SqlParser.K_AS, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterCommon_table_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitCommon_table_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_table_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_expressionContext common_table_expression() {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_common_table_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1443; table_name();
			State = 1455;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 1444; Match(OPEN_PAR);
				State = 1445; column_name();
				State = 1450;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1446; Match(COMMA);
					State = 1447; column_name();
					}
					}
					State = 1452;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1453; Match(CLOSE_PAR);
				}
			}

			State = 1457; Match(K_AS);
			State = 1458; Match(OPEN_PAR);
			State = 1459; select_stmt();
			State = 1460; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_columnContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(SqlParser.K_AS, 0); }
		public Result_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterResult_column(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitResult_column(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Result_columnContext result_column() {
		Result_columnContext _localctx = new Result_columnContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_result_column);
		int _la;
		try {
			State = 1474;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1462; Match(STAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1463; table_name();
				State = 1464; Match(DOT);
				State = 1465; Match(STAR);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1467; expr(0);
				State = 1472;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_AS || _la==IDENTIFIER || _la==STRING_LITERAL) {
					{
					State = 1469;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==K_AS) {
						{
						State = 1468; Match(K_AS);
						}
					}

					State = 1471; column_alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_subqueryContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode K_INDEXED() { return GetToken(SqlParser.K_INDEXED, 0); }
		public ITerminalNode K_BY() { return GetToken(SqlParser.K_BY, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_NOT() { return GetToken(SqlParser.K_NOT, 0); }
		public ITerminalNode K_AS() { return GetToken(SqlParser.K_AS, 0); }
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Table_or_subqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterTable_or_subquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitTable_or_subquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_or_subquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_subqueryContext table_or_subquery() {
		Table_or_subqueryContext _localctx = new Table_or_subqueryContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_table_or_subquery);
		int _la;
		try {
			State = 1523;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,216,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1479;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,206,_ctx) ) {
				case 1:
					{
					State = 1476; database_name();
					State = 1477; Match(DOT);
					}
					break;
				}
				State = 1481; table_name();
				State = 1486;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OPEN_PAR || _la==K_AS || _la==IDENTIFIER || _la==STRING_LITERAL) {
					{
					State = 1483;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==K_AS) {
						{
						State = 1482; Match(K_AS);
						}
					}

					State = 1485; table_alias();
					}
				}

				State = 1493;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case K_INDEXED:
					{
					State = 1488; Match(K_INDEXED);
					State = 1489; Match(K_BY);
					State = 1490; index_name();
					}
					break;
				case K_NOT:
					{
					State = 1491; Match(K_NOT);
					State = 1492; Match(K_INDEXED);
					}
					break;
				case Eof:
				case SCOL:
				case CLOSE_PAR:
				case COMMA:
				case K_ALTER:
				case K_ANALYZE:
				case K_ATTACH:
				case K_BEGIN:
				case K_COMMIT:
				case K_CREATE:
				case K_CROSS:
				case K_DELETE:
				case K_DETACH:
				case K_DROP:
				case K_END:
				case K_EXCEPT:
				case K_EXPLAIN:
				case K_GROUP:
				case K_INNER:
				case K_INSERT:
				case K_INTERSECT:
				case K_JOIN:
				case K_LEFT:
				case K_LIMIT:
				case K_NATURAL:
				case K_ON:
				case K_ORDER:
				case K_PRAGMA:
				case K_REINDEX:
				case K_RELEASE:
				case K_REPLACE:
				case K_ROLLBACK:
				case K_SAVEPOINT:
				case K_SELECT:
				case K_UNION:
				case K_UPDATE:
				case K_USING:
				case K_VACUUM:
				case K_VALUES:
				case K_WHERE:
				case K_WITH:
					break;
				default:
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1495; Match(OPEN_PAR);
				State = 1505;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,211,_ctx) ) {
				case 1:
					{
					State = 1496; table_or_subquery();
					State = 1501;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1497; Match(COMMA);
						State = 1498; table_or_subquery();
						}
						}
						State = 1503;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;

				case 2:
					{
					State = 1504; join_clause();
					}
					break;
				}
				State = 1507; Match(CLOSE_PAR);
				State = 1512;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OPEN_PAR || _la==K_AS || _la==IDENTIFIER || _la==STRING_LITERAL) {
					{
					State = 1509;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==K_AS) {
						{
						State = 1508; Match(K_AS);
						}
					}

					State = 1511; table_alias();
					}
				}

				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1514; Match(OPEN_PAR);
				State = 1515; select_stmt();
				State = 1516; Match(CLOSE_PAR);
				State = 1521;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OPEN_PAR || _la==K_AS || _la==IDENTIFIER || _la==STRING_LITERAL) {
					{
					State = 1518;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==K_AS) {
						{
						State = 1517; Match(K_AS);
						}
					}

					State = 1520; table_alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_operatorContext[] join_operator() {
			return GetRuleContexts<Join_operatorContext>();
		}
		public Join_operatorContext join_operator(int i) {
			return GetRuleContext<Join_operatorContext>(i);
		}
		public Join_constraintContext[] join_constraint() {
			return GetRuleContexts<Join_constraintContext>();
		}
		public Join_constraintContext join_constraint(int i) {
			return GetRuleContext<Join_constraintContext>(i);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterJoin_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitJoin_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1525; table_or_subquery();
			State = 1532;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA || _la==K_CROSS || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (K_INNER - 87)) | (1L << (K_JOIN - 87)) | (1L << (K_LEFT - 87)) | (1L << (K_NATURAL - 87)))) != 0)) {
				{
				{
				State = 1526; join_operator();
				State = 1527; table_or_subquery();
				State = 1528; join_constraint();
				}
				}
				State = 1534;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_operatorContext : ParserRuleContext {
		public ITerminalNode K_JOIN() { return GetToken(SqlParser.K_JOIN, 0); }
		public ITerminalNode K_NATURAL() { return GetToken(SqlParser.K_NATURAL, 0); }
		public ITerminalNode K_LEFT() { return GetToken(SqlParser.K_LEFT, 0); }
		public ITerminalNode K_INNER() { return GetToken(SqlParser.K_INNER, 0); }
		public ITerminalNode K_CROSS() { return GetToken(SqlParser.K_CROSS, 0); }
		public ITerminalNode K_OUTER() { return GetToken(SqlParser.K_OUTER, 0); }
		public Join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterJoin_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitJoin_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_operatorContext join_operator() {
		Join_operatorContext _localctx = new Join_operatorContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_join_operator);
		int _la;
		try {
			State = 1548;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1535; Match(COMMA);
				}
				break;
			case K_CROSS:
			case K_INNER:
			case K_JOIN:
			case K_LEFT:
			case K_NATURAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1537;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_NATURAL) {
					{
					State = 1536; Match(K_NATURAL);
					}
				}

				State = 1545;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case K_LEFT:
					{
					State = 1539; Match(K_LEFT);
					State = 1541;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==K_OUTER) {
						{
						State = 1540; Match(K_OUTER);
						}
					}

					}
					break;
				case K_INNER:
					{
					State = 1543; Match(K_INNER);
					}
					break;
				case K_CROSS:
					{
					State = 1544; Match(K_CROSS);
					}
					break;
				case K_JOIN:
					break;
				default:
					break;
				}
				State = 1547; Match(K_JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_constraintContext : ParserRuleContext {
		public ITerminalNode K_ON() { return GetToken(SqlParser.K_ON, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_USING() { return GetToken(SqlParser.K_USING, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Join_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterJoin_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitJoin_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_constraintContext join_constraint() {
		Join_constraintContext _localctx = new Join_constraintContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_join_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1564;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_ON:
				{
				State = 1550; Match(K_ON);
				State = 1551; expr(0);
				}
				break;
			case K_USING:
				{
				State = 1552; Match(K_USING);
				State = 1553; Match(OPEN_PAR);
				State = 1554; column_name();
				State = 1559;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1555; Match(COMMA);
					State = 1556; column_name();
					}
					}
					State = 1561;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1562; Match(CLOSE_PAR);
				}
				break;
			case Eof:
			case SCOL:
			case CLOSE_PAR:
			case COMMA:
			case K_ALTER:
			case K_ANALYZE:
			case K_ATTACH:
			case K_BEGIN:
			case K_COMMIT:
			case K_CREATE:
			case K_CROSS:
			case K_DELETE:
			case K_DETACH:
			case K_DROP:
			case K_END:
			case K_EXCEPT:
			case K_EXPLAIN:
			case K_GROUP:
			case K_INNER:
			case K_INSERT:
			case K_INTERSECT:
			case K_JOIN:
			case K_LEFT:
			case K_LIMIT:
			case K_NATURAL:
			case K_ORDER:
			case K_PRAGMA:
			case K_REINDEX:
			case K_RELEASE:
			case K_REPLACE:
			case K_ROLLBACK:
			case K_SAVEPOINT:
			case K_SELECT:
			case K_UNION:
			case K_UPDATE:
			case K_VACUUM:
			case K_VALUES:
			case K_WHERE:
			case K_WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_coreContext : ParserRuleContext {
		public ITerminalNode K_SELECT() { return GetToken(SqlParser.K_SELECT, 0); }
		public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		public ITerminalNode K_FROM() { return GetToken(SqlParser.K_FROM, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SqlParser.K_WHERE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_GROUP() { return GetToken(SqlParser.K_GROUP, 0); }
		public ITerminalNode K_BY() { return GetToken(SqlParser.K_BY, 0); }
		public ITerminalNode K_DISTINCT() { return GetToken(SqlParser.K_DISTINCT, 0); }
		public ITerminalNode K_ALL() { return GetToken(SqlParser.K_ALL, 0); }
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public ITerminalNode K_HAVING() { return GetToken(SqlParser.K_HAVING, 0); }
		public ITerminalNode K_VALUES() { return GetToken(SqlParser.K_VALUES, 0); }
		public Select_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_core; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSelect_core(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSelect_core(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_core(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_coreContext select_core() {
		Select_coreContext _localctx = new Select_coreContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_select_core);
		int _la;
		try {
			State = 1640;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1566; Match(K_SELECT);
				State = 1568;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,224,_ctx) ) {
				case 1:
					{
					State = 1567;
					_la = _input.La(1);
					if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 1570; result_column();
				State = 1575;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1571; Match(COMMA);
					State = 1572; result_column();
					}
					}
					State = 1577;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1590;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_FROM) {
					{
					State = 1578; Match(K_FROM);
					State = 1588;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,227,_ctx) ) {
					case 1:
						{
						State = 1579; table_or_subquery();
						State = 1584;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==COMMA) {
							{
							{
							State = 1580; Match(COMMA);
							State = 1581; table_or_subquery();
							}
							}
							State = 1586;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						}
						break;

					case 2:
						{
						State = 1587; join_clause();
						}
						break;
					}
					}
				}

				State = 1594;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_WHERE) {
					{
					State = 1592; Match(K_WHERE);
					State = 1593; expr(0);
					}
				}

				State = 1610;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_GROUP) {
					{
					State = 1596; Match(K_GROUP);
					State = 1597; Match(K_BY);
					State = 1598; expr(0);
					State = 1603;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1599; Match(COMMA);
						State = 1600; expr(0);
						}
						}
						State = 1605;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 1608;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==K_HAVING) {
						{
						State = 1606; Match(K_HAVING);
						State = 1607; expr(0);
						}
					}

					}
				}

				}
				break;
			case K_VALUES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1612; Match(K_VALUES);
				State = 1613; Match(OPEN_PAR);
				State = 1614; expr(0);
				State = 1619;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1615; Match(COMMA);
					State = 1616; expr(0);
					}
					}
					State = 1621;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1622; Match(CLOSE_PAR);
				State = 1637;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1623; Match(COMMA);
					State = 1624; Match(OPEN_PAR);
					State = 1625; expr(0);
					State = 1630;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1626; Match(COMMA);
						State = 1627; expr(0);
						}
						}
						State = 1632;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 1633; Match(CLOSE_PAR);
					}
					}
					State = 1639;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_operatorContext : ParserRuleContext {
		public ITerminalNode K_UNION() { return GetToken(SqlParser.K_UNION, 0); }
		public ITerminalNode K_ALL() { return GetToken(SqlParser.K_ALL, 0); }
		public ITerminalNode K_INTERSECT() { return GetToken(SqlParser.K_INTERSECT, 0); }
		public ITerminalNode K_EXCEPT() { return GetToken(SqlParser.K_EXCEPT, 0); }
		public Compound_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterCompound_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitCompound_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_operatorContext compound_operator() {
		Compound_operatorContext _localctx = new Compound_operatorContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_compound_operator);
		try {
			State = 1647;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,237,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1642; Match(K_UNION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1643; Match(K_UNION);
				State = 1644; Match(K_ALL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1645; Match(K_INTERSECT);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1646; Match(K_EXCEPT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cte_table_nameContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Cte_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cte_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterCte_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitCte_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCte_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cte_table_nameContext cte_table_name() {
		Cte_table_nameContext _localctx = new Cte_table_nameContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_cte_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1649; table_name();
			State = 1661;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 1650; Match(OPEN_PAR);
				State = 1651; column_name();
				State = 1656;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1652; Match(COMMA);
					State = 1653; column_name();
					}
					}
					State = 1658;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1659; Match(CLOSE_PAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_numberContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(SqlParser.NUMERIC_LITERAL, 0); }
		public Signed_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSigned_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSigned_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_numberContext signed_number() {
		Signed_numberContext _localctx = new Signed_numberContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_signed_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1664;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 1663;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 1666; Match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_valueContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(SqlParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(SqlParser.STRING_LITERAL, 0); }
		public ITerminalNode BLOB_LITERAL() { return GetToken(SqlParser.BLOB_LITERAL, 0); }
		public ITerminalNode K_NULL() { return GetToken(SqlParser.K_NULL, 0); }
		public ITerminalNode K_CURRENT_TIME() { return GetToken(SqlParser.K_CURRENT_TIME, 0); }
		public ITerminalNode K_CURRENT_DATE() { return GetToken(SqlParser.K_CURRENT_DATE, 0); }
		public ITerminalNode K_CURRENT_TIMESTAMP() { return GetToken(SqlParser.K_CURRENT_TIMESTAMP, 0); }
		public Literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterLiteral_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitLiteral_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_valueContext literal_value() {
		Literal_valueContext _localctx = new Literal_valueContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_literal_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1668;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CURRENT_DATE) | (1L << K_CURRENT_TIME) | (1L << K_CURRENT_TIMESTAMP))) != 0) || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (K_NULL - 104)) | (1L << (NUMERIC_LITERAL - 104)) | (1L << (STRING_LITERAL - 104)) | (1L << (BLOB_LITERAL - 104)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public ITerminalNode K_NOT() { return GetToken(SqlParser.K_NOT, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1670;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << TILDE))) != 0) || _la==K_NOT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_messageContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(SqlParser.STRING_LITERAL, 0); }
		public Error_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterError_message(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitError_message(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_message(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_messageContext error_message() {
		Error_messageContext _localctx = new Error_messageContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_error_message);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1672; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_argumentContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Column_defContext column_def() {
			return GetRuleContext<Column_defContext>(0);
		}
		public Module_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterModule_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitModule_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_argumentContext module_argument() {
		Module_argumentContext _localctx = new Module_argumentContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_module_argument);
		try {
			State = 1676;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1674; expr(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1675; column_def();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SqlParser.IDENTIFIER, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(SqlParser.STRING_LITERAL, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_column_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1678;
			_la = _input.La(1);
			if ( !(_la==IDENTIFIER || _la==STRING_LITERAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode K_ABORT() { return GetToken(SqlParser.K_ABORT, 0); }
		public ITerminalNode K_ACTION() { return GetToken(SqlParser.K_ACTION, 0); }
		public ITerminalNode K_ADD() { return GetToken(SqlParser.K_ADD, 0); }
		public ITerminalNode K_AFTER() { return GetToken(SqlParser.K_AFTER, 0); }
		public ITerminalNode K_ALL() { return GetToken(SqlParser.K_ALL, 0); }
		public ITerminalNode K_ALTER() { return GetToken(SqlParser.K_ALTER, 0); }
		public ITerminalNode K_ANALYZE() { return GetToken(SqlParser.K_ANALYZE, 0); }
		public ITerminalNode K_AND() { return GetToken(SqlParser.K_AND, 0); }
		public ITerminalNode K_AS() { return GetToken(SqlParser.K_AS, 0); }
		public ITerminalNode K_ASC() { return GetToken(SqlParser.K_ASC, 0); }
		public ITerminalNode K_ATTACH() { return GetToken(SqlParser.K_ATTACH, 0); }
		public ITerminalNode K_AUTOINCREMENT() { return GetToken(SqlParser.K_AUTOINCREMENT, 0); }
		public ITerminalNode K_BEFORE() { return GetToken(SqlParser.K_BEFORE, 0); }
		public ITerminalNode K_BEGIN() { return GetToken(SqlParser.K_BEGIN, 0); }
		public ITerminalNode K_BETWEEN() { return GetToken(SqlParser.K_BETWEEN, 0); }
		public ITerminalNode K_BY() { return GetToken(SqlParser.K_BY, 0); }
		public ITerminalNode K_CASCADE() { return GetToken(SqlParser.K_CASCADE, 0); }
		public ITerminalNode K_CASE() { return GetToken(SqlParser.K_CASE, 0); }
		public ITerminalNode K_CAST() { return GetToken(SqlParser.K_CAST, 0); }
		public ITerminalNode K_CHECK() { return GetToken(SqlParser.K_CHECK, 0); }
		public ITerminalNode K_COLLATE() { return GetToken(SqlParser.K_COLLATE, 0); }
		public ITerminalNode K_COLUMN() { return GetToken(SqlParser.K_COLUMN, 0); }
		public ITerminalNode K_COMMIT() { return GetToken(SqlParser.K_COMMIT, 0); }
		public ITerminalNode K_CONFLICT() { return GetToken(SqlParser.K_CONFLICT, 0); }
		public ITerminalNode K_CONSTRAINT() { return GetToken(SqlParser.K_CONSTRAINT, 0); }
		public ITerminalNode K_CREATE() { return GetToken(SqlParser.K_CREATE, 0); }
		public ITerminalNode K_CROSS() { return GetToken(SqlParser.K_CROSS, 0); }
		public ITerminalNode K_CURRENT_DATE() { return GetToken(SqlParser.K_CURRENT_DATE, 0); }
		public ITerminalNode K_CURRENT_TIME() { return GetToken(SqlParser.K_CURRENT_TIME, 0); }
		public ITerminalNode K_CURRENT_TIMESTAMP() { return GetToken(SqlParser.K_CURRENT_TIMESTAMP, 0); }
		public ITerminalNode K_DATABASE() { return GetToken(SqlParser.K_DATABASE, 0); }
		public ITerminalNode K_DEFAULT() { return GetToken(SqlParser.K_DEFAULT, 0); }
		public ITerminalNode K_DEFERRABLE() { return GetToken(SqlParser.K_DEFERRABLE, 0); }
		public ITerminalNode K_DEFERRED() { return GetToken(SqlParser.K_DEFERRED, 0); }
		public ITerminalNode K_DELETE() { return GetToken(SqlParser.K_DELETE, 0); }
		public ITerminalNode K_DESC() { return GetToken(SqlParser.K_DESC, 0); }
		public ITerminalNode K_DETACH() { return GetToken(SqlParser.K_DETACH, 0); }
		public ITerminalNode K_DISTINCT() { return GetToken(SqlParser.K_DISTINCT, 0); }
		public ITerminalNode K_DROP() { return GetToken(SqlParser.K_DROP, 0); }
		public ITerminalNode K_EACH() { return GetToken(SqlParser.K_EACH, 0); }
		public ITerminalNode K_ELSE() { return GetToken(SqlParser.K_ELSE, 0); }
		public ITerminalNode K_END() { return GetToken(SqlParser.K_END, 0); }
		public ITerminalNode K_ESCAPE() { return GetToken(SqlParser.K_ESCAPE, 0); }
		public ITerminalNode K_EXCEPT() { return GetToken(SqlParser.K_EXCEPT, 0); }
		public ITerminalNode K_EXCLUSIVE() { return GetToken(SqlParser.K_EXCLUSIVE, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SqlParser.K_EXISTS, 0); }
		public ITerminalNode K_EXPLAIN() { return GetToken(SqlParser.K_EXPLAIN, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SqlParser.K_FAIL, 0); }
		public ITerminalNode K_FOR() { return GetToken(SqlParser.K_FOR, 0); }
		public ITerminalNode K_FOREIGN() { return GetToken(SqlParser.K_FOREIGN, 0); }
		public ITerminalNode K_FROM() { return GetToken(SqlParser.K_FROM, 0); }
		public ITerminalNode K_FULL() { return GetToken(SqlParser.K_FULL, 0); }
		public ITerminalNode K_GLOB() { return GetToken(SqlParser.K_GLOB, 0); }
		public ITerminalNode K_GROUP() { return GetToken(SqlParser.K_GROUP, 0); }
		public ITerminalNode K_HAVING() { return GetToken(SqlParser.K_HAVING, 0); }
		public ITerminalNode K_IF() { return GetToken(SqlParser.K_IF, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SqlParser.K_IGNORE, 0); }
		public ITerminalNode K_IMMEDIATE() { return GetToken(SqlParser.K_IMMEDIATE, 0); }
		public ITerminalNode K_IN() { return GetToken(SqlParser.K_IN, 0); }
		public ITerminalNode K_INDEX() { return GetToken(SqlParser.K_INDEX, 0); }
		public ITerminalNode K_INDEXED() { return GetToken(SqlParser.K_INDEXED, 0); }
		public ITerminalNode K_INITIALLY() { return GetToken(SqlParser.K_INITIALLY, 0); }
		public ITerminalNode K_INNER() { return GetToken(SqlParser.K_INNER, 0); }
		public ITerminalNode K_INSERT() { return GetToken(SqlParser.K_INSERT, 0); }
		public ITerminalNode K_INSTEAD() { return GetToken(SqlParser.K_INSTEAD, 0); }
		public ITerminalNode K_INTERSECT() { return GetToken(SqlParser.K_INTERSECT, 0); }
		public ITerminalNode K_INTO() { return GetToken(SqlParser.K_INTO, 0); }
		public ITerminalNode K_IS() { return GetToken(SqlParser.K_IS, 0); }
		public ITerminalNode K_ISNULL() { return GetToken(SqlParser.K_ISNULL, 0); }
		public ITerminalNode K_JOIN() { return GetToken(SqlParser.K_JOIN, 0); }
		public ITerminalNode K_KEY() { return GetToken(SqlParser.K_KEY, 0); }
		public ITerminalNode K_LEFT() { return GetToken(SqlParser.K_LEFT, 0); }
		public ITerminalNode K_LIKE() { return GetToken(SqlParser.K_LIKE, 0); }
		public ITerminalNode K_LIMIT() { return GetToken(SqlParser.K_LIMIT, 0); }
		public ITerminalNode K_MATCH() { return GetToken(SqlParser.K_MATCH, 0); }
		public ITerminalNode K_NATURAL() { return GetToken(SqlParser.K_NATURAL, 0); }
		public ITerminalNode K_NO() { return GetToken(SqlParser.K_NO, 0); }
		public ITerminalNode K_NOT() { return GetToken(SqlParser.K_NOT, 0); }
		public ITerminalNode K_NOTNULL() { return GetToken(SqlParser.K_NOTNULL, 0); }
		public ITerminalNode K_NULL() { return GetToken(SqlParser.K_NULL, 0); }
		public ITerminalNode K_OF() { return GetToken(SqlParser.K_OF, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(SqlParser.K_OFFSET, 0); }
		public ITerminalNode K_ON() { return GetToken(SqlParser.K_ON, 0); }
		public ITerminalNode K_OR() { return GetToken(SqlParser.K_OR, 0); }
		public ITerminalNode K_ORDER() { return GetToken(SqlParser.K_ORDER, 0); }
		public ITerminalNode K_OUTER() { return GetToken(SqlParser.K_OUTER, 0); }
		public ITerminalNode K_PLAN() { return GetToken(SqlParser.K_PLAN, 0); }
		public ITerminalNode K_PRAGMA() { return GetToken(SqlParser.K_PRAGMA, 0); }
		public ITerminalNode K_PRIMARY() { return GetToken(SqlParser.K_PRIMARY, 0); }
		public ITerminalNode K_QUERY() { return GetToken(SqlParser.K_QUERY, 0); }
		public ITerminalNode K_RAISE() { return GetToken(SqlParser.K_RAISE, 0); }
		public ITerminalNode K_RECURSIVE() { return GetToken(SqlParser.K_RECURSIVE, 0); }
		public ITerminalNode K_REFERENCES() { return GetToken(SqlParser.K_REFERENCES, 0); }
		public ITerminalNode K_REGEXP() { return GetToken(SqlParser.K_REGEXP, 0); }
		public ITerminalNode K_REINDEX() { return GetToken(SqlParser.K_REINDEX, 0); }
		public ITerminalNode K_RELEASE() { return GetToken(SqlParser.K_RELEASE, 0); }
		public ITerminalNode K_RENAME() { return GetToken(SqlParser.K_RENAME, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SqlParser.K_REPLACE, 0); }
		public ITerminalNode K_RESTRICT() { return GetToken(SqlParser.K_RESTRICT, 0); }
		public ITerminalNode K_RIGHT() { return GetToken(SqlParser.K_RIGHT, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SqlParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ROW() { return GetToken(SqlParser.K_ROW, 0); }
		public ITerminalNode K_SAVEPOINT() { return GetToken(SqlParser.K_SAVEPOINT, 0); }
		public ITerminalNode K_SELECT() { return GetToken(SqlParser.K_SELECT, 0); }
		public ITerminalNode K_SET() { return GetToken(SqlParser.K_SET, 0); }
		public ITerminalNode K_TABLE() { return GetToken(SqlParser.K_TABLE, 0); }
		public ITerminalNode K_TEMP() { return GetToken(SqlParser.K_TEMP, 0); }
		public ITerminalNode K_TEMPORARY() { return GetToken(SqlParser.K_TEMPORARY, 0); }
		public ITerminalNode K_THEN() { return GetToken(SqlParser.K_THEN, 0); }
		public ITerminalNode K_TO() { return GetToken(SqlParser.K_TO, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SqlParser.K_TRANSACTION, 0); }
		public ITerminalNode K_TRIGGER() { return GetToken(SqlParser.K_TRIGGER, 0); }
		public ITerminalNode K_UNION() { return GetToken(SqlParser.K_UNION, 0); }
		public ITerminalNode K_UNIQUE() { return GetToken(SqlParser.K_UNIQUE, 0); }
		public ITerminalNode K_UPDATE() { return GetToken(SqlParser.K_UPDATE, 0); }
		public ITerminalNode K_USING() { return GetToken(SqlParser.K_USING, 0); }
		public ITerminalNode K_VACUUM() { return GetToken(SqlParser.K_VACUUM, 0); }
		public ITerminalNode K_VALUES() { return GetToken(SqlParser.K_VALUES, 0); }
		public ITerminalNode K_VIEW() { return GetToken(SqlParser.K_VIEW, 0); }
		public ITerminalNode K_VIRTUAL() { return GetToken(SqlParser.K_VIRTUAL, 0); }
		public ITerminalNode K_WHEN() { return GetToken(SqlParser.K_WHEN, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SqlParser.K_WHERE, 0); }
		public ITerminalNode K_WITH() { return GetToken(SqlParser.K_WITH, 0); }
		public ITerminalNode K_WITHOUT() { return GetToken(SqlParser.K_WITHOUT, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1680;
			_la = _input.La(1);
			if ( !(((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (K_ABORT - 25)) | (1L << (K_ACTION - 25)) | (1L << (K_ADD - 25)) | (1L << (K_AFTER - 25)) | (1L << (K_ALL - 25)) | (1L << (K_ALTER - 25)) | (1L << (K_ANALYZE - 25)) | (1L << (K_AND - 25)) | (1L << (K_AS - 25)) | (1L << (K_ASC - 25)) | (1L << (K_ATTACH - 25)) | (1L << (K_AUTOINCREMENT - 25)) | (1L << (K_BEFORE - 25)) | (1L << (K_BEGIN - 25)) | (1L << (K_BETWEEN - 25)) | (1L << (K_BY - 25)) | (1L << (K_CASCADE - 25)) | (1L << (K_CASE - 25)) | (1L << (K_CAST - 25)) | (1L << (K_CHECK - 25)) | (1L << (K_COLLATE - 25)) | (1L << (K_COLUMN - 25)) | (1L << (K_COMMIT - 25)) | (1L << (K_CONFLICT - 25)) | (1L << (K_CONSTRAINT - 25)) | (1L << (K_CREATE - 25)) | (1L << (K_CROSS - 25)) | (1L << (K_CURRENT_DATE - 25)) | (1L << (K_CURRENT_TIME - 25)) | (1L << (K_CURRENT_TIMESTAMP - 25)) | (1L << (K_DATABASE - 25)) | (1L << (K_DEFAULT - 25)) | (1L << (K_DEFERRABLE - 25)) | (1L << (K_DEFERRED - 25)) | (1L << (K_DELETE - 25)) | (1L << (K_DESC - 25)) | (1L << (K_DETACH - 25)) | (1L << (K_DISTINCT - 25)) | (1L << (K_DROP - 25)) | (1L << (K_EACH - 25)) | (1L << (K_ELSE - 25)) | (1L << (K_END - 25)) | (1L << (K_ESCAPE - 25)) | (1L << (K_EXCEPT - 25)) | (1L << (K_EXCLUSIVE - 25)) | (1L << (K_EXISTS - 25)) | (1L << (K_EXPLAIN - 25)) | (1L << (K_FAIL - 25)) | (1L << (K_FOR - 25)) | (1L << (K_FOREIGN - 25)) | (1L << (K_FROM - 25)) | (1L << (K_FULL - 25)) | (1L << (K_GLOB - 25)) | (1L << (K_GROUP - 25)) | (1L << (K_HAVING - 25)) | (1L << (K_IF - 25)) | (1L << (K_IGNORE - 25)) | (1L << (K_IMMEDIATE - 25)) | (1L << (K_IN - 25)) | (1L << (K_INDEX - 25)) | (1L << (K_INDEXED - 25)) | (1L << (K_INITIALLY - 25)) | (1L << (K_INNER - 25)) | (1L << (K_INSERT - 25)))) != 0) || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (K_INSTEAD - 89)) | (1L << (K_INTERSECT - 89)) | (1L << (K_INTO - 89)) | (1L << (K_IS - 89)) | (1L << (K_ISNULL - 89)) | (1L << (K_JOIN - 89)) | (1L << (K_KEY - 89)) | (1L << (K_LEFT - 89)) | (1L << (K_LIKE - 89)) | (1L << (K_LIMIT - 89)) | (1L << (K_MATCH - 89)) | (1L << (K_NATURAL - 89)) | (1L << (K_NO - 89)) | (1L << (K_NOT - 89)) | (1L << (K_NOTNULL - 89)) | (1L << (K_NULL - 89)) | (1L << (K_OF - 89)) | (1L << (K_OFFSET - 89)) | (1L << (K_ON - 89)) | (1L << (K_OR - 89)) | (1L << (K_ORDER - 89)) | (1L << (K_OUTER - 89)) | (1L << (K_PLAN - 89)) | (1L << (K_PRAGMA - 89)) | (1L << (K_PRIMARY - 89)) | (1L << (K_QUERY - 89)) | (1L << (K_RAISE - 89)) | (1L << (K_RECURSIVE - 89)) | (1L << (K_REFERENCES - 89)) | (1L << (K_REGEXP - 89)) | (1L << (K_REINDEX - 89)) | (1L << (K_RELEASE - 89)) | (1L << (K_RENAME - 89)) | (1L << (K_REPLACE - 89)) | (1L << (K_RESTRICT - 89)) | (1L << (K_RIGHT - 89)) | (1L << (K_ROLLBACK - 89)) | (1L << (K_ROW - 89)) | (1L << (K_SAVEPOINT - 89)) | (1L << (K_SELECT - 89)) | (1L << (K_SET - 89)) | (1L << (K_TABLE - 89)) | (1L << (K_TEMP - 89)) | (1L << (K_TEMPORARY - 89)) | (1L << (K_THEN - 89)) | (1L << (K_TO - 89)) | (1L << (K_TRANSACTION - 89)) | (1L << (K_TRIGGER - 89)) | (1L << (K_UNION - 89)) | (1L << (K_UNIQUE - 89)) | (1L << (K_UPDATE - 89)) | (1L << (K_USING - 89)) | (1L << (K_VACUUM - 89)) | (1L << (K_VALUES - 89)) | (1L << (K_VIEW - 89)) | (1L << (K_VIRTUAL - 89)) | (1L << (K_WHEN - 89)) | (1L << (K_WHERE - 89)) | (1L << (K_WITH - 89)) | (1L << (K_WITHOUT - 89)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1682; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1684; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Database_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterDatabase_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitDatabase_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_nameContext database_name() {
		Database_nameContext _localctx = new Database_nameContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_database_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1686; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1688; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_index_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_or_index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_index_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterTable_or_index_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitTable_or_index_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_or_index_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_index_nameContext table_or_index_name() {
		Table_or_index_nameContext _localctx = new Table_or_index_nameContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_table_or_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1690; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_table_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public New_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterNew_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitNew_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public New_table_nameContext new_table_name() {
		New_table_nameContext _localctx = new New_table_nameContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_new_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1692; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterColumn_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitColumn_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1694; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collation_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Collation_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collation_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterCollation_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitCollation_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollation_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collation_nameContext collation_name() {
		Collation_nameContext _localctx = new Collation_nameContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_collation_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1696; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_tableContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Foreign_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterForeign_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitForeign_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_tableContext foreign_table() {
		Foreign_tableContext _localctx = new Foreign_tableContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_foreign_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1698; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterIndex_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitIndex_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_nameContext index_name() {
		Index_nameContext _localctx = new Index_nameContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1700; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterTrigger_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitTrigger_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_nameContext trigger_name() {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_trigger_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1702; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public View_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterView_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitView_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_nameContext view_name() {
		View_nameContext _localctx = new View_nameContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_view_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1704; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterModule_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitModule_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_module_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1706; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Pragma_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterPragma_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitPragma_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_nameContext pragma_name() {
		Pragma_nameContext _localctx = new Pragma_nameContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_pragma_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1708; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSavepoint_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSavepoint_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_nameContext savepoint_name() {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_savepoint_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1710; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SqlParser.IDENTIFIER, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(SqlParser.STRING_LITERAL, 0); }
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_table_alias);
		try {
			State = 1718;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1712; Match(IDENTIFIER);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1713; Match(STRING_LITERAL);
				}
				break;
			case OPEN_PAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1714; Match(OPEN_PAR);
				State = 1715; table_alias();
				State = 1716; Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Transaction_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterTransaction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitTransaction_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransaction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_nameContext transaction_name() {
		Transaction_nameContext _localctx = new Transaction_nameContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_transaction_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1720; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SqlParser.IDENTIFIER, 0); }
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(SqlParser.STRING_LITERAL, 0); }
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterAny_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitAny_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_nameContext any_name() {
		Any_nameContext _localctx = new Any_nameContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_any_name);
		try {
			State = 1729;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1722; Match(IDENTIFIER);
				}
				break;
			case K_ABORT:
			case K_ACTION:
			case K_ADD:
			case K_AFTER:
			case K_ALL:
			case K_ALTER:
			case K_ANALYZE:
			case K_AND:
			case K_AS:
			case K_ASC:
			case K_ATTACH:
			case K_AUTOINCREMENT:
			case K_BEFORE:
			case K_BEGIN:
			case K_BETWEEN:
			case K_BY:
			case K_CASCADE:
			case K_CASE:
			case K_CAST:
			case K_CHECK:
			case K_COLLATE:
			case K_COLUMN:
			case K_COMMIT:
			case K_CONFLICT:
			case K_CONSTRAINT:
			case K_CREATE:
			case K_CROSS:
			case K_CURRENT_DATE:
			case K_CURRENT_TIME:
			case K_CURRENT_TIMESTAMP:
			case K_DATABASE:
			case K_DEFAULT:
			case K_DEFERRABLE:
			case K_DEFERRED:
			case K_DELETE:
			case K_DESC:
			case K_DETACH:
			case K_DISTINCT:
			case K_DROP:
			case K_EACH:
			case K_ELSE:
			case K_END:
			case K_ESCAPE:
			case K_EXCEPT:
			case K_EXCLUSIVE:
			case K_EXISTS:
			case K_EXPLAIN:
			case K_FAIL:
			case K_FOR:
			case K_FOREIGN:
			case K_FROM:
			case K_FULL:
			case K_GLOB:
			case K_GROUP:
			case K_HAVING:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IN:
			case K_INDEX:
			case K_INDEXED:
			case K_INITIALLY:
			case K_INNER:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERSECT:
			case K_INTO:
			case K_IS:
			case K_ISNULL:
			case K_JOIN:
			case K_KEY:
			case K_LEFT:
			case K_LIKE:
			case K_LIMIT:
			case K_MATCH:
			case K_NATURAL:
			case K_NO:
			case K_NOT:
			case K_NOTNULL:
			case K_NULL:
			case K_OF:
			case K_OFFSET:
			case K_ON:
			case K_OR:
			case K_ORDER:
			case K_OUTER:
			case K_PLAN:
			case K_PRAGMA:
			case K_PRIMARY:
			case K_QUERY:
			case K_RAISE:
			case K_RECURSIVE:
			case K_REFERENCES:
			case K_REGEXP:
			case K_REINDEX:
			case K_RELEASE:
			case K_RENAME:
			case K_REPLACE:
			case K_RESTRICT:
			case K_RIGHT:
			case K_ROLLBACK:
			case K_ROW:
			case K_SAVEPOINT:
			case K_SELECT:
			case K_SET:
			case K_TABLE:
			case K_TEMP:
			case K_TEMPORARY:
			case K_THEN:
			case K_TO:
			case K_TRANSACTION:
			case K_TRIGGER:
			case K_UNION:
			case K_UNIQUE:
			case K_UPDATE:
			case K_USING:
			case K_VACUUM:
			case K_VALUES:
			case K_VIEW:
			case K_VIRTUAL:
			case K_WHEN:
			case K_WHERE:
			case K_WITH:
			case K_WITHOUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1723; keyword();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1724; Match(STRING_LITERAL);
				}
				break;
			case OPEN_PAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1725; Match(OPEN_PAR);
				State = 1726; any_name();
				State = 1727; Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 38: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 20);

		case 1: return Precpred(_ctx, 19);

		case 2: return Precpred(_ctx, 18);

		case 3: return Precpred(_ctx, 17);

		case 4: return Precpred(_ctx, 16);

		case 5: return Precpred(_ctx, 15);

		case 6: return Precpred(_ctx, 14);

		case 7: return Precpred(_ctx, 13);

		case 8: return Precpred(_ctx, 6);

		case 9: return Precpred(_ctx, 5);

		case 10: return Precpred(_ctx, 9);

		case 11: return Precpred(_ctx, 8);

		case 12: return Precpred(_ctx, 7);

		case 13: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x9F\x6C6\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x3\x2\a\x2\xA6\n\x2\f\x2\xE\x2\xA9\v\x2\x3"+
		"\x2\x3\x2\x3\x3\a\x3\xAE\n\x3\f\x3\xE\x3\xB1\v\x3\x3\x3\x3\x3\x6\x3\xB5"+
		"\n\x3\r\x3\xE\x3\xB6\x3\x3\a\x3\xBA\n\x3\f\x3\xE\x3\xBD\v\x3\x3\x3\a\x3"+
		"\xC0\n\x3\f\x3\xE\x3\xC3\v\x3\x3\x4\x3\x4\x3\x4\x5\x4\xC8\n\x4\x5\x4\xCA"+
		"\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\xEA\n\x4\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x5\x5\xF1\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x5\x5\xF9\n\x5\x3\x5\x5\x5\xFC\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x5\x6\x105\n\x6\x3\a\x3\a\x5\a\x109\n\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\b\x3\b\x5\b\x111\n\b\x3\b\x3\b\x5\b\x115\n\b\x5\b\x117\n\b\x3\t"+
		"\x3\t\x3\t\x5\t\x11C\n\t\x5\t\x11E\n\t\x3\n\x3\n\x5\n\x122\n\n\x3\n\x3"+
		"\n\x3\n\a\n\x127\n\n\f\n\xE\n\x12A\v\n\x5\n\x12C\n\n\x3\n\x3\n\x3\n\x5"+
		"\n\x131\n\n\x3\n\x3\n\x5\n\x135\n\n\x3\n\x6\n\x138\n\n\r\n\xE\n\x139\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\a\n\x141\n\n\f\n\xE\n\x144\v\n\x5\n\x146\n\n\x3"+
		"\n\x3\n\x3\n\x3\n\x5\n\x14C\n\n\x5\n\x14E\n\n\x3\v\x3\v\x5\v\x152\n\v"+
		"\x3\v\x3\v\x3\v\x3\v\x5\v\x158\n\v\x3\v\x3\v\x3\v\x5\v\x15D\n\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\a\v\x166\n\v\f\v\xE\v\x169\v\v\x3\v\x3\v\x3"+
		"\v\x5\v\x16E\n\v\x3\f\x3\f\x5\f\x172\n\f\x3\f\x3\f\x3\f\x3\f\x5\f\x178"+
		"\n\f\x3\f\x3\f\x3\f\x5\f\x17D\n\f\x3\f\x3\f\x3\f\x3\f\x3\f\a\f\x184\n"+
		"\f\f\f\xE\f\x187\v\f\x3\f\x3\f\a\f\x18B\n\f\f\f\xE\f\x18E\v\f\x3\f\x3"+
		"\f\x3\f\x5\f\x193\n\f\x3\f\x3\f\x5\f\x197\n\f\x3\r\x3\r\x5\r\x19B\n\r"+
		"\x3\r\x3\r\x3\r\x3\r\x5\r\x1A1\n\r\x3\r\x3\r\x3\r\x5\r\x1A6\n\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x5\r\x1AD\n\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\a\r"+
		"\x1B6\n\r\f\r\xE\r\x1B9\v\r\x5\r\x1BB\n\r\x5\r\x1BD\n\r\x3\r\x3\r\x3\r"+
		"\x3\r\x5\r\x1C3\n\r\x3\r\x3\r\x3\r\x3\r\x5\r\x1C9\n\r\x3\r\x3\r\x5\r\x1CD"+
		"\n\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x1D4\n\r\x3\r\x3\r\x6\r\x1D8\n\r\r"+
		"\r\xE\r\x1D9\x3\r\x3\r\x3\xE\x3\xE\x5\xE\x1E0\n\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x5\xE\x1E6\n\xE\x3\xE\x3\xE\x3\xE\x5\xE\x1EB\n\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x1F7\n\xF\x3\xF\x3\xF"+
		"\x3\xF\x5\xF\x1FC\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF"+
		"\x205\n\xF\f\xF\xE\xF\x208\v\xF\x3\xF\x3\xF\x5\xF\x20C\n\xF\x3\x10\x5"+
		"\x10\x20F\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x216\n\x10\x3"+
		"\x11\x5\x11\x219\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x220"+
		"\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\x227\n\x11\f\x11\xE\x11"+
		"\x22A\v\x11\x5\x11\x22C\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x232"+
		"\n\x11\x5\x11\x234\n\x11\x3\x12\x3\x12\x5\x12\x238\n\x12\x3\x12\x3\x12"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x240\n\x13\x3\x13\x3\x13\x3\x13\x5"+
		"\x13\x245\n\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x24D"+
		"\n\x14\x3\x14\x3\x14\x3\x14\x5\x14\x252\n\x14\x3\x14\x3\x14\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x5\x15\x25A\n\x15\x3\x15\x3\x15\x3\x15\x5\x15\x25F"+
		"\n\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x267\n\x16\x3"+
		"\x16\x3\x16\x3\x16\x5\x16\x26C\n\x16\x3\x16\x3\x16\x3\x17\x3\x17\x5\x17"+
		"\x272\n\x17\x3\x17\x3\x17\x3\x17\a\x17\x277\n\x17\f\x17\xE\x17\x27A\v"+
		"\x17\x5\x17\x27C\n\x17\x3\x17\x3\x17\x3\x17\x3\x17\a\x17\x282\n\x17\f"+
		"\x17\xE\x17\x285\v\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\a\x17\x28C\n"+
		"\x17\f\x17\xE\x17\x28F\v\x17\x5\x17\x291\n\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\x5\x17\x297\n\x17\x5\x17\x299\n\x17\x3\x18\x5\x18\x29C\n\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x2AF\n\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x5\x18\x2B5\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\a\x18\x2BC\n\x18\f\x18\xE\x18\x2BF\v\x18\x3\x18\x3\x18\x5\x18\x2C3\n"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x2CA\n\x18\f\x18\xE\x18"+
		"\x2CD\v\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x2D5\n\x18"+
		"\f\x18\xE\x18\x2D8\v\x18\x3\x18\x3\x18\a\x18\x2DC\n\x18\f\x18\xE\x18\x2DF"+
		"\v\x18\x3\x18\x3\x18\x3\x18\x5\x18\x2E4\n\x18\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x5\x19\x2EA\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x5\x19\x2F3\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2FA\n\x1A"+
		"\x3\x1A\x3\x1A\x5\x1A\x2FE\n\x1A\x5\x1A\x300\n\x1A\x3\x1B\x3\x1B\x5\x1B"+
		"\x304\n\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x30B\n\x1C\x5\x1C"+
		"\x30D\n\x1C\x3\x1C\x3\x1C\x5\x1C\x311\n\x1C\x3\x1C\x5\x1C\x314\n\x1C\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x5\x1E\x31B\n\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\a\x1E\x320\n\x1E\f\x1E\xE\x1E\x323\v\x1E\x5\x1E\x325\n\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x32D\n\x1E\f\x1E\xE\x1E\x330\v"+
		"\x1E\x5\x1E\x332\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x338\n\x1E\x5"+
		"\x1E\x33A\n\x1E\x3\x1F\x3\x1F\x5\x1F\x33E\n\x1F\x3\x1F\x3\x1F\x3\x1F\a"+
		"\x1F\x343\n\x1F\f\x1F\xE\x1F\x346\v\x1F\x5\x1F\x348\n\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\a\x1F\x34E\n\x1F\f\x1F\xE\x1F\x351\v\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\a\x1F\x358\n\x1F\f\x1F\xE\x1F\x35B\v\x1F\x5\x1F"+
		"\x35D\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x363\n\x1F\x5\x1F\x365"+
		"\n\x1F\x3 \x3 \x5 \x369\n \x3 \x3 \x3 \a \x36E\n \f \xE \x371\v \x3 \x3"+
		" \x3 \x3 \a \x377\n \f \xE \x37A\v \x3 \x5 \x37D\n \x5 \x37F\n \x3 \x3"+
		" \x5 \x383\n \x3 \x3 \x3 \x3 \x3 \a \x38A\n \f \xE \x38D\v \x3 \x3 \x5"+
		" \x391\n \x5 \x393\n \x3 \x3 \x3 \x3 \x3 \a \x39A\n \f \xE \x39D\v \x3"+
		" \x3 \x3 \x3 \x3 \x3 \a \x3A5\n \f \xE \x3A8\v \x3 \x3 \a \x3AC\n \f "+
		"\xE \x3AF\v \x5 \x3B1\n \x3!\x5!\x3B4\n!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3"+
		"!\x3!\x3!\x3!\x5!\x3C1\n!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\a!\x3CD"+
		"\n!\f!\xE!\x3D0\v!\x3!\x3!\x5!\x3D4\n!\x3\"\x5\"\x3D7\n\"\x3\"\x3\"\x3"+
		"\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\x3E4\n\"\x3\"\x3\"\x3"+
		"\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\a\"\x3F0\n\"\f\"\xE\"\x3F3\v\"\x3"+
		"\"\x3\"\x5\"\x3F7\n\"\x3\"\x3\"\x3\"\x3\"\x3\"\a\"\x3FE\n\"\f\"\xE\"\x401"+
		"\v\"\x5\"\x403\n\"\x3\"\x3\"\x3\"\x3\"\x5\"\x409\n\"\x5\"\x40B\n\"\x3"+
		"#\x3#\x3$\x3$\x5$\x411\n$\x3$\a$\x414\n$\f$\xE$\x417\v$\x3%\x6%\x41A\n"+
		"%\r%\xE%\x41B\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x5%\x428\n%\x3&"+
		"\x3&\x5&\x42C\n&\x3&\x3&\x3&\x5&\x431\n&\x3&\x3&\x5&\x435\n&\x3&\x5&\x438"+
		"\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5"+
		"&\x44A\n&\x3&\x3&\x3&\x5&\x44F\n&\x3\'\x3\'\x3\'\x5\'\x454\n\'\x3(\x3"+
		"(\x3(\x3(\x3(\x3(\x5(\x45C\n(\x3(\x3(\x3(\x5(\x461\n(\x3(\x3(\x3(\x3("+
		"\x3(\x3(\x3(\x5(\x46A\n(\x3(\x3(\x3(\a(\x46F\n(\f(\xE(\x472\v(\x3(\x5"+
		"(\x475\n(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x5("+
		"\x485\n(\x3(\x5(\x488\n(\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x490\n(\x3(\x3(\x3"+
		"(\x3(\x3(\x6(\x497\n(\r(\xE(\x498\x3(\x3(\x5(\x49D\n(\x3(\x3(\x3(\x5("+
		"\x4A2\n(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3"+
		"(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x4C0\n(\x3(\x3("+
		"\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x4CC\n(\x3(\x3(\x3(\x5(\x4D1\n(\x3"+
		"(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x4DD\n(\x3(\x3(\x3(\x3(\x5("+
		"\x4E3\n(\x3(\x3(\x3(\x3(\x3(\x5(\x4EA\n(\x3(\x3(\x5(\x4EE\n(\x3(\x3(\x3"+
		"(\x3(\x3(\x3(\a(\x4F6\n(\f(\xE(\x4F9\v(\x5(\x4FB\n(\x3(\x3(\x3(\x3(\x5"+
		"(\x501\n(\x3(\x5(\x504\n(\a(\x506\n(\f(\xE(\x509\v(\x3)\x3)\x3)\x3)\x3"+
		")\x3)\a)\x511\n)\f)\xE)\x514\v)\x3)\x3)\x5)\x518\n)\x3)\x3)\x3)\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x3)\x5)\x524\n)\x3)\x3)\x5)\x528\n)\a)\x52A\n)\f)\xE"+
		")\x52D\v)\x3)\x5)\x530\n)\x3)\x3)\x3)\x3)\x3)\x5)\x537\n)\x5)\x539\n)"+
		"\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x541\n*\x3*\x3*\x3+\x3+\x3+\x5+\x548\n+\x3"+
		"+\x5+\x54B\n+\x3,\x3,\x5,\x54F\n,\x3,\x3,\x3,\x5,\x554\n,\x3,\x3,\x3,"+
		"\x3,\a,\x55A\n,\f,\xE,\x55D\v,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3"+
		",\x3,\x3,\x3,\x3,\a,\x56D\n,\f,\xE,\x570\v,\x3,\x3,\x3,\x5,\x575\n,\x3"+
		"-\x3-\x5-\x579\n-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\a-\x587"+
		"\n-\f-\xE-\x58A\v-\x3.\x3.\x3.\x5.\x58F\n.\x3.\x3.\x3.\x3.\x3.\x3.\x5"+
		".\x597\n.\x3/\x3/\x3/\x5/\x59C\n/\x3/\x5/\x59F\n/\x3\x30\x3\x30\x3\x30"+
		"\x5\x30\x5A4\n\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\a\x31\x5AB\n\x31"+
		"\f\x31\xE\x31\x5AE\v\x31\x3\x31\x3\x31\x5\x31\x5B2\n\x31\x3\x31\x3\x31"+
		"\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x5\x32\x5C0\n\x32\x3\x32\x5\x32\x5C3\n\x32\x5\x32\x5C5\n\x32\x3\x33\x3"+
		"\x33\x3\x33\x5\x33\x5CA\n\x33\x3\x33\x3\x33\x5\x33\x5CE\n\x33\x3\x33\x5"+
		"\x33\x5D1\n\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x5D8\n\x33\x3"+
		"\x33\x3\x33\x3\x33\x3\x33\a\x33\x5DE\n\x33\f\x33\xE\x33\x5E1\v\x33\x3"+
		"\x33\x5\x33\x5E4\n\x33\x3\x33\x3\x33\x5\x33\x5E8\n\x33\x3\x33\x5\x33\x5EB"+
		"\n\x33\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x5F1\n\x33\x3\x33\x5\x33\x5F4"+
		"\n\x33\x5\x33\x5F6\n\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\a\x34\x5FD"+
		"\n\x34\f\x34\xE\x34\x600\v\x34\x3\x35\x3\x35\x5\x35\x604\n\x35\x3\x35"+
		"\x3\x35\x5\x35\x608\n\x35\x3\x35\x3\x35\x5\x35\x60C\n\x35\x3\x35\x5\x35"+
		"\x60F\n\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\a\x36\x618"+
		"\n\x36\f\x36\xE\x36\x61B\v\x36\x3\x36\x3\x36\x5\x36\x61F\n\x36\x3\x37"+
		"\x3\x37\x5\x37\x623\n\x37\x3\x37\x3\x37\x3\x37\a\x37\x628\n\x37\f\x37"+
		"\xE\x37\x62B\v\x37\x3\x37\x3\x37\x3\x37\x3\x37\a\x37\x631\n\x37\f\x37"+
		"\xE\x37\x634\v\x37\x3\x37\x5\x37\x637\n\x37\x5\x37\x639\n\x37\x3\x37\x3"+
		"\x37\x5\x37\x63D\n\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\a\x37\x644\n"+
		"\x37\f\x37\xE\x37\x647\v\x37\x3\x37\x3\x37\x5\x37\x64B\n\x37\x5\x37\x64D"+
		"\n\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\a\x37\x654\n\x37\f\x37\xE\x37"+
		"\x657\v\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\a\x37\x65F\n\x37"+
		"\f\x37\xE\x37\x662\v\x37\x3\x37\x3\x37\a\x37\x666\n\x37\f\x37\xE\x37\x669"+
		"\v\x37\x5\x37\x66B\n\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5\x38\x672"+
		"\n\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\a\x39\x679\n\x39\f\x39\xE\x39"+
		"\x67C\v\x39\x3\x39\x3\x39\x5\x39\x680\n\x39\x3:\x5:\x683\n:\x3:\x3:\x3"+
		";\x3;\x3<\x3<\x3=\x3=\x3>\x3>\x5>\x68F\n>\x3?\x3?\x3@\x3@\x3\x41\x3\x41"+
		"\x3\x42\x3\x42\x3\x43\x3\x43\x3\x44\x3\x44\x3\x45\x3\x45\x3\x46\x3\x46"+
		"\x3G\x3G\x3H\x3H\x3I\x3I\x3J\x3J\x3K\x3K\x3L\x3L\x3M\x3M\x3N\x3N\x3O\x3"+
		"O\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x6B9\nP\x3Q\x3Q\x3R\x3R\x3R\x3R\x3R\x3R"+
		"\x3R\x5R\x6C4\nR\x3R\x2\x2\x3NS\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2"+
		"\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2"+
		"&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2"+
		"\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2"+
		"`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2"+
		"~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92"+
		"\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\x2\x14\x5"+
		"\x2<<GGTT\x4\x2\x31\x31\x44\x44\x4\x2\a\all\x3\x2\x85\x86\x4\x2\x1F\x1F"+
		"@@\x4\x2$$>>\a\x2\x1B\x1BJJSS||\x7F\x7F\x4\x2\t\t\xE\xF\x3\x2\n\v\x3\x2"+
		"\x10\x13\x3\x2\x14\x17\x6\x2OO\x63\x63\x65\x65xx\x4\x2==\x8D\x8D\x5\x2"+
		"\x1B\x1BJJ\x7F\x7F\x6\x2\x36\x38jj\x98\x98\x9A\x9B\x4\x2\n\fhh\x4\x2\x97"+
		"\x97\x9A\x9A\x3\x2\x1B\x96\x7D5\x2\xA7\x3\x2\x2\x2\x4\xAF\x3\x2\x2\x2"+
		"\x6\xC9\x3\x2\x2\x2\b\xEB\x3\x2\x2\x2\n\xFD\x3\x2\x2\x2\f\x106\x3\x2\x2"+
		"\x2\xE\x10E\x3\x2\x2\x2\x10\x118\x3\x2\x2\x2\x12\x12B\x3\x2\x2\x2\x14"+
		"\x14F\x3\x2\x2\x2\x16\x16F\x3\x2\x2\x2\x18\x198\x3\x2\x2\x2\x1A\x1DD\x3"+
		"\x2\x2\x2\x1C\x1F0\x3\x2\x2\x2\x1E\x20E\x3\x2\x2\x2 \x218\x3\x2\x2\x2"+
		"\"\x235\x3\x2\x2\x2$\x23B\x3\x2\x2\x2&\x248\x3\x2\x2\x2(\x255\x3\x2\x2"+
		"\x2*\x262\x3\x2\x2\x2,\x27B\x3\x2\x2\x2.\x29B\x3\x2\x2\x2\x30\x2E5\x3"+
		"\x2\x2\x2\x32\x2F4\x3\x2\x2\x2\x34\x301\x3\x2\x2\x2\x36\x307\x3\x2\x2"+
		"\x2\x38\x315\x3\x2\x2\x2:\x324\x3\x2\x2\x2<\x347\x3\x2\x2\x2>\x3B0\x3"+
		"\x2\x2\x2@\x3B3\x3\x2\x2\x2\x42\x3D6\x3\x2\x2\x2\x44\x40C\x3\x2\x2\x2"+
		"\x46\x40E\x3\x2\x2\x2H\x419\x3\x2\x2\x2J\x42B\x3\x2\x2\x2L\x453\x3\x2"+
		"\x2\x2N\x4A1\x3\x2\x2\x2P\x50A\x3\x2\x2\x2R\x53A\x3\x2\x2\x2T\x544\x3"+
		"\x2\x2\x2V\x54E\x3\x2\x2\x2X\x576\x3\x2\x2\x2Z\x58E\x3\x2\x2\x2\\\x598"+
		"\x3\x2\x2\x2^\x5A3\x3\x2\x2\x2`\x5A5\x3\x2\x2\x2\x62\x5C4\x3\x2\x2\x2"+
		"\x64\x5F5\x3\x2\x2\x2\x66\x5F7\x3\x2\x2\x2h\x60E\x3\x2\x2\x2j\x61E\x3"+
		"\x2\x2\x2l\x66A\x3\x2\x2\x2n\x671\x3\x2\x2\x2p\x673\x3\x2\x2\x2r\x682"+
		"\x3\x2\x2\x2t\x686\x3\x2\x2\x2v\x688\x3\x2\x2\x2x\x68A\x3\x2\x2\x2z\x68E"+
		"\x3\x2\x2\x2|\x690\x3\x2\x2\x2~\x692\x3\x2\x2\x2\x80\x694\x3\x2\x2\x2"+
		"\x82\x696\x3\x2\x2\x2\x84\x698\x3\x2\x2\x2\x86\x69A\x3\x2\x2\x2\x88\x69C"+
		"\x3\x2\x2\x2\x8A\x69E\x3\x2\x2\x2\x8C\x6A0\x3\x2\x2\x2\x8E\x6A2\x3\x2"+
		"\x2\x2\x90\x6A4\x3\x2\x2\x2\x92\x6A6\x3\x2\x2\x2\x94\x6A8\x3\x2\x2\x2"+
		"\x96\x6AA\x3\x2\x2\x2\x98\x6AC\x3\x2\x2\x2\x9A\x6AE\x3\x2\x2\x2\x9C\x6B0"+
		"\x3\x2\x2\x2\x9E\x6B8\x3\x2\x2\x2\xA0\x6BA\x3\x2\x2\x2\xA2\x6C3\x3\x2"+
		"\x2\x2\xA4\xA6\x5\x4\x3\x2\xA5\xA4\x3\x2\x2\x2\xA6\xA9\x3\x2\x2\x2\xA7"+
		"\xA5\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xAA\x3\x2\x2\x2\xA9\xA7\x3\x2"+
		"\x2\x2\xAA\xAB\a\x2\x2\x3\xAB\x3\x3\x2\x2\x2\xAC\xAE\a\x3\x2\x2\xAD\xAC"+
		"\x3\x2\x2\x2\xAE\xB1\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xAF\xB0\x3\x2\x2"+
		"\x2\xB0\xB2\x3\x2\x2\x2\xB1\xAF\x3\x2\x2\x2\xB2\xBB\x5\x6\x4\x2\xB3\xB5"+
		"\a\x3\x2\x2\xB4\xB3\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB4\x3\x2\x2\x2"+
		"\xB6\xB7\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\xBA\x5\x6\x4\x2\xB9\xB4\x3"+
		"\x2\x2\x2\xBA\xBD\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2"+
		"\xBC\xC1\x3\x2\x2\x2\xBD\xBB\x3\x2\x2\x2\xBE\xC0\a\x3\x2\x2\xBF\xBE\x3"+
		"\x2\x2\x2\xC0\xC3\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2"+
		"\xC2\x5\x3\x2\x2\x2\xC3\xC1\x3\x2\x2\x2\xC4\xC7\aI\x2\x2\xC5\xC6\at\x2"+
		"\x2\xC6\xC8\aq\x2\x2\xC7\xC5\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\xCA\x3"+
		"\x2\x2\x2\xC9\xC4\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\xE9\x3\x2\x2\x2"+
		"\xCB\xEA\x5\b\x5\x2\xCC\xEA\x5\n\x6\x2\xCD\xEA\x5\f\a\x2\xCE\xEA\x5\xE"+
		"\b\x2\xCF\xEA\x5\x10\t\x2\xD0\xEA\x5\x12\n\x2\xD1\xEA\x5\x14\v\x2\xD2"+
		"\xEA\x5\x16\f\x2\xD3\xEA\x5\x18\r\x2\xD4\xEA\x5\x1A\xE\x2\xD5\xEA\x5\x1C"+
		"\xF\x2\xD6\xEA\x5\x1E\x10\x2\xD7\xEA\x5 \x11\x2\xD8\xEA\x5\"\x12\x2\xD9"+
		"\xEA\x5$\x13\x2\xDA\xEA\x5&\x14\x2\xDB\xEA\x5(\x15\x2\xDC\xEA\x5*\x16"+
		"\x2\xDD\xEA\x5,\x17\x2\xDE\xEA\x5.\x18\x2\xDF\xEA\x5\x30\x19\x2\xE0\xEA"+
		"\x5\x32\x1A\x2\xE1\xEA\x5\x34\x1B\x2\xE2\xEA\x5\x36\x1C\x2\xE3\xEA\x5"+
		"\x38\x1D\x2\xE4\xEA\x5:\x1E\x2\xE5\xEA\x5<\x1F\x2\xE6\xEA\x5@!\x2\xE7"+
		"\xEA\x5\x42\"\x2\xE8\xEA\x5\x44#\x2\xE9\xCB\x3\x2\x2\x2\xE9\xCC\x3\x2"+
		"\x2\x2\xE9\xCD\x3\x2\x2\x2\xE9\xCE\x3\x2\x2\x2\xE9\xCF\x3\x2\x2\x2\xE9"+
		"\xD0\x3\x2\x2\x2\xE9\xD1\x3\x2\x2\x2\xE9\xD2\x3\x2\x2\x2\xE9\xD3\x3\x2"+
		"\x2\x2\xE9\xD4\x3\x2\x2\x2\xE9\xD5\x3\x2\x2\x2\xE9\xD6\x3\x2\x2\x2\xE9"+
		"\xD7\x3\x2\x2\x2\xE9\xD8\x3\x2\x2\x2\xE9\xD9\x3\x2\x2\x2\xE9\xDA\x3\x2"+
		"\x2\x2\xE9\xDB\x3\x2\x2\x2\xE9\xDC\x3\x2\x2\x2\xE9\xDD\x3\x2\x2\x2\xE9"+
		"\xDE\x3\x2\x2\x2\xE9\xDF\x3\x2\x2\x2\xE9\xE0\x3\x2\x2\x2\xE9\xE1\x3\x2"+
		"\x2\x2\xE9\xE2\x3\x2\x2\x2\xE9\xE3\x3\x2\x2\x2\xE9\xE4\x3\x2\x2\x2\xE9"+
		"\xE5\x3\x2\x2\x2\xE9\xE6\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2\xE9\xE8\x3\x2"+
		"\x2\x2\xEA\a\x3\x2\x2\x2\xEB\xEC\a \x2\x2\xEC\xF0\a\x84\x2\x2\xED\xEE"+
		"\x5\x84\x43\x2\xEE\xEF\a\x4\x2\x2\xEF\xF1\x3\x2\x2\x2\xF0\xED\x3\x2\x2"+
		"\x2\xF0\xF1\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\xFB\x5\x86\x44\x2\xF3"+
		"\xF4\a{\x2\x2\xF4\xF5\a\x88\x2\x2\xF5\xFC\x5\x8A\x46\x2\xF6\xF8\a\x1D"+
		"\x2\x2\xF7\xF9\a\x30\x2\x2\xF8\xF7\x3\x2\x2\x2\xF8\xF9\x3\x2\x2\x2\xF9"+
		"\xFA\x3\x2\x2\x2\xFA\xFC\x5\x46$\x2\xFB\xF3\x3\x2\x2\x2\xFB\xF6\x3\x2"+
		"\x2\x2\xFC\t\x3\x2\x2\x2\xFD\x104\a!\x2\x2\xFE\x105\x5\x84\x43\x2\xFF"+
		"\x105\x5\x88\x45\x2\x100\x101\x5\x84\x43\x2\x101\x102\a\x4\x2\x2\x102"+
		"\x103\x5\x88\x45\x2\x103\x105\x3\x2\x2\x2\x104\xFE\x3\x2\x2\x2\x104\xFF"+
		"\x3\x2\x2\x2\x104\x100\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2\x105\v\x3\x2"+
		"\x2\x2\x106\x108\a%\x2\x2\x107\x109\a\x39\x2\x2\x108\x107\x3\x2\x2\x2"+
		"\x108\x109\x3\x2\x2\x2\x109\x10A\x3\x2\x2\x2\x10A\x10B\x5N(\x2\x10B\x10C"+
		"\a#\x2\x2\x10C\x10D\x5\x84\x43\x2\x10D\r\x3\x2\x2\x2\x10E\x110\a(\x2\x2"+
		"\x10F\x111\t\x2\x2\x2\x110\x10F\x3\x2\x2\x2\x110\x111\x3\x2\x2\x2\x111"+
		"\x116\x3\x2\x2\x2\x112\x114\a\x89\x2\x2\x113\x115\x5\xA0Q\x2\x114\x113"+
		"\x3\x2\x2\x2\x114\x115\x3\x2\x2\x2\x115\x117\x3\x2\x2\x2\x116\x112\x3"+
		"\x2\x2\x2\x116\x117\x3\x2\x2\x2\x117\xF\x3\x2\x2\x2\x118\x11D\t\x3\x2"+
		"\x2\x119\x11B\a\x89\x2\x2\x11A\x11C\x5\xA0Q\x2\x11B\x11A\x3\x2\x2\x2\x11B"+
		"\x11C\x3\x2\x2\x2\x11C\x11E\x3\x2\x2\x2\x11D\x119\x3\x2\x2\x2\x11D\x11E"+
		"\x3\x2\x2\x2\x11E\x11\x3\x2\x2\x2\x11F\x121\a\x95\x2\x2\x120\x122\av\x2"+
		"\x2\x121\x120\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122\x123\x3\x2\x2\x2"+
		"\x123\x128\x5`\x31\x2\x124\x125\a\a\x2\x2\x125\x127\x5`\x31\x2\x126\x124"+
		"\x3\x2\x2\x2\x127\x12A\x3\x2\x2\x2\x128\x126\x3\x2\x2\x2\x128\x129\x3"+
		"\x2\x2\x2\x129\x12C\x3\x2\x2\x2\x12A\x128\x3\x2\x2\x2\x12B\x11F\x3\x2"+
		"\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C\x12D\x3\x2\x2\x2\x12D\x137\x5l\x37\x2"+
		"\x12E\x130\a\x8B\x2\x2\x12F\x131\a\x1F\x2\x2\x130\x12F\x3\x2\x2\x2\x130"+
		"\x131\x3\x2\x2\x2\x131\x135\x3\x2\x2\x2\x132\x135\a\\\x2\x2\x133\x135"+
		"\a\x46\x2\x2\x134\x12E\x3\x2\x2\x2\x134\x132\x3\x2\x2\x2\x134\x133\x3"+
		"\x2\x2\x2\x135\x136\x3\x2\x2\x2\x136\x138\x5l\x37\x2\x137\x134\x3\x2\x2"+
		"\x2\x138\x139\x3\x2\x2\x2\x139\x137\x3\x2\x2\x2\x139\x13A\x3\x2\x2\x2"+
		"\x13A\x145\x3\x2\x2\x2\x13B\x13C\ao\x2\x2\x13C\x13D\a*\x2\x2\x13D\x142"+
		"\x5\\/\x2\x13E\x13F\a\a\x2\x2\x13F\x141\x5\\/\x2\x140\x13E\x3\x2\x2\x2"+
		"\x141\x144\x3\x2\x2\x2\x142\x140\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2\x143"+
		"\x146\x3\x2\x2\x2\x144\x142\x3\x2\x2\x2\x145\x13B\x3\x2\x2\x2\x145\x146"+
		"\x3\x2\x2\x2\x146\x14D\x3\x2\x2\x2\x147\x148\a\x64\x2\x2\x148\x14B\x5"+
		"N(\x2\x149\x14A\t\x4\x2\x2\x14A\x14C\x5N(\x2\x14B\x149\x3\x2\x2\x2\x14B"+
		"\x14C\x3\x2\x2\x2\x14C\x14E\x3\x2\x2\x2\x14D\x147\x3\x2\x2\x2\x14D\x14E"+
		"\x3\x2\x2\x2\x14E\x13\x3\x2\x2\x2\x14F\x151\a\x34\x2\x2\x150\x152\a\x8C"+
		"\x2\x2\x151\x150\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152\x153\x3\x2\x2"+
		"\x2\x153\x157\aV\x2\x2\x154\x155\aR\x2\x2\x155\x156\ah\x2\x2\x156\x158"+
		"\aH\x2\x2\x157\x154\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158\x15C\x3\x2"+
		"\x2\x2\x159\x15A\x5\x84\x43\x2\x15A\x15B\a\x4\x2\x2\x15B\x15D\x3\x2\x2"+
		"\x2\x15C\x159\x3\x2\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D\x15E\x3\x2\x2\x2"+
		"\x15E\x15F\x5\x92J\x2\x15F\x160\am\x2\x2\x160\x161\x5\x86\x44\x2\x161"+
		"\x162\a\x5\x2\x2\x162\x167\x5T+\x2\x163\x164\a\a\x2\x2\x164\x166\x5T+"+
		"\x2\x165\x163\x3\x2\x2\x2\x166\x169\x3\x2\x2\x2\x167\x165\x3\x2\x2\x2"+
		"\x167\x168\x3\x2\x2\x2\x168\x16A\x3\x2\x2\x2\x169\x167\x3\x2\x2\x2\x16A"+
		"\x16D\a\x6\x2\x2\x16B\x16C\a\x94\x2\x2\x16C\x16E\x5N(\x2\x16D\x16B\x3"+
		"\x2\x2\x2\x16D\x16E\x3\x2\x2\x2\x16E\x15\x3\x2\x2\x2\x16F\x171\a\x34\x2"+
		"\x2\x170\x172\t\x5\x2\x2\x171\x170\x3\x2\x2\x2\x171\x172\x3\x2\x2\x2\x172"+
		"\x173\x3\x2\x2\x2\x173\x177\a\x84\x2\x2\x174\x175\aR\x2\x2\x175\x176\a"+
		"h\x2\x2\x176\x178\aH\x2\x2\x177\x174\x3\x2\x2\x2\x177\x178\x3\x2\x2\x2"+
		"\x178\x17C\x3\x2\x2\x2\x179\x17A\x5\x84\x43\x2\x17A\x17B\a\x4\x2\x2\x17B"+
		"\x17D\x3\x2\x2\x2\x17C\x179\x3\x2\x2\x2\x17C\x17D\x3\x2\x2\x2\x17D\x17E"+
		"\x3\x2\x2\x2\x17E\x196\x5\x86\x44\x2\x17F\x180\a\x5\x2\x2\x180\x185\x5"+
		"\x46$\x2\x181\x182\a\a\x2\x2\x182\x184\x5\x46$\x2\x183\x181\x3\x2\x2\x2"+
		"\x184\x187\x3\x2\x2\x2\x185\x183\x3\x2\x2\x2\x185\x186\x3\x2\x2\x2\x186"+
		"\x18C\x3\x2\x2\x2\x187\x185\x3\x2\x2\x2\x188\x189\a\a\x2\x2\x189\x18B"+
		"\x5V,\x2\x18A\x188\x3\x2\x2\x2\x18B\x18E\x3\x2\x2\x2\x18C\x18A\x3\x2\x2"+
		"\x2\x18C\x18D\x3\x2\x2\x2\x18D\x18F\x3\x2\x2\x2\x18E\x18C\x3\x2\x2\x2"+
		"\x18F\x192\a\x6\x2\x2\x190\x191\a\x96\x2\x2\x191\x193\a\x97\x2\x2\x192"+
		"\x190\x3\x2\x2\x2\x192\x193\x3\x2\x2\x2\x193\x197\x3\x2\x2\x2\x194\x195"+
		"\a#\x2\x2\x195\x197\x5<\x1F\x2\x196\x17F\x3\x2\x2\x2\x196\x194\x3\x2\x2"+
		"\x2\x197\x17\x3\x2\x2\x2\x198\x19A\a\x34\x2\x2\x199\x19B\t\x5\x2\x2\x19A"+
		"\x199\x3\x2\x2\x2\x19A\x19B\x3\x2\x2\x2\x19B\x19C\x3\x2\x2\x2\x19C\x1A0"+
		"\a\x8A\x2\x2\x19D\x19E\aR\x2\x2\x19E\x19F\ah\x2\x2\x19F\x1A1\aH\x2\x2"+
		"\x1A0\x19D\x3\x2\x2\x2\x1A0\x1A1\x3\x2\x2\x2\x1A1\x1A5\x3\x2\x2\x2\x1A2"+
		"\x1A3\x5\x84\x43\x2\x1A3\x1A4\a\x4\x2\x2\x1A4\x1A6\x3\x2\x2\x2\x1A5\x1A2"+
		"\x3\x2\x2\x2\x1A5\x1A6\x3\x2\x2\x2\x1A6\x1A7\x3\x2\x2\x2\x1A7\x1AC\x5"+
		"\x94K\x2\x1A8\x1AD\a\'\x2\x2\x1A9\x1AD\a\x1E\x2\x2\x1AA\x1AB\a[\x2\x2"+
		"\x1AB\x1AD\ak\x2\x2\x1AC\x1A8\x3\x2\x2\x2\x1AC\x1A9\x3\x2\x2\x2\x1AC\x1AA"+
		"\x3\x2\x2\x2\x1AC\x1AD\x3\x2\x2\x2\x1AD\x1BC\x3\x2\x2\x2\x1AE\x1BD\a="+
		"\x2\x2\x1AF\x1BD\aZ\x2\x2\x1B0\x1BA\a\x8D\x2\x2\x1B1\x1B2\ak\x2\x2\x1B2"+
		"\x1B7\x5\x8CG\x2\x1B3\x1B4\a\a\x2\x2\x1B4\x1B6\x5\x8CG\x2\x1B5\x1B3\x3"+
		"\x2\x2\x2\x1B6\x1B9\x3\x2\x2\x2\x1B7\x1B5\x3\x2\x2\x2\x1B7\x1B8\x3\x2"+
		"\x2\x2\x1B8\x1BB\x3\x2\x2\x2\x1B9\x1B7\x3\x2\x2\x2\x1BA\x1B1\x3\x2\x2"+
		"\x2\x1BA\x1BB\x3\x2\x2\x2\x1BB\x1BD\x3\x2\x2\x2\x1BC\x1AE\x3\x2\x2\x2"+
		"\x1BC\x1AF\x3\x2\x2\x2\x1BC\x1B0\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE"+
		"\x1C2\am\x2\x2\x1BF\x1C0\x5\x84\x43\x2\x1C0\x1C1\a\x4\x2\x2\x1C1\x1C3"+
		"\x3\x2\x2\x2\x1C2\x1BF\x3\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3\x1C4\x3"+
		"\x2\x2\x2\x1C4\x1C8\x5\x86\x44\x2\x1C5\x1C6\aK\x2\x2\x1C6\x1C7\a\x42\x2"+
		"\x2\x1C7\x1C9\a\x80\x2\x2\x1C8\x1C5\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2"+
		"\x1C9\x1CC\x3\x2\x2\x2\x1CA\x1CB\a\x93\x2\x2\x1CB\x1CD\x5N(\x2\x1CC\x1CA"+
		"\x3\x2\x2\x2\x1CC\x1CD\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE\x1D7\a("+
		"\x2\x2\x1CF\x1D4\x5@!\x2\x1D0\x1D4\x5.\x18\x2\x1D1\x1D4\x5\x1E\x10\x2"+
		"\x1D2\x1D4\x5<\x1F\x2\x1D3\x1CF\x3\x2\x2\x2\x1D3\x1D0\x3\x2\x2\x2\x1D3"+
		"\x1D1\x3\x2\x2\x2\x1D3\x1D2\x3\x2\x2\x2\x1D4\x1D5\x3\x2\x2\x2\x1D5\x1D6"+
		"\a\x3\x2\x2\x1D6\x1D8\x3\x2\x2\x2\x1D7\x1D3\x3\x2\x2\x2\x1D8\x1D9\x3\x2"+
		"\x2\x2\x1D9\x1D7\x3\x2\x2\x2\x1D9\x1DA\x3\x2\x2\x2\x1DA\x1DB\x3\x2\x2"+
		"\x2\x1DB\x1DC\a\x44\x2\x2\x1DC\x19\x3\x2\x2\x2\x1DD\x1DF\a\x34\x2\x2\x1DE"+
		"\x1E0\t\x5\x2\x2\x1DF\x1DE\x3\x2\x2\x2\x1DF\x1E0\x3\x2\x2\x2\x1E0\x1E1"+
		"\x3\x2\x2\x2\x1E1\x1E5\a\x91\x2\x2\x1E2\x1E3\aR\x2\x2\x1E3\x1E4\ah\x2"+
		"\x2\x1E4\x1E6\aH\x2\x2\x1E5\x1E2\x3\x2\x2\x2\x1E5\x1E6\x3\x2\x2\x2\x1E6"+
		"\x1EA\x3\x2\x2\x2\x1E7\x1E8\x5\x84\x43\x2\x1E8\x1E9\a\x4\x2\x2\x1E9\x1EB"+
		"\x3\x2\x2\x2\x1EA\x1E7\x3\x2\x2\x2\x1EA\x1EB\x3\x2\x2\x2\x1EB\x1EC\x3"+
		"\x2\x2\x2\x1EC\x1ED\x5\x96L\x2\x1ED\x1EE\a#\x2\x2\x1EE\x1EF\x5<\x1F\x2"+
		"\x1EF\x1B\x3\x2\x2\x2\x1F0\x1F1\a\x34\x2\x2\x1F1\x1F2\a\x92\x2\x2\x1F2"+
		"\x1F6\a\x84\x2\x2\x1F3\x1F4\aR\x2\x2\x1F4\x1F5\ah\x2\x2\x1F5\x1F7\aH\x2"+
		"\x2\x1F6\x1F3\x3\x2\x2\x2\x1F6\x1F7\x3\x2\x2\x2\x1F7\x1FB\x3\x2\x2\x2"+
		"\x1F8\x1F9\x5\x84\x43\x2\x1F9\x1FA\a\x4\x2\x2\x1FA\x1FC\x3\x2\x2\x2\x1FB"+
		"\x1F8\x3\x2\x2\x2\x1FB\x1FC\x3\x2\x2\x2\x1FC\x1FD\x3\x2\x2\x2\x1FD\x1FE"+
		"\x5\x86\x44\x2\x1FE\x1FF\a\x8E\x2\x2\x1FF\x20B\x5\x98M\x2\x200\x201\a"+
		"\x5\x2\x2\x201\x206\x5z>\x2\x202\x203\a\a\x2\x2\x203\x205\x5z>\x2\x204"+
		"\x202\x3\x2\x2\x2\x205\x208\x3\x2\x2\x2\x206\x204\x3\x2\x2\x2\x206\x207"+
		"\x3\x2\x2\x2\x207\x209\x3\x2\x2\x2\x208\x206\x3\x2\x2\x2\x209\x20A\a\x6"+
		"\x2\x2\x20A\x20C\x3\x2\x2\x2\x20B\x200\x3\x2\x2\x2\x20B\x20C\x3\x2\x2"+
		"\x2\x20C\x1D\x3\x2\x2\x2\x20D\x20F\x5X-\x2\x20E\x20D\x3\x2\x2\x2\x20E"+
		"\x20F\x3\x2\x2\x2\x20F\x210\x3\x2\x2\x2\x210\x211\a=\x2\x2\x211\x212\a"+
		"M\x2\x2\x212\x215\x5Z.\x2\x213\x214\a\x94\x2\x2\x214\x216\x5N(\x2\x215"+
		"\x213\x3\x2\x2\x2\x215\x216\x3\x2\x2\x2\x216\x1F\x3\x2\x2\x2\x217\x219"+
		"\x5X-\x2\x218\x217\x3\x2\x2\x2\x218\x219\x3\x2\x2\x2\x219\x21A\x3\x2\x2"+
		"\x2\x21A\x21B\a=\x2\x2\x21B\x21C\aM\x2\x2\x21C\x21F\x5Z.\x2\x21D\x21E"+
		"\a\x94\x2\x2\x21E\x220\x5N(\x2\x21F\x21D\x3\x2\x2\x2\x21F\x220\x3\x2\x2"+
		"\x2\x220\x233\x3\x2\x2\x2\x221\x222\ao\x2\x2\x222\x223\a*\x2\x2\x223\x228"+
		"\x5\\/\x2\x224\x225\a\a\x2\x2\x225\x227\x5\\/\x2\x226\x224\x3\x2\x2\x2"+
		"\x227\x22A\x3\x2\x2\x2\x228\x226\x3\x2\x2\x2\x228\x229\x3\x2\x2\x2\x229"+
		"\x22C\x3\x2\x2\x2\x22A\x228\x3\x2\x2\x2\x22B\x221\x3\x2\x2\x2\x22B\x22C"+
		"\x3\x2\x2\x2\x22C\x22D\x3\x2\x2\x2\x22D\x22E\a\x64\x2\x2\x22E\x231\x5"+
		"N(\x2\x22F\x230\t\x4\x2\x2\x230\x232\x5N(\x2\x231\x22F\x3\x2\x2\x2\x231"+
		"\x232\x3\x2\x2\x2\x232\x234\x3\x2\x2\x2\x233\x22B\x3\x2\x2\x2\x233\x234"+
		"\x3\x2\x2\x2\x234!\x3\x2\x2\x2\x235\x237\a?\x2\x2\x236\x238\a\x39\x2\x2"+
		"\x237\x236\x3\x2\x2\x2\x237\x238\x3\x2\x2\x2\x238\x239\x3\x2\x2\x2\x239"+
		"\x23A\x5\x84\x43\x2\x23A#\x3\x2\x2\x2\x23B\x23C\a\x41\x2\x2\x23C\x23F"+
		"\aV\x2\x2\x23D\x23E\aR\x2\x2\x23E\x240\aH\x2\x2\x23F\x23D\x3\x2\x2\x2"+
		"\x23F\x240\x3\x2\x2\x2\x240\x244\x3\x2\x2\x2\x241\x242\x5\x84\x43\x2\x242"+
		"\x243\a\x4\x2\x2\x243\x245\x3\x2\x2\x2\x244\x241\x3\x2\x2\x2\x244\x245"+
		"\x3\x2\x2\x2\x245\x246\x3\x2\x2\x2\x246\x247\x5\x92J\x2\x247%\x3\x2\x2"+
		"\x2\x248\x249\a\x41\x2\x2\x249\x24C\a\x84\x2\x2\x24A\x24B\aR\x2\x2\x24B"+
		"\x24D\aH\x2\x2\x24C\x24A\x3\x2\x2\x2\x24C\x24D\x3\x2\x2\x2\x24D\x251\x3"+
		"\x2\x2\x2\x24E\x24F\x5\x84\x43\x2\x24F\x250\a\x4\x2\x2\x250\x252\x3\x2"+
		"\x2\x2\x251\x24E\x3\x2\x2\x2\x251\x252\x3\x2\x2\x2\x252\x253\x3\x2\x2"+
		"\x2\x253\x254\x5\x86\x44\x2\x254\'\x3\x2\x2\x2\x255\x256\a\x41\x2\x2\x256"+
		"\x259\a\x8A\x2\x2\x257\x258\aR\x2\x2\x258\x25A\aH\x2\x2\x259\x257\x3\x2"+
		"\x2\x2\x259\x25A\x3\x2\x2\x2\x25A\x25E\x3\x2\x2\x2\x25B\x25C\x5\x84\x43"+
		"\x2\x25C\x25D\a\x4\x2\x2\x25D\x25F\x3\x2\x2\x2\x25E\x25B\x3\x2\x2\x2\x25E"+
		"\x25F\x3\x2\x2\x2\x25F\x260\x3\x2\x2\x2\x260\x261\x5\x94K\x2\x261)\x3"+
		"\x2\x2\x2\x262\x263\a\x41\x2\x2\x263\x266\a\x91\x2\x2\x264\x265\aR\x2"+
		"\x2\x265\x267\aH\x2\x2\x266\x264\x3\x2\x2\x2\x266\x267\x3\x2\x2\x2\x267"+
		"\x26B\x3\x2\x2\x2\x268\x269\x5\x84\x43\x2\x269\x26A\a\x4\x2\x2\x26A\x26C"+
		"\x3\x2\x2\x2\x26B\x268\x3\x2\x2\x2\x26B\x26C\x3\x2\x2\x2\x26C\x26D\x3"+
		"\x2\x2\x2\x26D\x26E\x5\x96L\x2\x26E+\x3\x2\x2\x2\x26F\x271\a\x95\x2\x2"+
		"\x270\x272\av\x2\x2\x271\x270\x3\x2\x2\x2\x271\x272\x3\x2\x2\x2\x272\x273"+
		"\x3\x2\x2\x2\x273\x278\x5`\x31\x2\x274\x275\a\a\x2\x2\x275\x277\x5`\x31"+
		"\x2\x276\x274\x3\x2\x2\x2\x277\x27A\x3\x2\x2\x2\x278\x276\x3\x2\x2\x2"+
		"\x278\x279\x3\x2\x2\x2\x279\x27C\x3\x2\x2\x2\x27A\x278\x3\x2\x2\x2\x27B"+
		"\x26F\x3\x2\x2\x2\x27B\x27C\x3\x2\x2\x2\x27C\x27D\x3\x2\x2\x2\x27D\x283"+
		"\x5l\x37\x2\x27E\x27F\x5n\x38\x2\x27F\x280\x5l\x37\x2\x280\x282\x3\x2"+
		"\x2\x2\x281\x27E\x3\x2\x2\x2\x282\x285\x3\x2\x2\x2\x283\x281\x3\x2\x2"+
		"\x2\x283\x284\x3\x2\x2\x2\x284\x290\x3\x2\x2\x2\x285\x283\x3\x2\x2\x2"+
		"\x286\x287\ao\x2\x2\x287\x288\a*\x2\x2\x288\x28D\x5\\/\x2\x289\x28A\a"+
		"\a\x2\x2\x28A\x28C\x5\\/\x2\x28B\x289\x3\x2\x2\x2\x28C\x28F\x3\x2\x2\x2"+
		"\x28D\x28B\x3\x2\x2\x2\x28D\x28E\x3\x2\x2\x2\x28E\x291\x3\x2\x2\x2\x28F"+
		"\x28D\x3\x2\x2\x2\x290\x286\x3\x2\x2\x2\x290\x291\x3\x2\x2\x2\x291\x298"+
		"\x3\x2\x2\x2\x292\x293\a\x64\x2\x2\x293\x296\x5N(\x2\x294\x295\t\x4\x2"+
		"\x2\x295\x297\x5N(\x2\x296\x294\x3\x2\x2\x2\x296\x297\x3\x2\x2\x2\x297"+
		"\x299\x3\x2\x2\x2\x298\x292\x3\x2\x2\x2\x298\x299\x3\x2\x2\x2\x299-\x3"+
		"\x2\x2\x2\x29A\x29C\x5X-\x2\x29B\x29A\x3\x2\x2\x2\x29B\x29C\x3\x2\x2\x2"+
		"\x29C\x2AE\x3\x2\x2\x2\x29D\x2AF\aZ\x2\x2\x29E\x2AF\a|\x2\x2\x29F\x2A0"+
		"\aZ\x2\x2\x2A0\x2A1\an\x2\x2\x2A1\x2AF\a|\x2\x2\x2A2\x2A3\aZ\x2\x2\x2A3"+
		"\x2A4\an\x2\x2\x2A4\x2AF\a\x7F\x2\x2\x2A5\x2A6\aZ\x2\x2\x2A6\x2A7\an\x2"+
		"\x2\x2A7\x2AF\a\x1B\x2\x2\x2A8\x2A9\aZ\x2\x2\x2A9\x2AA\an\x2\x2\x2AA\x2AF"+
		"\aJ\x2\x2\x2AB\x2AC\aZ\x2\x2\x2AC\x2AD\an\x2\x2\x2AD\x2AF\aS\x2\x2\x2AE"+
		"\x29D\x3\x2\x2\x2\x2AE\x29E\x3\x2\x2\x2\x2AE\x29F\x3\x2\x2\x2\x2AE\x2A2"+
		"\x3\x2\x2\x2\x2AE\x2A5\x3\x2\x2\x2\x2AE\x2A8\x3\x2\x2\x2\x2AE\x2AB\x3"+
		"\x2\x2\x2\x2AF\x2B0\x3\x2\x2\x2\x2B0\x2B4\a]\x2\x2\x2B1\x2B2\x5\x84\x43"+
		"\x2\x2B2\x2B3\a\x4\x2\x2\x2B3\x2B5\x3\x2\x2\x2\x2B4\x2B1\x3\x2\x2\x2\x2B4"+
		"\x2B5\x3\x2\x2\x2\x2B5\x2B6\x3\x2\x2\x2\x2B6\x2C2\x5\x86\x44\x2\x2B7\x2B8"+
		"\a\x5\x2\x2\x2B8\x2BD\x5\x8CG\x2\x2B9\x2BA\a\a\x2\x2\x2BA\x2BC\x5\x8C"+
		"G\x2\x2BB\x2B9\x3\x2\x2\x2\x2BC\x2BF\x3\x2\x2\x2\x2BD\x2BB\x3\x2\x2\x2"+
		"\x2BD\x2BE\x3\x2\x2\x2\x2BE\x2C0\x3\x2\x2\x2\x2BF\x2BD\x3\x2\x2\x2\x2C0"+
		"\x2C1\a\x6\x2\x2\x2C1\x2C3\x3\x2\x2\x2\x2C2\x2B7\x3\x2\x2\x2\x2C2\x2C3"+
		"\x3\x2\x2\x2\x2C3\x2E3\x3\x2\x2\x2\x2C4\x2C5\a\x90\x2\x2\x2C5\x2C6\a\x5"+
		"\x2\x2\x2C6\x2CB\x5N(\x2\x2C7\x2C8\a\a\x2\x2\x2C8\x2CA\x5N(\x2\x2C9\x2C7"+
		"\x3\x2\x2\x2\x2CA\x2CD\x3\x2\x2\x2\x2CB\x2C9\x3\x2\x2\x2\x2CB\x2CC\x3"+
		"\x2\x2\x2\x2CC\x2CE\x3\x2\x2\x2\x2CD\x2CB\x3\x2\x2\x2\x2CE\x2DD\a\x6\x2"+
		"\x2\x2CF\x2D0\a\a\x2\x2\x2D0\x2D1\a\x5\x2\x2\x2D1\x2D6\x5N(\x2\x2D2\x2D3"+
		"\a\a\x2\x2\x2D3\x2D5\x5N(\x2\x2D4\x2D2\x3\x2\x2\x2\x2D5\x2D8\x3\x2\x2"+
		"\x2\x2D6\x2D4\x3\x2\x2\x2\x2D6\x2D7\x3\x2\x2\x2\x2D7\x2D9\x3\x2\x2\x2"+
		"\x2D8\x2D6\x3\x2\x2\x2\x2D9\x2DA\a\x6\x2\x2\x2DA\x2DC\x3\x2\x2\x2\x2DB"+
		"\x2CF\x3\x2\x2\x2\x2DC\x2DF\x3\x2\x2\x2\x2DD\x2DB\x3\x2\x2\x2\x2DD\x2DE"+
		"\x3\x2\x2\x2\x2DE\x2E4\x3\x2\x2\x2\x2DF\x2DD\x3\x2\x2\x2\x2E0\x2E4\x5"+
		"<\x1F\x2\x2E1\x2E2\a:\x2\x2\x2E2\x2E4\a\x90\x2\x2\x2E3\x2C4\x3\x2\x2\x2"+
		"\x2E3\x2E0\x3\x2\x2\x2\x2E3\x2E1\x3\x2\x2\x2\x2E4/\x3\x2\x2\x2\x2E5\x2E9"+
		"\ar\x2\x2\x2E6\x2E7\x5\x84\x43\x2\x2E7\x2E8\a\x4\x2\x2\x2E8\x2EA\x3\x2"+
		"\x2\x2\x2E9\x2E6\x3\x2\x2\x2\x2E9\x2EA\x3\x2\x2\x2\x2EA\x2EB\x3\x2\x2"+
		"\x2\x2EB\x2F2\x5\x9AN\x2\x2EC\x2ED\a\b\x2\x2\x2ED\x2F3\x5^\x30\x2\x2EE"+
		"\x2EF\a\x5\x2\x2\x2EF\x2F0\x5^\x30\x2\x2F0\x2F1\a\x6\x2\x2\x2F1\x2F3\x3"+
		"\x2\x2\x2\x2F2\x2EC\x3\x2\x2\x2\x2F2\x2EE\x3\x2\x2\x2\x2F2\x2F3\x3\x2"+
		"\x2\x2\x2F3\x31\x3\x2\x2\x2\x2F4\x2FF\ay\x2\x2\x2F5\x300\x5\x8EH\x2\x2F6"+
		"\x2F7\x5\x84\x43\x2\x2F7\x2F8\a\x4\x2\x2\x2F8\x2FA\x3\x2\x2\x2\x2F9\x2F6"+
		"\x3\x2\x2\x2\x2F9\x2FA\x3\x2\x2\x2\x2FA\x2FD\x3\x2\x2\x2\x2FB\x2FE\x5"+
		"\x86\x44\x2\x2FC\x2FE\x5\x92J\x2\x2FD\x2FB\x3\x2\x2\x2\x2FD\x2FC\x3\x2"+
		"\x2\x2\x2FE\x300\x3\x2\x2\x2\x2FF\x2F5\x3\x2\x2\x2\x2FF\x2F9\x3\x2\x2"+
		"\x2\x2FF\x300\x3\x2\x2\x2\x300\x33\x3\x2\x2\x2\x301\x303\az\x2\x2\x302"+
		"\x304\a\x81\x2\x2\x303\x302\x3\x2\x2\x2\x303\x304\x3\x2\x2\x2\x304\x305"+
		"\x3\x2\x2\x2\x305\x306\x5\x9CO\x2\x306\x35\x3\x2\x2\x2\x307\x30C\a\x7F"+
		"\x2\x2\x308\x30A\a\x89\x2\x2\x309\x30B\x5\xA0Q\x2\x30A\x309\x3\x2\x2\x2"+
		"\x30A\x30B\x3\x2\x2\x2\x30B\x30D\x3\x2\x2\x2\x30C\x308\x3\x2\x2\x2\x30C"+
		"\x30D\x3\x2\x2\x2\x30D\x313\x3\x2\x2\x2\x30E\x310\a\x88\x2\x2\x30F\x311"+
		"\a\x81\x2\x2\x310\x30F\x3\x2\x2\x2\x310\x311\x3\x2\x2\x2\x311\x312\x3"+
		"\x2\x2\x2\x312\x314\x5\x9CO\x2\x313\x30E\x3\x2\x2\x2\x313\x314\x3\x2\x2"+
		"\x2\x314\x37\x3\x2\x2\x2\x315\x316\a\x81\x2\x2\x316\x317\x5\x9CO\x2\x317"+
		"\x39\x3\x2\x2\x2\x318\x31A\a\x95\x2\x2\x319\x31B\av\x2\x2\x31A\x319\x3"+
		"\x2\x2\x2\x31A\x31B\x3\x2\x2\x2\x31B\x31C\x3\x2\x2\x2\x31C\x321\x5`\x31"+
		"\x2\x31D\x31E\a\a\x2\x2\x31E\x320\x5`\x31\x2\x31F\x31D\x3\x2\x2\x2\x320"+
		"\x323\x3\x2\x2\x2\x321\x31F\x3\x2\x2\x2\x321\x322\x3\x2\x2\x2\x322\x325"+
		"\x3\x2\x2\x2\x323\x321\x3\x2\x2\x2\x324\x318\x3\x2\x2\x2\x324\x325\x3"+
		"\x2\x2\x2\x325\x326\x3\x2\x2\x2\x326\x331\x5l\x37\x2\x327\x328\ao\x2\x2"+
		"\x328\x329\a*\x2\x2\x329\x32E\x5\\/\x2\x32A\x32B\a\a\x2\x2\x32B\x32D\x5"+
		"\\/\x2\x32C\x32A\x3\x2\x2\x2\x32D\x330\x3\x2\x2\x2\x32E\x32C\x3\x2\x2"+
		"\x2\x32E\x32F\x3\x2\x2\x2\x32F\x332\x3\x2\x2\x2\x330\x32E\x3\x2\x2\x2"+
		"\x331\x327\x3\x2\x2\x2\x331\x332\x3\x2\x2\x2\x332\x339\x3\x2\x2\x2\x333"+
		"\x334\a\x64\x2\x2\x334\x337\x5N(\x2\x335\x336\t\x4\x2\x2\x336\x338\x5"+
		"N(\x2\x337\x335\x3\x2\x2\x2\x337\x338\x3\x2\x2\x2\x338\x33A\x3\x2\x2\x2"+
		"\x339\x333\x3\x2\x2\x2\x339\x33A\x3\x2\x2\x2\x33A;\x3\x2\x2\x2\x33B\x33D"+
		"\a\x95\x2\x2\x33C\x33E\av\x2\x2\x33D\x33C\x3\x2\x2\x2\x33D\x33E\x3\x2"+
		"\x2\x2\x33E\x33F\x3\x2\x2\x2\x33F\x344\x5`\x31\x2\x340\x341\a\a\x2\x2"+
		"\x341\x343\x5`\x31\x2\x342\x340\x3\x2\x2\x2\x343\x346\x3\x2\x2\x2\x344"+
		"\x342\x3\x2\x2\x2\x344\x345\x3\x2\x2\x2\x345\x348\x3\x2\x2\x2\x346\x344"+
		"\x3\x2\x2\x2\x347\x33B\x3\x2\x2\x2\x347\x348\x3\x2\x2\x2\x348\x349\x3"+
		"\x2\x2\x2\x349\x34F\x5> \x2\x34A\x34B\x5n\x38\x2\x34B\x34C\x5> \x2\x34C"+
		"\x34E\x3\x2\x2\x2\x34D\x34A\x3\x2\x2\x2\x34E\x351\x3\x2\x2\x2\x34F\x34D"+
		"\x3\x2\x2\x2\x34F\x350\x3\x2\x2\x2\x350\x35C\x3\x2\x2\x2\x351\x34F\x3"+
		"\x2\x2\x2\x352\x353\ao\x2\x2\x353\x354\a*\x2\x2\x354\x359\x5\\/\x2\x355"+
		"\x356\a\a\x2\x2\x356\x358\x5\\/\x2\x357\x355\x3\x2\x2\x2\x358\x35B\x3"+
		"\x2\x2\x2\x359\x357\x3\x2\x2\x2\x359\x35A\x3\x2\x2\x2\x35A\x35D\x3\x2"+
		"\x2\x2\x35B\x359\x3\x2\x2\x2\x35C\x352\x3\x2\x2\x2\x35C\x35D\x3\x2\x2"+
		"\x2\x35D\x364\x3\x2\x2\x2\x35E\x35F\a\x64\x2\x2\x35F\x362\x5N(\x2\x360"+
		"\x361\t\x4\x2\x2\x361\x363\x5N(\x2\x362\x360\x3\x2\x2\x2\x362\x363\x3"+
		"\x2\x2\x2\x363\x365\x3\x2\x2\x2\x364\x35E\x3\x2\x2\x2\x364\x365\x3\x2"+
		"\x2\x2\x365=\x3\x2\x2\x2\x366\x368\a\x82\x2\x2\x367\x369\t\x6\x2\x2\x368"+
		"\x367\x3\x2\x2\x2\x368\x369\x3\x2\x2\x2\x369\x36A\x3\x2\x2\x2\x36A\x36F"+
		"\x5\x62\x32\x2\x36B\x36C\a\a\x2\x2\x36C\x36E\x5\x62\x32\x2\x36D\x36B\x3"+
		"\x2\x2\x2\x36E\x371\x3\x2\x2\x2\x36F\x36D\x3\x2\x2\x2\x36F\x370\x3\x2"+
		"\x2\x2\x370\x37E\x3\x2\x2\x2\x371\x36F\x3\x2\x2\x2\x372\x37C\aM\x2\x2"+
		"\x373\x378\x5\x64\x33\x2\x374\x375\a\a\x2\x2\x375\x377\x5\x64\x33\x2\x376"+
		"\x374\x3\x2\x2\x2\x377\x37A\x3\x2\x2\x2\x378\x376\x3\x2\x2\x2\x378\x379"+
		"\x3\x2\x2\x2\x379\x37D\x3\x2\x2\x2\x37A\x378\x3\x2\x2\x2\x37B\x37D\x5"+
		"\x66\x34\x2\x37C\x373\x3\x2\x2\x2\x37C\x37B\x3\x2\x2\x2\x37D\x37F\x3\x2"+
		"\x2\x2\x37E\x372\x3\x2\x2\x2\x37E\x37F\x3\x2\x2\x2\x37F\x382\x3\x2\x2"+
		"\x2\x380\x381\a\x94\x2\x2\x381\x383\x5N(\x2\x382\x380\x3\x2\x2\x2\x382"+
		"\x383\x3\x2\x2\x2\x383\x392\x3\x2\x2\x2\x384\x385\aP\x2\x2\x385\x386\a"+
		"*\x2\x2\x386\x38B\x5N(\x2\x387\x388\a\a\x2\x2\x388\x38A\x5N(\x2\x389\x387"+
		"\x3\x2\x2\x2\x38A\x38D\x3\x2\x2\x2\x38B\x389\x3\x2\x2\x2\x38B\x38C\x3"+
		"\x2\x2\x2\x38C\x390\x3\x2\x2\x2\x38D\x38B\x3\x2\x2\x2\x38E\x38F\aQ\x2"+
		"\x2\x38F\x391\x5N(\x2\x390\x38E\x3\x2\x2\x2\x390\x391\x3\x2\x2\x2\x391"+
		"\x393\x3\x2\x2\x2\x392\x384\x3\x2\x2\x2\x392\x393\x3\x2\x2\x2\x393\x3B1"+
		"\x3\x2\x2\x2\x394\x395\a\x90\x2\x2\x395\x396\a\x5\x2\x2\x396\x39B\x5N"+
		"(\x2\x397\x398\a\a\x2\x2\x398\x39A\x5N(\x2\x399\x397\x3\x2\x2\x2\x39A"+
		"\x39D\x3\x2\x2\x2\x39B\x399\x3\x2\x2\x2\x39B\x39C\x3\x2\x2\x2\x39C\x39E"+
		"\x3\x2\x2\x2\x39D\x39B\x3\x2\x2\x2\x39E\x3AD\a\x6\x2\x2\x39F\x3A0\a\a"+
		"\x2\x2\x3A0\x3A1\a\x5\x2\x2\x3A1\x3A6\x5N(\x2\x3A2\x3A3\a\a\x2\x2\x3A3"+
		"\x3A5\x5N(\x2\x3A4\x3A2\x3\x2\x2\x2\x3A5\x3A8\x3\x2\x2\x2\x3A6\x3A4\x3"+
		"\x2\x2\x2\x3A6\x3A7\x3\x2\x2\x2\x3A7\x3A9\x3\x2\x2\x2\x3A8\x3A6\x3\x2"+
		"\x2\x2\x3A9\x3AA\a\x6\x2\x2\x3AA\x3AC\x3\x2\x2\x2\x3AB\x39F\x3\x2\x2\x2"+
		"\x3AC\x3AF\x3\x2\x2\x2\x3AD\x3AB\x3\x2\x2\x2\x3AD\x3AE\x3\x2\x2\x2\x3AE"+
		"\x3B1\x3\x2\x2\x2\x3AF\x3AD\x3\x2\x2\x2\x3B0\x366\x3\x2\x2\x2\x3B0\x394"+
		"\x3\x2\x2\x2\x3B1?\x3\x2\x2\x2\x3B2\x3B4\x5X-\x2\x3B3\x3B2\x3\x2\x2\x2"+
		"\x3B3\x3B4\x3\x2\x2\x2\x3B4\x3B5\x3\x2\x2\x2\x3B5\x3C0\a\x8D\x2\x2\x3B6"+
		"\x3B7\an\x2\x2\x3B7\x3C1\a\x7F\x2\x2\x3B8\x3B9\an\x2\x2\x3B9\x3C1\a\x1B"+
		"\x2\x2\x3BA\x3BB\an\x2\x2\x3BB\x3C1\a|\x2\x2\x3BC\x3BD\an\x2\x2\x3BD\x3C1"+
		"\aJ\x2\x2\x3BE\x3BF\an\x2\x2\x3BF\x3C1\aS\x2\x2\x3C0\x3B6\x3\x2\x2\x2"+
		"\x3C0\x3B8\x3\x2\x2\x2\x3C0\x3BA\x3\x2\x2\x2\x3C0\x3BC\x3\x2\x2\x2\x3C0"+
		"\x3BE\x3\x2\x2\x2\x3C0\x3C1\x3\x2\x2\x2\x3C1\x3C2\x3\x2\x2\x2\x3C2\x3C3"+
		"\x5Z.\x2\x3C3\x3C4\a\x83\x2\x2\x3C4\x3C5\x5\x8CG\x2\x3C5\x3C6\a\b\x2\x2"+
		"\x3C6\x3CE\x5N(\x2\x3C7\x3C8\a\a\x2\x2\x3C8\x3C9\x5\x8CG\x2\x3C9\x3CA"+
		"\a\b\x2\x2\x3CA\x3CB\x5N(\x2\x3CB\x3CD\x3\x2\x2\x2\x3CC\x3C7\x3\x2\x2"+
		"\x2\x3CD\x3D0\x3\x2\x2\x2\x3CE\x3CC\x3\x2\x2\x2\x3CE\x3CF\x3\x2\x2\x2"+
		"\x3CF\x3D3\x3\x2\x2\x2\x3D0\x3CE\x3\x2\x2\x2\x3D1\x3D2\a\x94\x2\x2\x3D2"+
		"\x3D4\x5N(\x2\x3D3\x3D1\x3\x2\x2\x2\x3D3\x3D4\x3\x2\x2\x2\x3D4\x41\x3"+
		"\x2\x2\x2\x3D5\x3D7\x5X-\x2\x3D6\x3D5\x3\x2\x2\x2\x3D6\x3D7\x3\x2\x2\x2"+
		"\x3D7\x3D8\x3\x2\x2\x2\x3D8\x3E3\a\x8D\x2\x2\x3D9\x3DA\an\x2\x2\x3DA\x3E4"+
		"\a\x7F\x2\x2\x3DB\x3DC\an\x2\x2\x3DC\x3E4\a\x1B\x2\x2\x3DD\x3DE\an\x2"+
		"\x2\x3DE\x3E4\a|\x2\x2\x3DF\x3E0\an\x2\x2\x3E0\x3E4\aJ\x2\x2\x3E1\x3E2"+
		"\an\x2\x2\x3E2\x3E4\aS\x2\x2\x3E3\x3D9\x3\x2\x2\x2\x3E3\x3DB\x3\x2\x2"+
		"\x2\x3E3\x3DD\x3\x2\x2\x2\x3E3\x3DF\x3\x2\x2\x2\x3E3\x3E1\x3\x2\x2\x2"+
		"\x3E3\x3E4\x3\x2\x2\x2\x3E4\x3E5\x3\x2\x2\x2\x3E5\x3E6\x5Z.\x2\x3E6\x3E7"+
		"\a\x83\x2\x2\x3E7\x3E8\x5\x8CG\x2\x3E8\x3E9\a\b\x2\x2\x3E9\x3F1\x5N(\x2"+
		"\x3EA\x3EB\a\a\x2\x2\x3EB\x3EC\x5\x8CG\x2\x3EC\x3ED\a\b\x2\x2\x3ED\x3EE"+
		"\x5N(\x2\x3EE\x3F0\x3\x2\x2\x2\x3EF\x3EA\x3\x2\x2\x2\x3F0\x3F3\x3\x2\x2"+
		"\x2\x3F1\x3EF\x3\x2\x2\x2\x3F1\x3F2\x3\x2\x2\x2\x3F2\x3F6\x3\x2\x2\x2"+
		"\x3F3\x3F1\x3\x2\x2\x2\x3F4\x3F5\a\x94\x2\x2\x3F5\x3F7\x5N(\x2\x3F6\x3F4"+
		"\x3\x2\x2\x2\x3F6\x3F7\x3\x2\x2\x2\x3F7\x40A\x3\x2\x2\x2\x3F8\x3F9\ao"+
		"\x2\x2\x3F9\x3FA\a*\x2\x2\x3FA\x3FF\x5\\/\x2\x3FB\x3FC\a\a\x2\x2\x3FC"+
		"\x3FE\x5\\/\x2\x3FD\x3FB\x3\x2\x2\x2\x3FE\x401\x3\x2\x2\x2\x3FF\x3FD\x3"+
		"\x2\x2\x2\x3FF\x400\x3\x2\x2\x2\x400\x403\x3\x2\x2\x2\x401\x3FF\x3\x2"+
		"\x2\x2\x402\x3F8\x3\x2\x2\x2\x402\x403\x3\x2\x2\x2\x403\x404\x3\x2\x2"+
		"\x2\x404\x405\a\x64\x2\x2\x405\x408\x5N(\x2\x406\x407\t\x4\x2\x2\x407"+
		"\x409\x5N(\x2\x408\x406\x3\x2\x2\x2\x408\x409\x3\x2\x2\x2\x409\x40B\x3"+
		"\x2\x2\x2\x40A\x402\x3\x2\x2\x2\x40A\x40B\x3\x2\x2\x2\x40B\x43\x3\x2\x2"+
		"\x2\x40C\x40D\a\x8F\x2\x2\x40D\x45\x3\x2\x2\x2\x40E\x410\x5\x8CG\x2\x40F"+
		"\x411\x5H%\x2\x410\x40F\x3\x2\x2\x2\x410\x411\x3\x2\x2\x2\x411\x415\x3"+
		"\x2\x2\x2\x412\x414\x5J&\x2\x413\x412\x3\x2\x2\x2\x414\x417\x3\x2\x2\x2"+
		"\x415\x413\x3\x2\x2\x2\x415\x416\x3\x2\x2\x2\x416G\x3\x2\x2\x2\x417\x415"+
		"\x3\x2\x2\x2\x418\x41A\x5\x80\x41\x2\x419\x418\x3\x2\x2\x2\x41A\x41B\x3"+
		"\x2\x2\x2\x41B\x419\x3\x2\x2\x2\x41B\x41C\x3\x2\x2\x2\x41C\x427\x3\x2"+
		"\x2\x2\x41D\x41E\a\x5\x2\x2\x41E\x41F\x5r:\x2\x41F\x420\a\x6\x2\x2\x420"+
		"\x428\x3\x2\x2\x2\x421\x422\a\x5\x2\x2\x422\x423\x5r:\x2\x423\x424\a\a"+
		"\x2\x2\x424\x425\x5r:\x2\x425\x426\a\x6\x2\x2\x426\x428\x3\x2\x2\x2\x427"+
		"\x41D\x3\x2\x2\x2\x427\x421\x3\x2\x2\x2\x427\x428\x3\x2\x2\x2\x428I\x3"+
		"\x2\x2\x2\x429\x42A\a\x33\x2\x2\x42A\x42C\x5\x80\x41\x2\x42B\x429\x3\x2"+
		"\x2\x2\x42B\x42C\x3\x2\x2\x2\x42C\x44E\x3\x2\x2\x2\x42D\x42E\as\x2\x2"+
		"\x42E\x430\a\x61\x2\x2\x42F\x431\t\a\x2\x2\x430\x42F\x3\x2\x2\x2\x430"+
		"\x431\x3\x2\x2\x2\x431\x432\x3\x2\x2\x2\x432\x434\x5L\'\x2\x433\x435\a"+
		"&\x2\x2\x434\x433\x3\x2\x2\x2\x434\x435\x3\x2\x2\x2\x435\x44F\x3\x2\x2"+
		"\x2\x436\x438\ah\x2\x2\x437\x436\x3\x2\x2\x2\x437\x438\x3\x2\x2\x2\x438"+
		"\x439\x3\x2\x2\x2\x439\x43A\aj\x2\x2\x43A\x44F\x5L\'\x2\x43B\x43C\a\x8C"+
		"\x2\x2\x43C\x44F\x5L\'\x2\x43D\x43E\a.\x2\x2\x43E\x43F\a\x5\x2\x2\x43F"+
		"\x440\x5N(\x2\x440\x441\a\x6\x2\x2\x441\x44F\x3\x2\x2\x2\x442\x449\a:"+
		"\x2\x2\x443\x44A\x5r:\x2\x444\x44A\x5t;\x2\x445\x446\a\x5\x2\x2\x446\x447"+
		"\x5N(\x2\x447\x448\a\x6\x2\x2\x448\x44A\x3\x2\x2\x2\x449\x443\x3\x2\x2"+
		"\x2\x449\x444\x3\x2\x2\x2\x449\x445\x3\x2\x2\x2\x44A\x44F\x3\x2\x2\x2"+
		"\x44B\x44C\a/\x2\x2\x44C\x44F\x5\x8EH\x2\x44D\x44F\x5P)\x2\x44E\x42D\x3"+
		"\x2\x2\x2\x44E\x437\x3\x2\x2\x2\x44E\x43B\x3\x2\x2\x2\x44E\x43D\x3\x2"+
		"\x2\x2\x44E\x442\x3\x2\x2\x2\x44E\x44B\x3\x2\x2\x2\x44E\x44D\x3\x2\x2"+
		"\x2\x44FK\x3\x2\x2\x2\x450\x451\am\x2\x2\x451\x452\a\x32\x2\x2\x452\x454"+
		"\t\b\x2\x2\x453\x450\x3\x2\x2\x2\x453\x454\x3\x2\x2\x2\x454M\x3\x2\x2"+
		"\x2\x455\x456\b(\x1\x2\x456\x4A2\x5t;\x2\x457\x4A2\a\x99\x2\x2\x458\x459"+
		"\x5\x84\x43\x2\x459\x45A\a\x4\x2\x2\x45A\x45C\x3\x2\x2\x2\x45B\x458\x3"+
		"\x2\x2\x2\x45B\x45C\x3\x2\x2\x2\x45C\x45D\x3\x2\x2\x2\x45D\x45E\x5\x86"+
		"\x44\x2\x45E\x45F\a\x4\x2\x2\x45F\x461\x3\x2\x2\x2\x460\x45B\x3\x2\x2"+
		"\x2\x460\x461\x3\x2\x2\x2\x461\x462\x3\x2\x2\x2\x462\x4A2\x5\x8CG\x2\x463"+
		"\x464\x5v<\x2\x464\x465\x5N(\x17\x465\x4A2\x3\x2\x2\x2\x466\x467\x5\x82"+
		"\x42\x2\x467\x474\a\x5\x2\x2\x468\x46A\a@\x2\x2\x469\x468\x3\x2\x2\x2"+
		"\x469\x46A\x3\x2\x2\x2\x46A\x46B\x3\x2\x2\x2\x46B\x470\x5N(\x2\x46C\x46D"+
		"\a\a\x2\x2\x46D\x46F\x5N(\x2\x46E\x46C\x3\x2\x2\x2\x46F\x472\x3\x2\x2"+
		"\x2\x470\x46E\x3\x2\x2\x2\x470\x471\x3\x2\x2\x2\x471\x475\x3\x2\x2\x2"+
		"\x472\x470\x3\x2\x2\x2\x473\x475\a\t\x2\x2\x474\x469\x3\x2\x2\x2\x474"+
		"\x473\x3\x2\x2\x2\x474\x475\x3\x2\x2\x2\x475\x476\x3\x2\x2\x2\x476\x477"+
		"\a\x6\x2\x2\x477\x4A2\x3\x2\x2\x2\x478\x479\a\x5\x2\x2\x479\x47A\x5N("+
		"\x2\x47A\x47B\a\x6\x2\x2\x47B\x4A2\x3\x2\x2\x2\x47C\x47D\a-\x2\x2\x47D"+
		"\x47E\a\x5\x2\x2\x47E\x47F\x5N(\x2\x47F\x480\a#\x2\x2\x480\x481\x5H%\x2"+
		"\x481\x482\a\x6\x2\x2\x482\x4A2\x3\x2\x2\x2\x483\x485\ah\x2\x2\x484\x483"+
		"\x3\x2\x2\x2\x484\x485\x3\x2\x2\x2\x485\x486\x3\x2\x2\x2\x486\x488\aH"+
		"\x2\x2\x487\x484\x3\x2\x2\x2\x487\x488\x3\x2\x2\x2\x488\x489\x3\x2\x2"+
		"\x2\x489\x48A\a\x5\x2\x2\x48A\x48B\x5<\x1F\x2\x48B\x48C\a\x6\x2\x2\x48C"+
		"\x4A2\x3\x2\x2\x2\x48D\x48F\a,\x2\x2\x48E\x490\x5N(\x2\x48F\x48E\x3\x2"+
		"\x2\x2\x48F\x490\x3\x2\x2\x2\x490\x496\x3\x2\x2\x2\x491\x492\a\x93\x2"+
		"\x2\x492\x493\x5N(\x2\x493\x494\a\x87\x2\x2\x494\x495\x5N(\x2\x495\x497"+
		"\x3\x2\x2\x2\x496\x491\x3\x2\x2\x2\x497\x498\x3\x2\x2\x2\x498\x496\x3"+
		"\x2\x2\x2\x498\x499\x3\x2\x2\x2\x499\x49C\x3\x2\x2\x2\x49A\x49B\a\x43"+
		"\x2\x2\x49B\x49D\x5N(\x2\x49C\x49A\x3\x2\x2\x2\x49C\x49D\x3\x2\x2\x2\x49D"+
		"\x49E\x3\x2\x2\x2\x49E\x49F\a\x44\x2\x2\x49F\x4A2\x3\x2\x2\x2\x4A0\x4A2"+
		"\x5R*\x2\x4A1\x455\x3\x2\x2\x2\x4A1\x457\x3\x2\x2\x2\x4A1\x460\x3\x2\x2"+
		"\x2\x4A1\x463\x3\x2\x2\x2\x4A1\x466\x3\x2\x2\x2\x4A1\x478\x3\x2\x2\x2"+
		"\x4A1\x47C\x3\x2\x2\x2\x4A1\x487\x3\x2\x2\x2\x4A1\x48D\x3\x2\x2\x2\x4A1"+
		"\x4A0\x3\x2\x2\x2\x4A2\x507\x3\x2\x2\x2\x4A3\x4A4\f\x16\x2\x2\x4A4\x4A5"+
		"\a\r\x2\x2\x4A5\x506\x5N(\x17\x4A6\x4A7\f\x15\x2\x2\x4A7\x4A8\t\t\x2\x2"+
		"\x4A8\x506\x5N(\x16\x4A9\x4AA\f\x14\x2\x2\x4AA\x4AB\t\n\x2\x2\x4AB\x506"+
		"\x5N(\x15\x4AC\x4AD\f\x13\x2\x2\x4AD\x4AE\t\v\x2\x2\x4AE\x506\x5N(\x14"+
		"\x4AF\x4B0\f\x12\x2\x2\x4B0\x4B1\t\f\x2\x2\x4B1\x506\x5N(\x13\x4B2\x4BF"+
		"\f\x11\x2\x2\x4B3\x4C0\a\b\x2\x2\x4B4\x4C0\a\x18\x2\x2\x4B5\x4C0\a\x19"+
		"\x2\x2\x4B6\x4C0\a\x1A\x2\x2\x4B7\x4C0\a^\x2\x2\x4B8\x4B9\a^\x2\x2\x4B9"+
		"\x4C0\ah\x2\x2\x4BA\x4C0\aU\x2\x2\x4BB\x4C0\a\x63\x2\x2\x4BC\x4C0\aO\x2"+
		"\x2\x4BD\x4C0\a\x65\x2\x2\x4BE\x4C0\ax\x2\x2\x4BF\x4B3\x3\x2\x2\x2\x4BF"+
		"\x4B4\x3\x2\x2\x2\x4BF\x4B5\x3\x2\x2\x2\x4BF\x4B6\x3\x2\x2\x2\x4BF\x4B7"+
		"\x3\x2\x2\x2\x4BF\x4B8\x3\x2\x2\x2\x4BF\x4BA\x3\x2\x2\x2\x4BF\x4BB\x3"+
		"\x2\x2\x2\x4BF\x4BC\x3\x2\x2\x2\x4BF\x4BD\x3\x2\x2\x2\x4BF\x4BE\x3\x2"+
		"\x2\x2\x4C0\x4C1\x3\x2\x2\x2\x4C1\x506\x5N(\x12\x4C2\x4C3\f\x10\x2\x2"+
		"\x4C3\x4C4\a\"\x2\x2\x4C4\x506\x5N(\x11\x4C5\x4C6\f\xF\x2\x2\x4C6\x4C7"+
		"\an\x2\x2\x4C7\x506\x5N(\x10\x4C8\x4C9\f\b\x2\x2\x4C9\x4CB\a^\x2\x2\x4CA"+
		"\x4CC\ah\x2\x2\x4CB\x4CA\x3\x2\x2\x2\x4CB\x4CC\x3\x2\x2\x2\x4CC\x4CD\x3"+
		"\x2\x2\x2\x4CD\x506\x5N(\t\x4CE\x4D0\f\a\x2\x2\x4CF\x4D1\ah\x2\x2\x4D0"+
		"\x4CF\x3\x2\x2\x2\x4D0\x4D1\x3\x2\x2\x2\x4D1\x4D2\x3\x2\x2\x2\x4D2\x4D3"+
		"\a)\x2\x2\x4D3\x4D4\x5N(\x2\x4D4\x4D5\a\"\x2\x2\x4D5\x4D6\x5N(\b\x4D6"+
		"\x506\x3\x2\x2\x2\x4D7\x4D8\f\v\x2\x2\x4D8\x4D9\a/\x2\x2\x4D9\x506\x5"+
		"\x8EH\x2\x4DA\x4DC\f\n\x2\x2\x4DB\x4DD\ah\x2\x2\x4DC\x4DB\x3\x2\x2\x2"+
		"\x4DC\x4DD\x3\x2\x2\x2\x4DD\x4DE\x3\x2\x2\x2\x4DE\x4DF\t\r\x2\x2\x4DF"+
		"\x4E2\x5N(\x2\x4E0\x4E1\a\x45\x2\x2\x4E1\x4E3\x5N(\x2\x4E2\x4E0\x3\x2"+
		"\x2\x2\x4E2\x4E3\x3\x2\x2\x2\x4E3\x506\x3\x2\x2\x2\x4E4\x4E9\f\t\x2\x2"+
		"\x4E5\x4EA\a_\x2\x2\x4E6\x4EA\ai\x2\x2\x4E7\x4E8\ah\x2\x2\x4E8\x4EA\a"+
		"j\x2\x2\x4E9\x4E5\x3\x2\x2\x2\x4E9\x4E6\x3\x2\x2\x2\x4E9\x4E7\x3\x2\x2"+
		"\x2\x4EA\x506\x3\x2\x2\x2\x4EB\x4ED\f\x6\x2\x2\x4EC\x4EE\ah\x2\x2\x4ED"+
		"\x4EC\x3\x2\x2\x2\x4ED\x4EE\x3\x2\x2\x2\x4EE\x4EF\x3\x2\x2\x2\x4EF\x503"+
		"\aU\x2\x2\x4F0\x4FA\a\x5\x2\x2\x4F1\x4FB\x5<\x1F\x2\x4F2\x4F7\x5N(\x2"+
		"\x4F3\x4F4\a\a\x2\x2\x4F4\x4F6\x5N(\x2\x4F5\x4F3\x3\x2\x2\x2\x4F6\x4F9"+
		"\x3\x2\x2\x2\x4F7\x4F5\x3\x2\x2\x2\x4F7\x4F8\x3\x2\x2\x2\x4F8\x4FB\x3"+
		"\x2\x2\x2\x4F9\x4F7\x3\x2\x2\x2\x4FA\x4F1\x3\x2\x2\x2\x4FA\x4F2\x3\x2"+
		"\x2\x2\x4FA\x4FB\x3\x2\x2\x2\x4FB\x4FC\x3\x2\x2\x2\x4FC\x504\a\x6\x2\x2"+
		"\x4FD\x4FE\x5\x84\x43\x2\x4FE\x4FF\a\x4\x2\x2\x4FF\x501\x3\x2\x2\x2\x500"+
		"\x4FD\x3\x2\x2\x2\x500\x501\x3\x2\x2\x2\x501\x502\x3\x2\x2\x2\x502\x504"+
		"\x5\x86\x44\x2\x503\x4F0\x3\x2\x2\x2\x503\x500\x3\x2\x2\x2\x504\x506\x3"+
		"\x2\x2\x2\x505\x4A3\x3\x2\x2\x2\x505\x4A6\x3\x2\x2\x2\x505\x4A9\x3\x2"+
		"\x2\x2\x505\x4AC\x3\x2\x2\x2\x505\x4AF\x3\x2\x2\x2\x505\x4B2\x3\x2\x2"+
		"\x2\x505\x4C2\x3\x2\x2\x2\x505\x4C5\x3\x2\x2\x2\x505\x4C8\x3\x2\x2\x2"+
		"\x505\x4CE\x3\x2\x2\x2\x505\x4D7\x3\x2\x2\x2\x505\x4DA\x3\x2\x2\x2\x505"+
		"\x4E4\x3\x2\x2\x2\x505\x4EB\x3\x2\x2\x2\x506\x509\x3\x2\x2\x2\x507\x505"+
		"\x3\x2\x2\x2\x507\x508\x3\x2\x2\x2\x508O\x3\x2\x2\x2\x509\x507\x3\x2\x2"+
		"\x2\x50A\x50B\aw\x2\x2\x50B\x517\x5\x90I\x2\x50C\x50D\a\x5\x2\x2\x50D"+
		"\x512\x5\x8CG\x2\x50E\x50F\a\a\x2\x2\x50F\x511\x5\x8CG\x2\x510\x50E\x3"+
		"\x2\x2\x2\x511\x514\x3\x2\x2\x2\x512\x510\x3\x2\x2\x2\x512\x513\x3\x2"+
		"\x2\x2\x513\x515\x3\x2\x2\x2\x514\x512\x3\x2\x2\x2\x515\x516\a\x6\x2\x2"+
		"\x516\x518\x3\x2\x2\x2\x517\x50C\x3\x2\x2\x2\x517\x518\x3\x2\x2\x2\x518"+
		"\x52B\x3\x2\x2\x2\x519\x51A\am\x2\x2\x51A\x523\t\xE\x2\x2\x51B\x51C\a"+
		"\x83\x2\x2\x51C\x524\aj\x2\x2\x51D\x51E\a\x83\x2\x2\x51E\x524\a:\x2\x2"+
		"\x51F\x524\a+\x2\x2\x520\x524\a}\x2\x2\x521\x522\ag\x2\x2\x522\x524\a"+
		"\x1C\x2\x2\x523\x51B\x3\x2\x2\x2\x523\x51D\x3\x2\x2\x2\x523\x51F\x3\x2"+
		"\x2\x2\x523\x520\x3\x2\x2\x2\x523\x521\x3\x2\x2\x2\x524\x528\x3\x2\x2"+
		"\x2\x525\x526\a\x65\x2\x2\x526\x528\x5\x80\x41\x2\x527\x519\x3\x2\x2\x2"+
		"\x527\x525\x3\x2\x2\x2\x528\x52A\x3\x2\x2\x2\x529\x527\x3\x2\x2\x2\x52A"+
		"\x52D\x3\x2\x2\x2\x52B\x529\x3\x2\x2\x2\x52B\x52C\x3\x2\x2\x2\x52C\x538"+
		"\x3\x2\x2\x2\x52D\x52B\x3\x2\x2\x2\x52E\x530\ah\x2\x2\x52F\x52E\x3\x2"+
		"\x2\x2\x52F\x530\x3\x2\x2\x2\x530\x531\x3\x2\x2\x2\x531\x536\a;\x2\x2"+
		"\x532\x533\aX\x2\x2\x533\x537\a<\x2\x2\x534\x535\aX\x2\x2\x535\x537\a"+
		"T\x2\x2\x536\x532\x3\x2\x2\x2\x536\x534\x3\x2\x2\x2\x536\x537\x3\x2\x2"+
		"\x2\x537\x539\x3\x2\x2\x2\x538\x52F\x3\x2\x2\x2\x538\x539\x3\x2\x2\x2"+
		"\x539Q\x3\x2\x2\x2\x53A\x53B\au\x2\x2\x53B\x540\a\x5\x2\x2\x53C\x541\a"+
		"S\x2\x2\x53D\x53E\t\xF\x2\x2\x53E\x53F\a\a\x2\x2\x53F\x541\x5x=\x2\x540"+
		"\x53C\x3\x2\x2\x2\x540\x53D\x3\x2\x2\x2\x541\x542\x3\x2\x2\x2\x542\x543"+
		"\a\x6\x2\x2\x543S\x3\x2\x2\x2\x544\x547\x5\x8CG\x2\x545\x546\a/\x2\x2"+
		"\x546\x548\x5\x8EH\x2\x547\x545\x3\x2\x2\x2\x547\x548\x3\x2\x2\x2\x548"+
		"\x54A\x3\x2\x2\x2\x549\x54B\t\a\x2\x2\x54A\x549\x3\x2\x2\x2\x54A\x54B"+
		"\x3\x2\x2\x2\x54BU\x3\x2\x2\x2\x54C\x54D\a\x33\x2\x2\x54D\x54F\x5\x80"+
		"\x41\x2\x54E\x54C\x3\x2\x2\x2\x54E\x54F\x3\x2\x2\x2\x54F\x574\x3\x2\x2"+
		"\x2\x550\x551\as\x2\x2\x551\x554\a\x61\x2\x2\x552\x554\a\x8C\x2\x2\x553"+
		"\x550\x3\x2\x2\x2\x553\x552\x3\x2\x2\x2\x554\x555\x3\x2\x2\x2\x555\x556"+
		"\a\x5\x2\x2\x556\x55B\x5T+\x2\x557\x558\a\a\x2\x2\x558\x55A\x5T+\x2\x559"+
		"\x557\x3\x2\x2\x2\x55A\x55D\x3\x2\x2\x2\x55B\x559\x3\x2\x2\x2\x55B\x55C"+
		"\x3\x2\x2\x2\x55C\x55E\x3\x2\x2\x2\x55D\x55B\x3\x2\x2\x2\x55E\x55F\a\x6"+
		"\x2\x2\x55F\x560\x5L\'\x2\x560\x575\x3\x2\x2\x2\x561\x562\a.\x2\x2\x562"+
		"\x563\a\x5\x2\x2\x563\x564\x5N(\x2\x564\x565\a\x6\x2\x2\x565\x575\x3\x2"+
		"\x2\x2\x566\x567\aL\x2\x2\x567\x568\a\x61\x2\x2\x568\x569\a\x5\x2\x2\x569"+
		"\x56E\x5\x8CG\x2\x56A\x56B\a\a\x2\x2\x56B\x56D\x5\x8CG\x2\x56C\x56A\x3"+
		"\x2\x2\x2\x56D\x570\x3\x2\x2\x2\x56E\x56C\x3\x2\x2\x2\x56E\x56F\x3\x2"+
		"\x2\x2\x56F\x571\x3\x2\x2\x2\x570\x56E\x3\x2\x2\x2\x571\x572\a\x6\x2\x2"+
		"\x572\x573\x5P)\x2\x573\x575\x3\x2\x2\x2\x574\x553\x3\x2\x2\x2\x574\x561"+
		"\x3\x2\x2\x2\x574\x566\x3\x2\x2\x2\x575W\x3\x2\x2\x2\x576\x578\a\x95\x2"+
		"\x2\x577\x579\av\x2\x2\x578\x577\x3\x2\x2\x2\x578\x579\x3\x2\x2\x2\x579"+
		"\x57A\x3\x2\x2\x2\x57A\x57B\x5p\x39\x2\x57B\x57C\a#\x2\x2\x57C\x57D\a"+
		"\x5\x2\x2\x57D\x57E\x5<\x1F\x2\x57E\x588\a\x6\x2\x2\x57F\x580\a\a\x2\x2"+
		"\x580\x581\x5p\x39\x2\x581\x582\a#\x2\x2\x582\x583\a\x5\x2\x2\x583\x584"+
		"\x5<\x1F\x2\x584\x585\a\x6\x2\x2\x585\x587\x3\x2\x2\x2\x586\x57F\x3\x2"+
		"\x2\x2\x587\x58A\x3\x2\x2\x2\x588\x586\x3\x2\x2\x2\x588\x589\x3\x2\x2"+
		"\x2\x589Y\x3\x2\x2\x2\x58A\x588\x3\x2\x2\x2\x58B\x58C\x5\x84\x43\x2\x58C"+
		"\x58D\a\x4\x2\x2\x58D\x58F\x3\x2\x2\x2\x58E\x58B\x3\x2\x2\x2\x58E\x58F"+
		"\x3\x2\x2\x2\x58F\x590\x3\x2\x2\x2\x590\x596\x5\x86\x44\x2\x591\x592\a"+
		"W\x2\x2\x592\x593\a*\x2\x2\x593\x597\x5\x92J\x2\x594\x595\ah\x2\x2\x595"+
		"\x597\aW\x2\x2\x596\x591\x3\x2\x2\x2\x596\x594\x3\x2\x2\x2\x596\x597\x3"+
		"\x2\x2\x2\x597[\x3\x2\x2\x2\x598\x59B\x5N(\x2\x599\x59A\a/\x2\x2\x59A"+
		"\x59C\x5\x8EH\x2\x59B\x599\x3\x2\x2\x2\x59B\x59C\x3\x2\x2\x2\x59C\x59E"+
		"\x3\x2\x2\x2\x59D\x59F\t\a\x2\x2\x59E\x59D\x3\x2\x2\x2\x59E\x59F\x3\x2"+
		"\x2\x2\x59F]\x3\x2\x2\x2\x5A0\x5A4\x5r:\x2\x5A1\x5A4\x5\x80\x41\x2\x5A2"+
		"\x5A4\a\x9A\x2\x2\x5A3\x5A0\x3\x2\x2\x2\x5A3\x5A1\x3\x2\x2\x2\x5A3\x5A2"+
		"\x3\x2\x2\x2\x5A4_\x3\x2\x2\x2\x5A5\x5B1\x5\x86\x44\x2\x5A6\x5A7\a\x5"+
		"\x2\x2\x5A7\x5AC\x5\x8CG\x2\x5A8\x5A9\a\a\x2\x2\x5A9\x5AB\x5\x8CG\x2\x5AA"+
		"\x5A8\x3\x2\x2\x2\x5AB\x5AE\x3\x2\x2\x2\x5AC\x5AA\x3\x2\x2\x2\x5AC\x5AD"+
		"\x3\x2\x2\x2\x5AD\x5AF\x3\x2\x2\x2\x5AE\x5AC\x3\x2\x2\x2\x5AF\x5B0\a\x6"+
		"\x2\x2\x5B0\x5B2\x3\x2\x2\x2\x5B1\x5A6\x3\x2\x2\x2\x5B1\x5B2\x3\x2\x2"+
		"\x2\x5B2\x5B3\x3\x2\x2\x2\x5B3\x5B4\a#\x2\x2\x5B4\x5B5\a\x5\x2\x2\x5B5"+
		"\x5B6\x5<\x1F\x2\x5B6\x5B7\a\x6\x2\x2\x5B7\x61\x3\x2\x2\x2\x5B8\x5C5\a"+
		"\t\x2\x2\x5B9\x5BA\x5\x86\x44\x2\x5BA\x5BB\a\x4\x2\x2\x5BB\x5BC\a\t\x2"+
		"\x2\x5BC\x5C5\x3\x2\x2\x2\x5BD\x5C2\x5N(\x2\x5BE\x5C0\a#\x2\x2\x5BF\x5BE"+
		"\x3\x2\x2\x2\x5BF\x5C0\x3\x2\x2\x2\x5C0\x5C1\x3\x2\x2\x2\x5C1\x5C3\x5"+
		"|?\x2\x5C2\x5BF\x3\x2\x2\x2\x5C2\x5C3\x3\x2\x2\x2\x5C3\x5C5\x3\x2\x2\x2"+
		"\x5C4\x5B8\x3\x2\x2\x2\x5C4\x5B9\x3\x2\x2\x2\x5C4\x5BD\x3\x2\x2\x2\x5C5"+
		"\x63\x3\x2\x2\x2\x5C6\x5C7\x5\x84\x43\x2\x5C7\x5C8\a\x4\x2\x2\x5C8\x5CA"+
		"\x3\x2\x2\x2\x5C9\x5C6\x3\x2\x2\x2\x5C9\x5CA\x3\x2\x2\x2\x5CA\x5CB\x3"+
		"\x2\x2\x2\x5CB\x5D0\x5\x86\x44\x2\x5CC\x5CE\a#\x2\x2\x5CD\x5CC\x3\x2\x2"+
		"\x2\x5CD\x5CE\x3\x2\x2\x2\x5CE\x5CF\x3\x2\x2\x2\x5CF\x5D1\x5\x9EP\x2\x5D0"+
		"\x5CD\x3\x2\x2\x2\x5D0\x5D1\x3\x2\x2\x2\x5D1\x5D7\x3\x2\x2\x2\x5D2\x5D3"+
		"\aW\x2\x2\x5D3\x5D4\a*\x2\x2\x5D4\x5D8\x5\x92J\x2\x5D5\x5D6\ah\x2\x2\x5D6"+
		"\x5D8\aW\x2\x2\x5D7\x5D2\x3\x2\x2\x2\x5D7\x5D5\x3\x2\x2\x2\x5D7\x5D8\x3"+
		"\x2\x2\x2\x5D8\x5F6\x3\x2\x2\x2\x5D9\x5E3\a\x5\x2\x2\x5DA\x5DF\x5\x64"+
		"\x33\x2\x5DB\x5DC\a\a\x2\x2\x5DC\x5DE\x5\x64\x33\x2\x5DD\x5DB\x3\x2\x2"+
		"\x2\x5DE\x5E1\x3\x2\x2\x2\x5DF\x5DD\x3\x2\x2\x2\x5DF\x5E0\x3\x2\x2\x2"+
		"\x5E0\x5E4\x3\x2\x2\x2\x5E1\x5DF\x3\x2\x2\x2\x5E2\x5E4\x5\x66\x34\x2\x5E3"+
		"\x5DA\x3\x2\x2\x2\x5E3\x5E2\x3\x2\x2\x2\x5E4\x5E5\x3\x2\x2\x2\x5E5\x5EA"+
		"\a\x6\x2\x2\x5E6\x5E8\a#\x2\x2\x5E7\x5E6\x3\x2\x2\x2\x5E7\x5E8\x3\x2\x2"+
		"\x2\x5E8\x5E9\x3\x2\x2\x2\x5E9\x5EB\x5\x9EP\x2\x5EA\x5E7\x3\x2\x2\x2\x5EA"+
		"\x5EB\x3\x2\x2\x2\x5EB\x5F6\x3\x2\x2\x2\x5EC\x5ED\a\x5\x2\x2\x5ED\x5EE"+
		"\x5<\x1F\x2\x5EE\x5F3\a\x6\x2\x2\x5EF\x5F1\a#\x2\x2\x5F0\x5EF\x3\x2\x2"+
		"\x2\x5F0\x5F1\x3\x2\x2\x2\x5F1\x5F2\x3\x2\x2\x2\x5F2\x5F4\x5\x9EP\x2\x5F3"+
		"\x5F0\x3\x2\x2\x2\x5F3\x5F4\x3\x2\x2\x2\x5F4\x5F6\x3\x2\x2\x2\x5F5\x5C9"+
		"\x3\x2\x2\x2\x5F5\x5D9\x3\x2\x2\x2\x5F5\x5EC\x3\x2\x2\x2\x5F6\x65\x3\x2"+
		"\x2\x2\x5F7\x5FE\x5\x64\x33\x2\x5F8\x5F9\x5h\x35\x2\x5F9\x5FA\x5\x64\x33"+
		"\x2\x5FA\x5FB\x5j\x36\x2\x5FB\x5FD\x3\x2\x2\x2\x5FC\x5F8\x3\x2\x2\x2\x5FD"+
		"\x600\x3\x2\x2\x2\x5FE\x5FC\x3\x2\x2\x2\x5FE\x5FF\x3\x2\x2\x2\x5FFg\x3"+
		"\x2\x2\x2\x600\x5FE\x3\x2\x2\x2\x601\x60F\a\a\x2\x2\x602\x604\a\x66\x2"+
		"\x2\x603\x602\x3\x2\x2\x2\x603\x604\x3\x2\x2\x2\x604\x60B\x3\x2\x2\x2"+
		"\x605\x607\a\x62\x2\x2\x606\x608\ap\x2\x2\x607\x606\x3\x2\x2\x2\x607\x608"+
		"\x3\x2\x2\x2\x608\x60C\x3\x2\x2\x2\x609\x60C\aY\x2\x2\x60A\x60C\a\x35"+
		"\x2\x2\x60B\x605\x3\x2\x2\x2\x60B\x609\x3\x2\x2\x2\x60B\x60A\x3\x2\x2"+
		"\x2\x60B\x60C\x3\x2\x2\x2\x60C\x60D\x3\x2\x2\x2\x60D\x60F\a`\x2\x2\x60E"+
		"\x601\x3\x2\x2\x2\x60E\x603\x3\x2\x2\x2\x60Fi\x3\x2\x2\x2\x610\x611\a"+
		"m\x2\x2\x611\x61F\x5N(\x2\x612\x613\a\x8E\x2\x2\x613\x614\a\x5\x2\x2\x614"+
		"\x619\x5\x8CG\x2\x615\x616\a\a\x2\x2\x616\x618\x5\x8CG\x2\x617\x615\x3"+
		"\x2\x2\x2\x618\x61B\x3\x2\x2\x2\x619\x617\x3\x2\x2\x2\x619\x61A\x3\x2"+
		"\x2\x2\x61A\x61C\x3\x2\x2\x2\x61B\x619\x3\x2\x2\x2\x61C\x61D\a\x6\x2\x2"+
		"\x61D\x61F\x3\x2\x2\x2\x61E\x610\x3\x2\x2\x2\x61E\x612\x3\x2\x2\x2\x61E"+
		"\x61F\x3\x2\x2\x2\x61Fk\x3\x2\x2\x2\x620\x622\a\x82\x2\x2\x621\x623\t"+
		"\x6\x2\x2\x622\x621\x3\x2\x2\x2\x622\x623\x3\x2\x2\x2\x623\x624\x3\x2"+
		"\x2\x2\x624\x629\x5\x62\x32\x2\x625\x626\a\a\x2\x2\x626\x628\x5\x62\x32"+
		"\x2\x627\x625\x3\x2\x2\x2\x628\x62B\x3\x2\x2\x2\x629\x627\x3\x2\x2\x2"+
		"\x629\x62A\x3\x2\x2\x2\x62A\x638\x3\x2\x2\x2\x62B\x629\x3\x2\x2\x2\x62C"+
		"\x636\aM\x2\x2\x62D\x632\x5\x64\x33\x2\x62E\x62F\a\a\x2\x2\x62F\x631\x5"+
		"\x64\x33\x2\x630\x62E\x3\x2\x2\x2\x631\x634\x3\x2\x2\x2\x632\x630\x3\x2"+
		"\x2\x2\x632\x633\x3\x2\x2\x2\x633\x637\x3\x2\x2\x2\x634\x632\x3\x2\x2"+
		"\x2\x635\x637\x5\x66\x34\x2\x636\x62D\x3\x2\x2\x2\x636\x635\x3\x2\x2\x2"+
		"\x637\x639\x3\x2\x2\x2\x638\x62C\x3\x2\x2\x2\x638\x639\x3\x2\x2\x2\x639"+
		"\x63C\x3\x2\x2\x2\x63A\x63B\a\x94\x2\x2\x63B\x63D\x5N(\x2\x63C\x63A\x3"+
		"\x2\x2\x2\x63C\x63D\x3\x2\x2\x2\x63D\x64C\x3\x2\x2\x2\x63E\x63F\aP\x2"+
		"\x2\x63F\x640\a*\x2\x2\x640\x645\x5N(\x2\x641\x642\a\a\x2\x2\x642\x644"+
		"\x5N(\x2\x643\x641\x3\x2\x2\x2\x644\x647\x3\x2\x2\x2\x645\x643\x3\x2\x2"+
		"\x2\x645\x646\x3\x2\x2\x2\x646\x64A\x3\x2\x2\x2\x647\x645\x3\x2\x2\x2"+
		"\x648\x649\aQ\x2\x2\x649\x64B\x5N(\x2\x64A\x648\x3\x2\x2\x2\x64A\x64B"+
		"\x3\x2\x2\x2\x64B\x64D\x3\x2\x2\x2\x64C\x63E\x3\x2\x2\x2\x64C\x64D\x3"+
		"\x2\x2\x2\x64D\x66B\x3\x2\x2\x2\x64E\x64F\a\x90\x2\x2\x64F\x650\a\x5\x2"+
		"\x2\x650\x655\x5N(\x2\x651\x652\a\a\x2\x2\x652\x654\x5N(\x2\x653\x651"+
		"\x3\x2\x2\x2\x654\x657\x3\x2\x2\x2\x655\x653\x3\x2\x2\x2\x655\x656\x3"+
		"\x2\x2\x2\x656\x658\x3\x2\x2\x2\x657\x655\x3\x2\x2\x2\x658\x667\a\x6\x2"+
		"\x2\x659\x65A\a\a\x2\x2\x65A\x65B\a\x5\x2\x2\x65B\x660\x5N(\x2\x65C\x65D"+
		"\a\a\x2\x2\x65D\x65F\x5N(\x2\x65E\x65C\x3\x2\x2\x2\x65F\x662\x3\x2\x2"+
		"\x2\x660\x65E\x3\x2\x2\x2\x660\x661\x3\x2\x2\x2\x661\x663\x3\x2\x2\x2"+
		"\x662\x660\x3\x2\x2\x2\x663\x664\a\x6\x2\x2\x664\x666\x3\x2\x2\x2\x665"+
		"\x659\x3\x2\x2\x2\x666\x669\x3\x2\x2\x2\x667\x665\x3\x2\x2\x2\x667\x668"+
		"\x3\x2\x2\x2\x668\x66B\x3\x2\x2\x2\x669\x667\x3\x2\x2\x2\x66A\x620\x3"+
		"\x2\x2\x2\x66A\x64E\x3\x2\x2\x2\x66Bm\x3\x2\x2\x2\x66C\x672\a\x8B\x2\x2"+
		"\x66D\x66E\a\x8B\x2\x2\x66E\x672\a\x1F\x2\x2\x66F\x672\a\\\x2\x2\x670"+
		"\x672\a\x46\x2\x2\x671\x66C\x3\x2\x2\x2\x671\x66D\x3\x2\x2\x2\x671\x66F"+
		"\x3\x2\x2\x2\x671\x670\x3\x2\x2\x2\x672o\x3\x2\x2\x2\x673\x67F\x5\x86"+
		"\x44\x2\x674\x675\a\x5\x2\x2\x675\x67A\x5\x8CG\x2\x676\x677\a\a\x2\x2"+
		"\x677\x679\x5\x8CG\x2\x678\x676\x3\x2\x2\x2\x679\x67C\x3\x2\x2\x2\x67A"+
		"\x678\x3\x2\x2\x2\x67A\x67B\x3\x2\x2\x2\x67B\x67D\x3\x2\x2\x2\x67C\x67A"+
		"\x3\x2\x2\x2\x67D\x67E\a\x6\x2\x2\x67E\x680\x3\x2\x2\x2\x67F\x674\x3\x2"+
		"\x2\x2\x67F\x680\x3\x2\x2\x2\x680q\x3\x2\x2\x2\x681\x683\t\n\x2\x2\x682"+
		"\x681\x3\x2\x2\x2\x682\x683\x3\x2\x2\x2\x683\x684\x3\x2\x2\x2\x684\x685"+
		"\a\x98\x2\x2\x685s\x3\x2\x2\x2\x686\x687\t\x10\x2\x2\x687u\x3\x2\x2\x2"+
		"\x688\x689\t\x11\x2\x2\x689w\x3\x2\x2\x2\x68A\x68B\a\x9A\x2\x2\x68By\x3"+
		"\x2\x2\x2\x68C\x68F\x5N(\x2\x68D\x68F\x5\x46$\x2\x68E\x68C\x3\x2\x2\x2"+
		"\x68E\x68D\x3\x2\x2\x2\x68F{\x3\x2\x2\x2\x690\x691\t\x12\x2\x2\x691}\x3"+
		"\x2\x2\x2\x692\x693\t\x13\x2\x2\x693\x7F\x3\x2\x2\x2\x694\x695\x5\xA2"+
		"R\x2\x695\x81\x3\x2\x2\x2\x696\x697\x5\xA2R\x2\x697\x83\x3\x2\x2\x2\x698"+
		"\x699\x5\xA2R\x2\x699\x85\x3\x2\x2\x2\x69A\x69B\x5\xA2R\x2\x69B\x87\x3"+
		"\x2\x2\x2\x69C\x69D\x5\xA2R\x2\x69D\x89\x3\x2\x2\x2\x69E\x69F\x5\xA2R"+
		"\x2\x69F\x8B\x3\x2\x2\x2\x6A0\x6A1\x5\xA2R\x2\x6A1\x8D\x3\x2\x2\x2\x6A2"+
		"\x6A3\x5\xA2R\x2\x6A3\x8F\x3\x2\x2\x2\x6A4\x6A5\x5\xA2R\x2\x6A5\x91\x3"+
		"\x2\x2\x2\x6A6\x6A7\x5\xA2R\x2\x6A7\x93\x3\x2\x2\x2\x6A8\x6A9\x5\xA2R"+
		"\x2\x6A9\x95\x3\x2\x2\x2\x6AA\x6AB\x5\xA2R\x2\x6AB\x97\x3\x2\x2\x2\x6AC"+
		"\x6AD\x5\xA2R\x2\x6AD\x99\x3\x2\x2\x2\x6AE\x6AF\x5\xA2R\x2\x6AF\x9B\x3"+
		"\x2\x2\x2\x6B0\x6B1\x5\xA2R\x2\x6B1\x9D\x3\x2\x2\x2\x6B2\x6B9\a\x97\x2"+
		"\x2\x6B3\x6B9\a\x9A\x2\x2\x6B4\x6B5\a\x5\x2\x2\x6B5\x6B6\x5\x9EP\x2\x6B6"+
		"\x6B7\a\x6\x2\x2\x6B7\x6B9\x3\x2\x2\x2\x6B8\x6B2\x3\x2\x2\x2\x6B8\x6B3"+
		"\x3\x2\x2\x2\x6B8\x6B4\x3\x2\x2\x2\x6B9\x9F\x3\x2\x2\x2\x6BA\x6BB\x5\xA2"+
		"R\x2\x6BB\xA1\x3\x2\x2\x2\x6BC\x6C4\a\x97\x2\x2\x6BD\x6C4\x5~@\x2\x6BE"+
		"\x6C4\a\x9A\x2\x2\x6BF\x6C0\a\x5\x2\x2\x6C0\x6C1\x5\xA2R\x2\x6C1\x6C2"+
		"\a\x6\x2\x2\x6C2\x6C4\x3\x2\x2\x2\x6C3\x6BC\x3\x2\x2\x2\x6C3\x6BD\x3\x2"+
		"\x2\x2\x6C3\x6BE\x3\x2\x2\x2\x6C3\x6BF\x3\x2\x2\x2\x6C4\xA3\x3\x2\x2\x2"+
		"\xF6\xA7\xAF\xB6\xBB\xC1\xC7\xC9\xE9\xF0\xF8\xFB\x104\x108\x110\x114\x116"+
		"\x11B\x11D\x121\x128\x12B\x130\x134\x139\x142\x145\x14B\x14D\x151\x157"+
		"\x15C\x167\x16D\x171\x177\x17C\x185\x18C\x192\x196\x19A\x1A0\x1A5\x1AC"+
		"\x1B7\x1BA\x1BC\x1C2\x1C8\x1CC\x1D3\x1D9\x1DF\x1E5\x1EA\x1F6\x1FB\x206"+
		"\x20B\x20E\x215\x218\x21F\x228\x22B\x231\x233\x237\x23F\x244\x24C\x251"+
		"\x259\x25E\x266\x26B\x271\x278\x27B\x283\x28D\x290\x296\x298\x29B\x2AE"+
		"\x2B4\x2BD\x2C2\x2CB\x2D6\x2DD\x2E3\x2E9\x2F2\x2F9\x2FD\x2FF\x303\x30A"+
		"\x30C\x310\x313\x31A\x321\x324\x32E\x331\x337\x339\x33D\x344\x347\x34F"+
		"\x359\x35C\x362\x364\x368\x36F\x378\x37C\x37E\x382\x38B\x390\x392\x39B"+
		"\x3A6\x3AD\x3B0\x3B3\x3C0\x3CE\x3D3\x3D6\x3E3\x3F1\x3F6\x3FF\x402\x408"+
		"\x40A\x410\x415\x41B\x427\x42B\x430\x434\x437\x449\x44E\x453\x45B\x460"+
		"\x469\x470\x474\x484\x487\x48F\x498\x49C\x4A1\x4BF\x4CB\x4D0\x4DC\x4E2"+
		"\x4E9\x4ED\x4F7\x4FA\x500\x503\x505\x507\x512\x517\x523\x527\x52B\x52F"+
		"\x536\x538\x540\x547\x54A\x54E\x553\x55B\x56E\x574\x578\x588\x58E\x596"+
		"\x59B\x59E\x5A3\x5AC\x5B1\x5BF\x5C2\x5C4\x5C9\x5CD\x5D0\x5D7\x5DF\x5E3"+
		"\x5E7\x5EA\x5F0\x5F3\x5F5\x5FE\x603\x607\x60B\x60E\x619\x61E\x622\x629"+
		"\x632\x636\x638\x63C\x645\x64A\x64C\x655\x660\x667\x66A\x671\x67A\x67F"+
		"\x682\x68E\x6B8\x6C3";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ParsingSql.Antlr
